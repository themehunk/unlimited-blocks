{"version":3,"file":"editor.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/memize/index.js","webpack:///./node_modules/redux/es/redux.js","webpack:///./node_modules/symbol-observable/es/index.js","webpack:///./node_modules/symbol-observable/es/ponyfill.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./src/blocks/block-assets/blocks-detail.js","webpack:///./src/blocks/block-assets/editor.scss","webpack:///./src/blocks/block-assets/font-family.js","webpack:///./src/blocks/block-assets/icons.js","webpack:///./src/blocks/block-assets/index.js","webpack:///./src/blocks/block-assets/post-functions.js","webpack:///./src/blocks/block-assets/utility-components/BasicToggleNav.js","webpack:///./src/blocks/block-assets/utility-components/animations/animateclasses.js","webpack:///./src/blocks/block-assets/utility-components/animations/index.js","webpack:///./src/blocks/block-assets/utility-components/backgroundType/backgroundType.js","webpack:///./src/blocks/block-assets/utility-components/dimension.js","webpack:///./src/blocks/block-layout-pre/components/edit.js","webpack:///./src/blocks/block-layout-pre/components/layouts/layout-list.js","webpack:///./src/blocks/block-layout-pre/components/layouts/modal.js","webpack:///./src/blocks/block-layout-pre/editor.scss","webpack:///./src/blocks/block-layout-pre/index.js","webpack:///./src/blocks/column-blocks-column/edit.js","webpack:///./src/blocks/column-blocks-column/index.js","webpack:///./src/blocks/column-blocks-column/styles/editor.scss","webpack:///./src/blocks/column-wrapper/edit.js","webpack:///./src/blocks/column-wrapper/index.js","webpack:///./src/blocks/column-wrapper/style/editor.scss","webpack:///./src/blocks/icon-block/editor.scss","webpack:///./src/blocks/icon-block/index.js","webpack:///./src/blocks/post-category-layout/edit.js","webpack:///./src/blocks/post-category-layout/editor.scss","webpack:///./src/blocks/post-category-layout/index.js","webpack:///./src/blocks/post-grid-layout/edit.js","webpack:///./src/blocks/post-grid-layout/editor.scss","webpack:///./src/blocks/post-grid-layout/index.js","webpack:///./src/blocks/post-image-layout-five-post/edit.js","webpack:///./src/blocks/post-image-layout-five-post/editor.scss","webpack:///./src/blocks/post-image-layout-five-post/index.js","webpack:///./src/blocks/post-image-layout-four-post/edit.js","webpack:///./src/blocks/post-image-layout-four-post/editor.scss","webpack:///./src/blocks/post-image-layout-four-post/index.js","webpack:///./src/blocks/post-image-layout-six-post/edit.js","webpack:///./src/blocks/post-image-layout-six-post/editor.scss","webpack:///./src/blocks/post-image-layout-six-post/index.js","webpack:///./src/blocks/post-image-layout-three-post/edit.js","webpack:///./src/blocks/post-image-layout-three-post/editor.scss","webpack:///./src/blocks/post-image-layout-three-post/index.js","webpack:///./src/blocks/post-image-layout-two-post/edit.js","webpack:///./src/blocks/post-image-layout-two-post/editor.scss","webpack:///./src/blocks/post-image-layout-two-post/index.js","webpack:///./src/blocks/post-image-layout/edit.js","webpack:///./src/blocks/post-image-layout/editor.scss","webpack:///./src/blocks/post-image-layout/index.js","webpack:///./src/blocks/post-list-layout/edit.js","webpack:///./src/blocks/post-list-layout/editor.scss","webpack:///./src/blocks/post-list-layout/index.js","webpack:///./src/blocks/pricing-table/editor.scss","webpack:///./src/blocks/pricing-table/index.js","webpack:///./src/blocks/progress-bar-pie/editor.scss","webpack:///./src/blocks/progress-bar-pie/index.js","webpack:///./src/blocks/progress-bar/editor.scss","webpack:///./src/blocks/progress-bar/index.js","webpack:///./src/blocks/service-section/editor.scss","webpack:///./src/blocks/service-section/index.js","webpack:///./src/blocks/ubl-block-slider/edit.js","webpack:///./src/blocks/ubl-block-slider/editor.scss","webpack:///./src/blocks/ubl-block-slider/index.js","webpack:///./src/blocks/ubl-post-slider/edit.js","webpack:///./src/blocks/ubl-post-slider/editor.scss","webpack:///./src/blocks/ubl-post-slider/index.js","webpack:///./src/editor.js","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"data\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"htmlEntities\"]","webpack:///external [\"wp\",\"i18n\"]"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/editor.js\");\n","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {Function} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {F & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize( fn, options ) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ ( head ).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args ),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ ( tail ).prev;\n\t\t\t/** @type {MemizeCacheNode} */ ( tail ).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nmodule.exports = memize;\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { __ } from \"@wordpress/i18n\";\nexport const blocksDetail = {\n  block_layout_pre: {\n    title: __(\"Unlimited Blocks Templates\", \"unlimited-blocks\"),\n    keywords: [],\n    description: __(\n      \"This block allows you to display predefined Unlimited Blocks templates. (E.g- post, page, template)\",\n      \"unlimited-blocks\"\n    ),\n    icon: \"album\",\n  },\n  column_blocks_column: {\n    title: __(\"Unlimited Blocks Column\", \"unlimited-blocks\"),\n    description: __(\"Add a pre-defined column layout.\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: \"editor-table\",\n  },\n  column_wrapper: {\n    title: __(\"Advance Column\", \"unlimited-blocks\"),\n    description: __(\"Add a pre-defined column layout.\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M4 5v13h17V5H4zm2 11V7h3v9H6zm5 0v-3.5h3V16h-3zm8 0h-3v-3.5h3V16zm-8-5.5V7h8v3.5h-8z\"></path>\n      </svg>\n    ),\n  },\n  icon_block: {\n    title: __(\"Icon\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert an icon (E.g- icon, image)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [\"icon\", \"iconbox\"],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" tabindex=\"-1\">\n        <path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"></path>\n      </svg>\n    ),\n  },\n  post_category_layout: {\n    title: __(\"Post Category Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display image based posts layout of posts from your selected categories (E.g- post category)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        role=\"img\"\n        aria-hidden=\"true\"\n        focusable=\"false\"\n      >\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\"></path>\n      </svg>\n    ),\n  },\n  post_grid_layouts: {\n    title: __(\"Post Grid Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display grid type post layout from your blog posts. (E.g- display post, grid post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\"></path>\n      </svg>\n    ),\n  },\n  post_list_layout: {\n    title: __(\"Post List Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display list based post layout. (E.g- Post list)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M13 9.5h5v-2h-5v2zm0 7h5v-2h-5v2zm6 4.5H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2v14c0 1.1-.9 2-2 2zM6 11h5V6H6v5zm1-4h3v3H7V7zM6 18h5v-5H6v5zm1-4h3v3H7v-3z\"\n        ></path>\n      </svg>\n    ),\n  },\n  post_image_layout: {\n    title: __(\"Post Layout 1\", \"unlimited-blocks\"),\n    description: __(\"\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_two_post: {\n    title: __(\"Post Layout 2\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based two post layouts. (E.g- two column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_three_post: {\n    title: __(\"Post Layout 3\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based Three post layouts. (E.g- three column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_four_post: {\n    title: __(\"post Layout 4\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based four post layouts. (E.g- four column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_five_post: {\n    title: \"Post Layout 5\",\n    description: __(\n      \"This block allows you to display column based five post layouts. (E.g- five column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_six_post: {\n    title: __(\"Post Layout 6\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based six post layouts. (E.g- six column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  ubl_post_slider: {\n    title: \"Post Slider Layout\",\n    description: __(\n      \"This block allows you to display post based sliders. (E.g- post slider, blog slider)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        id=\"_x31__x2C_5\"\n        enable-background=\"new 0 0 24 24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"m6.251 13c-.242 0-.48-.117-.625-.334l-1.5-2.25c-.168-.252-.168-.58 0-.832l1.5-2.25c.229-.345.695-.438 1.04-.208s.438.695.208 1.04l-1.223 1.834 1.223 1.834c.229.345.137.81-.208 1.04-.128.085-.272.126-.415.126z\" />\n        <path d=\"m17.749 13c-.143 0-.287-.041-.415-.126-.345-.23-.438-.695-.208-1.04l1.223-1.834-1.223-1.834c-.229-.345-.137-.81.208-1.04.346-.23.811-.137 1.04.208l1.5 2.25c.168.252.168.58 0 .832l-1.5 2.25c-.145.217-.383.334-.625.334z\" />\n        <path d=\"m7 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m12 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m17 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m21.25 24h-18.5c-1.517 0-2.75-1.233-2.75-2.75v-18.5c0-1.517 1.233-2.75 2.75-2.75h18.5c1.517 0 2.75 1.233 2.75 2.75v18.5c0 1.517-1.233 2.75-2.75 2.75zm-18.5-22.5c-.689 0-1.25.561-1.25 1.25v18.5c0 .689.561 1.25 1.25 1.25h18.5c.689 0 1.25-.561 1.25-1.25v-18.5c0-.689-.561-1.25-1.25-1.25z\" />\n      </svg>\n    ),\n  },\n  pricing_table: {\n    title: __(\"Price Box\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert beautiful pricing table. (E.g- price, rate, features)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M11 17h2v-1h1c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1h-3v-1h4V8h-2V7h-2v1h-1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h3v1H9v2h2v1zm9-13H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4V6h16v12z\"></path>\n      </svg>\n    ),\n  },\n  linear_progress: {\n    title: __(\"Linear Progress Bar\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert linear progress bar anywhere in the page or post. (E.g-  progress bar)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M19.5 9.5c-1.03 0-1.9.62-2.29 1.5h-2.92c-.39-.88-1.26-1.5-2.29-1.5s-1.9.62-2.29 1.5H6.79c-.39-.88-1.26-1.5-2.29-1.5C3.12 9.5 2 10.62 2 12s1.12 2.5 2.5 2.5c1.03 0 1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5s1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5 1.38 0 2.5-1.12 2.5-2.5s-1.12-2.5-2.5-2.5z\"></path>\n      </svg>\n    ),\n  },\n  progress_bar_pie: {\n    title: __(\"Circular Progress Bar\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert circular progress bar anywhere in the page or post. (E.g-  progress bar)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.48 2.54l2.6 1.53c.56-1.24.88-2.62.88-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z\"></path>\n      </svg>\n    ),\n  },\n  service_section: {\n    title: __(\"Service Section\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert columns based image and texts. (E.g- service, image, icon)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M3 15h8v-2H3v2zm0 4h8v-2H3v2zm0-8h8V9H3v2zm0-6v2h8V5H3zm10 0h8v14h-8V5z\"></path>\n      </svg>\n    ),\n  },\n  ubl_block_slider: {\n    title: __(\"Slider\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert content and image slides. (E.g- Image slider, content slider)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        id=\"_x31__x2C_5\"\n        enable-background=\"new 0 0 24 24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"m6.251 13c-.242 0-.48-.117-.625-.334l-1.5-2.25c-.168-.252-.168-.58 0-.832l1.5-2.25c.229-.345.695-.438 1.04-.208s.438.695.208 1.04l-1.223 1.834 1.223 1.834c.229.345.137.81-.208 1.04-.128.085-.272.126-.415.126z\" />\n        <path d=\"m17.749 13c-.143 0-.287-.041-.415-.126-.345-.23-.438-.695-.208-1.04l1.223-1.834-1.223-1.834c-.229-.345-.137-.81.208-1.04.346-.23.811-.137 1.04.208l1.5 2.25c.168.252.168.58 0 .832l-1.5 2.25c-.145.217-.383.334-.625.334z\" />\n        <path d=\"m7 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m12 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m17 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m21.25 24h-18.5c-1.517 0-2.75-1.233-2.75-2.75v-18.5c0-1.517 1.233-2.75 2.75-2.75h18.5c1.517 0 2.75 1.233 2.75 2.75v18.5c0 1.517-1.233 2.75-2.75 2.75zm-18.5-22.5c-.689 0-1.25.561-1.25 1.25v18.5c0 .689.561 1.25 1.25 1.25h18.5c.689 0 1.25-.561 1.25-1.25v-18.5c0-.689-.561-1.25-1.25-1.25z\" />\n      </svg>\n    ),\n  },\n};\n","// extracted by mini-css-extract-plugin","const fontFmily = \n[\"ABeeZee\",\n\"Abel\",\n\"Aclonica\",\n\"Acme\",\n\"Aguafina Script\",\n\"Akronim\",\n\"Aladin\",\n\"Alegreya SC\",\n\"Alex Brush\",\n\"Allura\",\n\"Almendra\",\n\"Almendra Display\",\n\"Amatic SC\",\n\"Amita\",\n\"Arizonia\",\n\"Arimo\",\n\"Arvo\",\n\"Asap Condensed\",\n\"Bad Script\",\n\"Balsamiq Sans\",\n\"Barrio\",\n\"Berkshire Swash\",\n\"Bubblegum Sans\",\n\"Bungee Hairline\",\n\"Butcherman\",\n\"Catamaran\",\n\"Dancing Script\",\n\"Do Hyeon\",\n\"Dokdo\",\n\"Dosis\",\n\"Dr Sugiyama\",\n\"Eater\",\n\"Ewert\",\n\"Fascinate Inline\",\n\"Faster One\",\n\"Finger Paint\",\n\"Gorditas\",\n\"Great Vibes\",\n\"Habibi\",\n\"Hanuman\",\n\"Hanalei\",\n\"IM Fell Great Primer SC\",\n\"Iceberg\",\n\"Iceland\",\n\"Indie Flower\",\n\"Inter\",\n\"Irish Grover\",\n\"Italianno\",\n\"Itim\",\n\"Jacques Francois\",\n\"Jacques Francois Shadow\",\n\"Jim Nightshade\",\n\"Joti One\",\n\"Julius Sans One\",\n\"Just Me Again Down Here\",\n\"Kaushan Script\",\n\"Keania One\",\n\"Kirang Haerang\",\n\"Kite One\",\n\"Kristi\",\n\"Kumar One Outline\",\n\"Lakki Reddy\",\n\"Leckerli One\",\n\"Lily Script One\",\n\"Liu Jian Mao Cao\",\n\"Londrina Shadow\",\n\"Love Ya Like A Sister\",\n\"Major Mono Display\",\n\"Mandali\",\n\"Marck Script\",\n\"Merienda\",\n\"Merienda One\",\n\"Merriweather Sans\",\n\"Michroma\",\n\"Miltonian Tattoo\",\n\"Mountains of Christmas\",\n\"Mukta Vaani\",\n\"Niramit\",\n\"Nosifer\",\n\"Nova Script\",\n\"Norican\",\n\"Offside\",\n\"Orbitron\",\n\"PT Sans Caption\",\n\"Pacifico\",\n\"Palanquin Dark\",\n\"Piedra\",\n\"Playfair Display\",\n\"Poiret One\",\n\"Princess Sofia\",\n\"Zilla Slab\",\n\"Zhi Mang Xing\",\n\"Zeyada\",\n\"ZCOOL XiaoWei\",\n\"ZCOOL KuaiLe\",\n\"Yeon Sung\",\n\"Yellowtail\",\n\"Yatra One\",\n\"Yanone Kaffeesatz\",\n\"Yesteryear\",\n\"Wire One\",\n\"Wendy One\",\n\"Wellfleet\",\n\"Warnes\",\n\"Walter Turncoat\",\n\"Wallpoet\",\n\"Waiting for the Sunrise\",\n\"Volkhov\",\n\"Viga\",\n\"Vibur\",\n\"Vibes\",\n\"Vast Shadow\",\n\"Vampiro One\",\n\"VT323\",\n\"Unlock\",\n\"Unkempt\",\n\"UnifrakturMaguntia\",\n\"Unica One\",\n\"Underdog\",\n\"Uncial Antiqua\",\n\"Ultra\",\n\"Ubuntu\",\n\"Ubuntu Mono\",\n\"Turret Road\",\n\"Turret Road\",\n\"Tulpen One\",\n\"Trochut\",\n\"Trocchi\",\n\"Trade Winds\",\n\"Tomorrow\",\n\"Titan One\",\n\"Timmana\",\n\"Tillana\",\n\"The Girl Next Door\",\n\"Text Me One\",\n\"Tenali Ramakrishna\",\n\"Tauri\",\n\"Tangerine\",\n\"Syncopate\",\n\"Swanky and Moo Moo\",\n\"Suravaram\",\n\"Supermercado One\",\n\"Sunshiney\",\n\"Sulphur Point\",\n\"Sue Ellen Francisco\",\n\"Stylish\",\n\"Stint Ultra Expanded\",\n\"Stardos Stencil\",\n\"Stalinist One\",\n\"Stalemate\",\n\"Srisakdi\",\n\"Sriracha\",\n\"Spirax\",\n\"Spicy Rice\",\n\"Special Elite\",\n\"Space Mono\",\n\"Source Code Pro\",\n\"Sonsie One\",\n\"Sofia\",\n\"Sofadi One\",\n\"Snowburst One\",\n\"Snippet\",\n\"Sniglet\",\n\"Smokum\",\n\"Slackey\",\n\"Skranji\",\n\"Six Caps\",\n\"Sirin Stencil\",\n\"Simonetta\",\n\"Sigmar One\",\n\"Shrikhand\",\n\"Short Stack\",\n\"Shojumaru\",\n\"Shadows Into Light Two\",\n\"Shadows Into Light\",\n\"Seymour One\",\n\"Sevillana\",\n\"Sedgwick Ave Display\",\n\"Sedgwick Ave\",\n\"Seaweed Script\",\n\"Satisfy\",\n\"Sarina\",\n\"Sancreek\",\n\"Saira Stencil One\",\n\"Sail\",\n\"Sacramento\",\n\"Rye\",\n\"Ruthie\",\n\"Ruslan Display\",\n\"Rum Raisin\",\n\"Ruge Boogie\",\n\"Rubik Mono One\",\n\"Rouge Script\",\n\"Rosarivo\",\n\"Romanesco\",\n\"Rock Salt\",\n\"Rochester\",\n\"Roboto\",\n\"Risque\",\n\"Ribeye Marrow\",\n\"Ribeye\",\n\"Revalia\",\n\"Reenie Beanie\",\n\"Redressed\",\n\"Red Rose\",\n\"Ravi Prakash\",\n\"Ranga\",\n\"Rancho\",\n\"Ranchers\",\n\"Raleway Dots\",\n\"Rakkas\",\n\"Rajdhani\",\n\"Racing Sans One\",\n\"Quintessential\",\n\"Qwigley\",\n\"Quicksand\"];\nexport default fontFmily;\n","let icons_ = [\n    \"fas fa-ad\",\n    \"fas fa-address-book\",\n    \"fas fa-address-card\",\n    \"fas fa-adjust\",\n    \"fas fa-air-freshener\",\n    \"fas fa-align-center\",\n    \"fas fa-align-justify\",\n    \"fas fa-align-left\",\n    \"fas fa-align-right\",\n    \"fas fa-allergies\",\n    \"fas fa-ambulance\",\n    \"fas fa-american-sign-language-interpreting\",\n    \"fas fa-anchor\",\n    \"fas fa-angle-double-down\",\n    \"fas fa-angle-double-left\",\n    \"fas fa-angle-double-right\",\n    \"fas fa-angle-double-up\",\n    \"fas fa-angle-down\",\n    \"fas fa-angle-left\",\n    \"fas fa-angle-right\",\n    \"fas fa-angle-up\",\n    \"fas fa-angry\",\n    \"fas fa-ankh\",\n    \"fas fa-apple-alt\",\n    \"fas fa-archive\",\n    \"fas fa-archway\",\n    \"fas fa-arrow-alt-circle-down\",\n    \"fas fa-arrow-alt-circle-left\",\n    \"fas fa-arrow-alt-circle-right\",\n    \"fas fa-arrow-alt-circle-up\",\n    \"fas fa-arrow-circle-down\",\n    \"fas fa-arrow-circle-left\",\n    \"fas fa-arrow-circle-right\",\n    \"fas fa-arrow-circle-up\",\n    \"fas fa-arrow-down\",\n    \"fas fa-arrow-left\",\n    \"fas fa-arrow-right\",\n    \"fas fa-arrow-up\",\n    \"fas fa-arrows-alt\",\n    \"fas fa-arrows-alt-h\",\n    \"fas fa-arrows-alt-v\",\n    \"fas fa-assistive-listening-systems\",\n    \"fas fa-asterisk\",\n    \"fas fa-at\",\n    \"fas fa-atlas\",\n    \"fas fa-atom\",\n    \"fas fa-audio-description\",\n    \"fas fa-award\",\n    \"fas fa-baby\",\n    \"fas fa-baby-carriage\",\n    \"fas fa-backspace\",\n    \"fas fa-backward\",\n    \"fas fa-balance-scale\",\n    \"fas fa-ban\",\n    \"fas fa-band-aid\",\n    \"fas fa-barcode\",\n    \"fas fa-bars\",\n    \"fas fa-baseball-ball\",\n    \"fas fa-basketball-ball\",\n    \"fas fa-bath\",\n    \"fas fa-battery-empty\",\n    \"fas fa-battery-full\",\n    \"fas fa-battery-half\",\n    \"fas fa-battery-quarter\",\n    \"fas fa-battery-three-quarters\",\n    \"fas fa-bed\",\n    \"fas fa-beer\",\n    \"fas fa-bell\",\n    \"fas fa-bell-slash\",\n    \"fas fa-bezier-curve\",\n    \"fas fa-bible\",\n    \"fas fa-bicycle\",\n    \"fas fa-binoculars\",\n    \"fas fa-biohazard\",\n    \"fas fa-birthday-cake\",\n    \"fas fa-blender\",\n    \"fas fa-blender-phone\",\n    \"fas fa-blind\",\n    \"fas fa-blog\",\n    \"fas fa-bold\",\n    \"fas fa-bolt\",\n    \"fas fa-bomb\",\n    \"fas fa-bone\",\n    \"fas fa-bong\",\n    \"fas fa-book\",\n    \"fas fa-book-dead\",\n    \"fas fa-book-open\",\n    \"fas fa-book-reader\",\n    \"fas fa-bookmark\",\n    \"fas fa-bowling-ball\",\n    \"fas fa-box\",\n    \"fas fa-box-open\",\n    \"fas fa-boxes\",\n    \"fas fa-braille\",\n    \"fas fa-brain\",\n    \"fas fa-briefcase\",\n    \"fas fa-briefcase-medical\",\n    \"fas fa-broadcast-tower\",\n    \"fas fa-broom\",\n    \"fas fa-brush\",\n    \"fas fa-bug\",\n    \"fas fa-building\",\n    \"fas fa-bullhorn\",\n    \"fas fa-bullseye\",\n    \"fas fa-burn\",\n    \"fas fa-bus\",\n    \"fas fa-bus-alt\",\n    \"fas fa-business-time\",\n    \"fas fa-calculator\",\n    \"fas fa-calendar\",\n    \"fas fa-calendar-alt\",\n    \"fas fa-calendar-check\",\n    \"fas fa-calendar-day\",\n    \"fas fa-calendar-minus\",\n    \"fas fa-calendar-plus\",\n    \"fas fa-calendar-times\",\n    \"fas fa-calendar-week\",\n    \"fas fa-camera\",\n    \"fas fa-camera-retro\",\n    \"fas fa-campground\",\n    \"fas fa-candy-cane\",\n    \"fas fa-cannabis\",\n    \"fas fa-capsules\",\n    \"fas fa-car\",\n    \"fas fa-car-alt\",\n    \"fas fa-car-battery\",\n    \"fas fa-car-crash\",\n    \"fas fa-car-side\",\n    \"fas fa-caret-down\",\n    \"fas fa-caret-left\",\n    \"fas fa-caret-right\",\n    \"fas fa-caret-square-down\",\n    \"fas fa-caret-square-left\",\n    \"fas fa-caret-square-right\",\n    \"fas fa-caret-square-up\",\n    \"fas fa-caret-up\",\n    \"fas fa-carrot\",\n    \"fas fa-cart-arrow-down\",\n    \"fas fa-cart-plus\",\n    \"fas fa-cash-register\",\n    \"fas fa-cat\",\n    \"fas fa-certificate\",\n    \"fas fa-chair\",\n    \"fas fa-chalkboard\",\n    \"fas fa-chalkboard-teacher\",\n    \"fas fa-charging-station\",\n    \"fas fa-chart-area\",\n    \"fas fa-chart-bar\",\n    \"fas fa-chart-line\",\n    \"fas fa-chart-pie\",\n    \"fas fa-check\",\n    \"fas fa-check-circle\",\n    \"fas fa-check-double\",\n    \"fas fa-check-square\",\n    \"fas fa-chess\",\n    \"fas fa-chess-bishop\",\n    \"fas fa-chess-board\",\n    \"fas fa-chess-king\",\n    \"fas fa-chess-knight\",\n    \"fas fa-chess-pawn\",\n    \"fas fa-chess-queen\",\n    \"fas fa-chess-rook\",\n    \"fas fa-chevron-circle-down\",\n    \"fas fa-chevron-circle-left\",\n    \"fas fa-chevron-circle-right\",\n    \"fas fa-chevron-circle-up\",\n    \"fas fa-chevron-down\",\n    \"fas fa-chevron-left\",\n    \"fas fa-chevron-right\",\n    \"fas fa-chevron-up\",\n    \"fas fa-child\",\n    \"fas fa-church\",\n    \"fas fa-circle\",\n    \"fas fa-circle-notch\",\n    \"fas fa-city\",\n    \"fas fa-clipboard\",\n    \"fas fa-clipboard-check\",\n    \"fas fa-clipboard-list\",\n    \"fas fa-clock\",\n    \"fas fa-clone\",\n    \"fas fa-closed-captioning\",\n    \"fas fa-cloud\",\n    \"fas fa-cloud-download-alt\",\n    \"fas fa-cloud-meatball\",\n    \"fas fa-cloud-moon\",\n    \"fas fa-cloud-moon-rain\",\n    \"fas fa-cloud-rain\",\n    \"fas fa-cloud-showers-heavy\",\n    \"fas fa-cloud-sun\",\n    \"fas fa-cloud-sun-rain\",\n    \"fas fa-cloud-upload-alt\",\n    \"fas fa-cocktail\",\n    \"fas fa-code\",\n    \"fas fa-code-branch\",\n    \"fas fa-coffee\",\n    \"fas fa-cog\",\n    \"fas fa-cogs\",\n    \"fas fa-coins\",\n    \"fas fa-columns\",\n    \"fas fa-comment\",\n    \"fas fa-comment-alt\",\n    \"fas fa-comment-dollar\",\n    \"fas fa-comment-dots\",\n    \"fas fa-comment-slash\",\n    \"fas fa-comments\",\n    \"fas fa-comments-dollar\",\n    \"fas fa-compact-disc\",\n    \"fas fa-compass\",\n    \"fas fa-compress\",\n    \"fas fa-compress-arrows-alt\",\n    \"fas fa-concierge-bell\",\n    \"fas fa-cookie\",\n    \"fas fa-cookie-bite\",\n    \"fas fa-copy\",\n    \"fas fa-copyright\",\n    \"fas fa-couch\",\n    \"fas fa-credit-card\",\n    \"fas fa-crop\",\n    \"fas fa-crop-alt\",\n    \"fas fa-cross\",\n    \"fas fa-crosshairs\",\n    \"fas fa-crow\",\n    \"fas fa-crown\",\n    \"fas fa-cube\",\n    \"fas fa-cubes\",\n    \"fas fa-cut\",\n    \"fas fa-database\",\n    \"fas fa-deaf\",\n    \"fas fa-democrat\",\n    \"fas fa-desktop\",\n    \"fas fa-dharmachakra\",\n    \"fas fa-diagnoses\",\n    \"fas fa-dice\",\n    \"fas fa-dice-d20\",\n    \"fas fa-dice-d6\",\n    \"fas fa-dice-five\",\n    \"fas fa-dice-four\",\n    \"fas fa-dice-one\",\n    \"fas fa-dice-six\",\n    \"fas fa-dice-three\",\n    \"fas fa-dice-two\",\n    \"fas fa-digital-tachograph\",\n    \"fas fa-directions\",\n    \"fas fa-divide\",\n    \"fas fa-dizzy\",\n    \"fas fa-dna\",\n    \"fas fa-dog\",\n    \"fas fa-dollar-sign\",\n    \"fas fa-dolly\",\n    \"fas fa-dolly-flatbed\",\n    \"fas fa-donate\",\n    \"fas fa-door-closed\",\n    \"fas fa-door-open\",\n    \"fas fa-dot-circle\",\n    \"fas fa-dove\",\n    \"fas fa-download\",\n    \"fas fa-drafting-compass\",\n    \"fas fa-dragon\",\n    \"fas fa-draw-polygon\",\n    \"fas fa-drum\",\n    \"fas fa-drum-steelpan\",\n    \"fas fa-drumstick-bite\",\n    \"fas fa-dumbbell\",\n    \"fas fa-dumpster\",\n    \"fas fa-dumpster-fire\",\n    \"fas fa-dungeon\",\n    \"fas fa-edit\",\n    \"fas fa-eject\",\n    \"fas fa-ellipsis-h\",\n    \"fas fa-ellipsis-v\",\n    \"fas fa-envelope\",\n    \"fas fa-envelope-open\",\n    \"fas fa-envelope-open-text\",\n    \"fas fa-envelope-square\",\n    \"fas fa-equals\",\n    \"fas fa-eraser\",\n    \"fas fa-ethernet\",\n    \"fas fa-euro-sign\",\n    \"fas fa-exchange-alt\",\n    \"fas fa-exclamation\",\n    \"fas fa-exclamation-circle\",\n    \"fas fa-exclamation-triangle\",\n    \"fas fa-expand\",\n    \"fas fa-expand-arrows-alt\",\n    \"fas fa-external-link-alt\",\n    \"fas fa-external-link-square-alt\",\n    \"fas fa-eye\",\n    \"fas fa-eye-dropper\",\n    \"fas fa-eye-slash\",\n    \"fas fa-fast-backward\",\n    \"fas fa-fast-forward\",\n    \"fas fa-fax\",\n    \"fas fa-feather\",\n    \"fas fa-feather-alt\",\n    \"fas fa-female\",\n    \"fas fa-fighter-jet\",\n    \"fas fa-file\",\n    \"fas fa-file-alt\",\n    \"fas fa-file-archive\",\n    \"fas fa-file-audio\",\n    \"fas fa-file-code\",\n    \"fas fa-file-contract\",\n    \"fas fa-file-csv\",\n    \"fas fa-file-download\",\n    \"fas fa-file-excel\",\n    \"fas fa-file-export\",\n    \"fas fa-file-image\",\n    \"fas fa-file-import\",\n    \"fas fa-file-invoice\",\n    \"fas fa-file-invoice-dollar\",\n    \"fas fa-file-medical\",\n    \"fas fa-file-medical-alt\",\n    \"fas fa-file-pdf\",\n    \"fas fa-file-powerpoint\",\n    \"fas fa-file-prescription\",\n    \"fas fa-file-signature\",\n    \"fas fa-file-upload\",\n    \"fas fa-file-video\",\n    \"fas fa-file-word\",\n    \"fas fa-fill\",\n    \"fas fa-fill-drip\",\n    \"fas fa-film\",\n    \"fas fa-filter\",\n    \"fas fa-fingerprint\",\n    \"fas fa-fire\",\n    \"fas fa-fire-alt\",\n    \"fas fa-fire-extinguisher\",\n    \"fas fa-first-aid\",\n    \"fas fa-fish\",\n    \"fas fa-fist-raised\",\n    \"fas fa-flag\",\n    \"fas fa-flag-checkered\",\n    \"fas fa-flag-usa\",\n    \"fas fa-flask\",\n    \"fas fa-flushed\",\n    \"fas fa-folder\",\n    \"fas fa-folder-minus\",\n    \"fas fa-folder-open\",\n    \"fas fa-folder-plus\",\n    \"fas fa-font\",\n    \"fas fa-football-ball\",\n    \"fas fa-forward\",\n    \"fas fa-frog\",\n    \"fas fa-frown\",\n    \"fas fa-frown-open\",\n    \"fas fa-funnel-dollar\",\n    \"fas fa-futbol\",\n    \"fas fa-gamepad\",\n    \"fas fa-gas-pump\",\n    \"fas fa-gavel\",\n    \"fas fa-gem\",\n    \"fas fa-genderless\",\n    \"fas fa-ghost\",\n    \"fas fa-gift\",\n    \"fas fa-gifts\",\n    \"fas fa-glass-cheers\",\n    \"fas fa-glass-martini\",\n    \"fas fa-glass-martini-alt\",\n    \"fas fa-glass-whiskey\",\n    \"fas fa-glasses\",\n    \"fas fa-globe\",\n    \"fas fa-globe-africa\",\n    \"fas fa-globe-americas\",\n    \"fas fa-globe-asia\",\n    \"fas fa-globe-europe\",\n    \"fas fa-golf-ball\",\n    \"fas fa-gopuram\",\n    \"fas fa-graduation-cap\",\n    \"fas fa-greater-than\",\n    \"fas fa-greater-than-equal\",\n    \"fas fa-grimace\",\n    \"fas fa-grin\",\n    \"fas fa-grin-alt\",\n    \"fas fa-grin-beam\",\n    \"fas fa-grin-beam-sweat\",\n    \"fas fa-grin-hearts\",\n    \"fas fa-grin-squint\",\n    \"fas fa-grin-squint-tears\",\n    \"fas fa-grin-stars\",\n    \"fas fa-grin-tears\",\n    \"fas fa-grin-tongue\",\n    \"fas fa-grin-tongue-squint\",\n    \"fas fa-grin-tongue-wink\",\n    \"fas fa-grin-wink\",\n    \"fas fa-grip-horizontal\",\n    \"fas fa-grip-lines\",\n    \"fas fa-grip-lines-vertical\",\n    \"fas fa-grip-vertical\",\n    \"fas fa-guitar\",\n    \"fas fa-h-square\",\n    \"fas fa-hammer\",\n    \"fas fa-hamsa\",\n    \"fas fa-hand-holding\",\n    \"fas fa-hand-holding-heart\",\n    \"fas fa-hand-holding-usd\",\n    \"fas fa-hand-lizard\",\n    \"fas fa-hand-paper\",\n    \"fas fa-hand-peace\",\n    \"fas fa-hand-point-down\",\n    \"fas fa-hand-point-left\",\n    \"fas fa-hand-point-right\",\n    \"fas fa-hand-point-up\",\n    \"fas fa-hand-pointer\",\n    \"fas fa-hand-rock\",\n    \"fas fa-hand-scissors\",\n    \"fas fa-hand-spock\",\n    \"fas fa-hands\",\n    \"fas fa-hands-helping\",\n    \"fas fa-handshake\",\n    \"fas fa-hanukiah\",\n    \"fas fa-hashtag\",\n    \"fas fa-hat-wizard\",\n    \"fas fa-haykal\",\n    \"fas fa-hdd\",\n    \"fas fa-heading\",\n    \"fas fa-headphones\",\n    \"fas fa-headphones-alt\",\n    \"fas fa-headset\",\n    \"fas fa-heart\",\n    \"fas fa-heart-broken\",\n    \"fas fa-heartbeat\",\n    \"fas fa-helicopter\",\n    \"fas fa-highlighter\",\n    \"fas fa-hiking\",\n    \"fas fa-hippo\",\n    \"fas fa-history\",\n    \"fas fa-hockey-puck\",\n    \"fas fa-holly-berry\",\n    \"fas fa-home\",\n    \"fas fa-horse\",\n    \"fas fa-horse-head\",\n    \"fas fa-hospital\",\n    \"fas fa-hospital-alt\",\n    \"fas fa-hospital-symbol\",\n    \"fas fa-hot-tub\",\n    \"fas fa-hotel\",\n    \"fas fa-hourglass\",\n    \"fas fa-hourglass-end\",\n    \"fas fa-hourglass-half\",\n    \"fas fa-hourglass-start\",\n    \"fas fa-house-damage\",\n    \"fas fa-hryvnia\",\n    \"fas fa-i-cursor\",\n    \"fas fa-icicles\",\n    \"fas fa-id-badge\",\n    \"fas fa-id-card\",\n    \"fas fa-id-card-alt\",\n    \"fas fa-igloo\",\n    \"fas fa-image\",\n    \"fas fa-images\",\n    \"fas fa-inbox\",\n    \"fas fa-indent\",\n    \"fas fa-industry\",\n    \"fas fa-infinity\",\n    \"fas fa-info\",\n    \"fas fa-info-circle\",\n    \"fas fa-italic\",\n    \"fas fa-jedi\",\n    \"fas fa-joint\",\n    \"fas fa-journal-whills\",\n    \"fas fa-kaaba\",\n    \"fas fa-key\",\n    \"fas fa-keyboard\",\n    \"fas fa-khanda\",\n    \"fas fa-kiss\",\n    \"fas fa-kiss-beam\",\n    \"fas fa-kiss-wink-heart\",\n    \"fas fa-kiwi-bird\",\n    \"fas fa-landmark\",\n    \"fas fa-language\",\n    \"fas fa-laptop\",\n    \"fas fa-laptop-code\",\n    \"fas fa-laugh\",\n    \"fas fa-laugh-beam\",\n    \"fas fa-laugh-squint\",\n    \"fas fa-laugh-wink\",\n    \"fas fa-layer-group\",\n    \"fas fa-leaf\",\n    \"fas fa-lemon\",\n    \"fas fa-less-than\",\n    \"fas fa-less-than-equal\",\n    \"fas fa-level-down-alt\",\n    \"fas fa-level-up-alt\",\n    \"fas fa-life-ring\",\n    \"fas fa-lightbulb\",\n    \"fas fa-link\",\n    \"fas fa-lira-sign\",\n    \"fas fa-list\",\n    \"fas fa-list-alt\",\n    \"fas fa-list-ol\",\n    \"fas fa-list-ul\",\n    \"fas fa-location-arrow\",\n    \"fas fa-lock\",\n    \"fas fa-lock-open\",\n    \"fas fa-long-arrow-alt-down\",\n    \"fas fa-long-arrow-alt-left\",\n    \"fas fa-long-arrow-alt-right\",\n    \"fas fa-long-arrow-alt-up\",\n    \"fas fa-low-vision\",\n    \"fas fa-luggage-cart\",\n    \"fas fa-magic\",\n    \"fas fa-magnet\",\n    \"fas fa-mail-bulk\",\n    \"fas fa-male\",\n    \"fas fa-map\",\n    \"fas fa-map-marked\",\n    \"fas fa-map-marked-alt\",\n    \"fas fa-map-marker\",\n    \"fas fa-map-marker-alt\",\n    \"fas fa-map-pin\",\n    \"fas fa-map-signs\",\n    \"fas fa-marker\",\n    \"fas fa-mars\",\n    \"fas fa-mars-double\",\n    \"fas fa-mars-stroke\",\n    \"fas fa-mars-stroke-h\",\n    \"fas fa-mars-stroke-v\",\n    \"fas fa-mask\",\n    \"fas fa-medal\",\n    \"fas fa-medkit\",\n    \"fas fa-meh\",\n    \"fas fa-meh-blank\",\n    \"fas fa-meh-rolling-eyes\",\n    \"fas fa-memory\",\n    \"fas fa-menorah\",\n    \"fas fa-mercury\",\n    \"fas fa-meteor\",\n    \"fas fa-microchip\",\n    \"fas fa-microphone\",\n    \"fas fa-microphone-alt\",\n    \"fas fa-microphone-alt-slash\",\n    \"fas fa-microphone-slash\",\n    \"fas fa-microscope\",\n    \"fas fa-minus\",\n    \"fas fa-minus-circle\",\n    \"fas fa-minus-square\",\n    \"fas fa-mitten\",\n    \"fas fa-mobile\",\n    \"fas fa-mobile-alt\",\n    \"fas fa-money-bill\",\n    \"fas fa-money-bill-alt\",\n    \"fas fa-money-bill-wave\",\n    \"fas fa-money-bill-wave-alt\",\n    \"fas fa-money-check\",\n    \"fas fa-money-check-alt\",\n    \"fas fa-monument\",\n    \"fas fa-moon\",\n    \"fas fa-mortar-pestle\",\n    \"fas fa-mosque\",\n    \"fas fa-motorcycle\",\n    \"fas fa-mountain\",\n    \"fas fa-mouse-pointer\",\n    \"fas fa-mug-hot\",\n    \"fas fa-music\",\n    \"fas fa-network-wired\",\n    \"fas fa-neuter\",\n    \"fas fa-newspaper\",\n    \"fas fa-not-equal\",\n    \"fas fa-notes-medical\",\n    \"fas fa-object-group\",\n    \"fas fa-object-ungroup\",\n    \"fas fa-oil-can\",\n    \"fas fa-om\",\n    \"fas fa-otter\",\n    \"fas fa-outdent\",\n    \"fas fa-paint-brush\",\n    \"fas fa-paint-roller\",\n    \"fas fa-palette\",\n    \"fas fa-pallet\",\n    \"fas fa-paper-plane\",\n    \"fas fa-paperclip\",\n    \"fas fa-parachute-box\",\n    \"fas fa-paragraph\",\n    \"fas fa-parking\",\n    \"fas fa-passport\",\n    \"fas fa-pastafarianism\",\n    \"fas fa-paste\",\n    \"fas fa-pause\",\n    \"fas fa-pause-circle\",\n    \"fas fa-paw\",\n    \"fas fa-peace\",\n    \"fas fa-pen\",\n    \"fas fa-pen-alt\",\n    \"fas fa-pen-fancy\",\n    \"fas fa-pen-nib\",\n    \"fas fa-pen-square\",\n    \"fas fa-pencil-alt\",\n    \"fas fa-pencil-ruler\",\n    \"fas fa-people-carry\",\n    \"fas fa-percent\",\n    \"fas fa-percentage\",\n    \"fas fa-person-booth\",\n    \"fas fa-phone\",\n    \"fas fa-phone-slash\",\n    \"fas fa-phone-square\",\n    \"fas fa-phone-volume\",\n    \"fas fa-piggy-bank\",\n    \"fas fa-pills\",\n    \"fas fa-place-of-worship\",\n    \"fas fa-plane\",\n    \"fas fa-plane-arrival\",\n    \"fas fa-plane-departure\",\n    \"fas fa-play\",\n    \"fas fa-play-circle\",\n    \"fas fa-plug\",\n    \"fas fa-plus\",\n    \"fas fa-plus-circle\",\n    \"fas fa-plus-square\",\n    \"fas fa-podcast\",\n    \"fas fa-poll\",\n    \"fas fa-poll-h\",\n    \"fas fa-poo\",\n    \"fas fa-poo-storm\",\n    \"fas fa-poop\",\n    \"fas fa-portrait\",\n    \"fas fa-pound-sign\",\n    \"fas fa-power-off\",\n    \"fas fa-pray\",\n    \"fas fa-praying-hands\",\n    \"fas fa-prescription\",\n    \"fas fa-prescription-bottle\",\n    \"fas fa-prescription-bottle-alt\",\n    \"fas fa-print\",\n    \"fas fa-procedures\",\n    \"fas fa-project-diagram\",\n    \"fas fa-puzzle-piece\",\n    \"fas fa-qrcode\",\n    \"fas fa-question\",\n    \"fas fa-question-circle\",\n    \"fas fa-quidditch\",\n    \"fas fa-quote-left\",\n    \"fas fa-quote-right\",\n    \"fas fa-quran\",\n    \"fas fa-radiation\",\n    \"fas fa-radiation-alt\",\n    \"fas fa-rainbow\",\n    \"fas fa-random\",\n    \"fas fa-receipt\",\n    \"fas fa-recycle\",\n    \"fas fa-redo\",\n    \"fas fa-redo-alt\",\n    \"fas fa-registered\",\n    \"fas fa-reply\",\n    \"fas fa-reply-all\",\n    \"fas fa-republican\",\n    \"fas fa-restroom\",\n    \"fas fa-retweet\",\n    \"fas fa-ribbon\",\n    \"fas fa-ring\",\n    \"fas fa-road\",\n    \"fas fa-robot\",\n    \"fas fa-rocket\",\n    \"fas fa-route\",\n    \"fas fa-rss\",\n    \"fas fa-rss-square\",\n    \"fas fa-ruble-sign\",\n    \"fas fa-ruler\",\n    \"fas fa-ruler-combined\",\n    \"fas fa-ruler-horizontal\",\n    \"fas fa-ruler-vertical\",\n    \"fas fa-running\",\n    \"fas fa-rupee-sign\",\n    \"fas fa-sad-cry\",\n    \"fas fa-sad-tear\",\n    \"fas fa-satellite\",\n    \"fas fa-satellite-dish\",\n    \"fas fa-save\",\n    \"fas fa-school\",\n    \"fas fa-screwdriver\",\n    \"fas fa-scroll\",\n    \"fas fa-sd-card\",\n    \"fas fa-search\",\n    \"fas fa-search-dollar\",\n    \"fas fa-search-location\",\n    \"fas fa-search-minus\",\n    \"fas fa-search-plus\",\n    \"fas fa-seedling\",\n    \"fas fa-server\",\n    \"fas fa-shapes\",\n    \"fas fa-share\",\n    \"fas fa-share-alt\",\n    \"fas fa-share-alt-square\",\n    \"fas fa-share-square\",\n    \"fas fa-shekel-sign\",\n    \"fas fa-shield-alt\",\n    \"fas fa-ship\",\n    \"fas fa-shipping-fast\",\n    \"fas fa-shoe-prints\",\n    \"fas fa-shopping-bag\",\n    \"fas fa-shopping-basket\",\n    \"fas fa-shopping-cart\",\n    \"fas fa-shower\",\n    \"fas fa-shuttle-van\",\n    \"fas fa-sign\",\n    \"fas fa-sign-in-alt\",\n    \"fas fa-sign-language\",\n    \"fas fa-sign-out-alt\",\n    \"fas fa-signal\",\n    \"fas fa-signature\",\n    \"fas fa-sim-card\",\n    \"fas fa-sitemap\",\n    \"fas fa-skating\",\n    \"fas fa-skiing\",\n    \"fas fa-skiing-nordic\",\n    \"fas fa-skull\",\n    \"fas fa-skull-crossbones\",\n    \"fas fa-slash\",\n    \"fas fa-sleigh\",\n    \"fas fa-sliders-h\",\n    \"fas fa-smile\",\n    \"fas fa-smile-beam\",\n    \"fas fa-smile-wink\",\n    \"fas fa-smog\",\n    \"fas fa-smoking\",\n    \"fas fa-smoking-ban\",\n    \"fas fa-sms\",\n    \"fas fa-snowboarding\",\n    \"fas fa-snowflake\",\n    \"fas fa-snowman\",\n    \"fas fa-snowplow\",\n    \"fas fa-socks\",\n    \"fas fa-solar-panel\",\n    \"fas fa-sort\",\n    \"fas fa-sort-alpha-down\",\n    \"fas fa-sort-alpha-up\",\n    \"fas fa-sort-amount-down\",\n    \"fas fa-sort-amount-up\",\n    \"fas fa-sort-down\",\n    \"fas fa-sort-numeric-down\",\n    \"fas fa-sort-numeric-up\",\n    \"fas fa-sort-up\",\n    \"fas fa-spa\",\n    \"fas fa-space-shuttle\",\n    \"fas fa-spider\",\n    \"fas fa-spinner\",\n    \"fas fa-splotch\",\n    \"fas fa-spray-can\",\n    \"fas fa-square\",\n    \"fas fa-square-full\",\n    \"fas fa-square-root-alt\",\n    \"fas fa-stamp\",\n    \"fas fa-star\",\n    \"fas fa-star-and-crescent\",\n    \"fas fa-star-half\",\n    \"fas fa-star-half-alt\",\n    \"fas fa-star-of-david\",\n    \"fas fa-star-of-life\",\n    \"fas fa-step-backward\",\n    \"fas fa-step-forward\",\n    \"fas fa-stethoscope\",\n    \"fas fa-sticky-note\",\n    \"fas fa-stop\",\n    \"fas fa-stop-circle\",\n    \"fas fa-stopwatch\",\n    \"fas fa-store\",\n    \"fas fa-store-alt\",\n    \"fas fa-stream\",\n    \"fas fa-street-view\",\n    \"fas fa-strikethrough\",\n    \"fas fa-stroopwafel\",\n    \"fas fa-subscript\",\n    \"fas fa-subway\",\n    \"fas fa-suitcase\",\n    \"fas fa-suitcase-rolling\",\n    \"fas fa-sun\",\n    \"fas fa-superscript\",\n    \"fas fa-surprise\",\n    \"fas fa-swatchbook\",\n    \"fas fa-swimmer\",\n    \"fas fa-swimming-pool\",\n    \"fas fa-synagogue\",\n    \"fas fa-sync\",\n    \"fas fa-sync-alt\",\n    \"fas fa-syringe\",\n    \"fas fa-table\",\n    \"fas fa-table-tennis\",\n    \"fas fa-tablet\",\n    \"fas fa-tablet-alt\",\n    \"fas fa-tablets\",\n    \"fas fa-tachometer-alt\",\n    \"fas fa-tag\",\n    \"fas fa-tags\",\n    \"fas fa-tape\",\n    \"fas fa-tasks\",\n    \"fas fa-taxi\",\n    \"fas fa-teeth\",\n    \"fas fa-teeth-open\",\n    \"fas fa-temperature-high\",\n    \"fas fa-temperature-low\",\n    \"fas fa-tenge\",\n    \"fas fa-terminal\",\n    \"fas fa-text-height\",\n    \"fas fa-text-width\",\n    \"fas fa-th\",\n    \"fas fa-th-large\",\n    \"fas fa-th-list\",\n    \"fas fa-theater-masks\",\n    \"fas fa-thermometer\",\n    \"fas fa-thermometer-empty\",\n    \"fas fa-thermometer-full\",\n    \"fas fa-thermometer-half\",\n    \"fas fa-thermometer-quarter\",\n    \"fas fa-thermometer-three-quarters\",\n    \"fas fa-thumbs-down\",\n    \"fas fa-thumbs-up\",\n    \"fas fa-thumbtack\",\n    \"fas fa-ticket-alt\",\n    \"fas fa-times\",\n    \"fas fa-times-circle\",\n    \"fas fa-tint\",\n    \"fas fa-tint-slash\",\n    \"fas fa-tired\",\n    \"fas fa-toggle-off\",\n    \"fas fa-toggle-on\",\n    \"fas fa-toilet\",\n    \"fas fa-toilet-paper\",\n    \"fas fa-toolbox\",\n    \"fas fa-tools\",\n    \"fas fa-tooth\",\n    \"fas fa-torah\",\n    \"fas fa-torii-gate\",\n    \"fas fa-tractor\",\n    \"fas fa-trademark\",\n    \"fas fa-traffic-light\",\n    \"fas fa-train\",\n    \"fas fa-tram\",\n    \"fas fa-transgender\",\n    \"fas fa-transgender-alt\",\n    \"fas fa-trash\",\n    \"fas fa-trash-alt\",\n    \"fas fa-tree\",\n    \"fas fa-trophy\",\n    \"fas fa-truck\",\n    \"fas fa-truck-loading\",\n    \"fas fa-truck-monster\",\n    \"fas fa-truck-moving\",\n    \"fas fa-truck-pickup\",\n    \"fas fa-tshirt\",\n    \"fas fa-tty\",\n    \"fas fa-tv\",\n    \"fas fa-umbrella\",\n    \"fas fa-umbrella-beach\",\n    \"fas fa-underline\",\n    \"fas fa-undo\",\n    \"fas fa-undo-alt\",\n    \"fas fa-universal-access\",\n    \"fas fa-university\",\n    \"fas fa-unlink\",\n    \"fas fa-unlock\",\n    \"fas fa-unlock-alt\",\n    \"fas fa-upload\",\n    \"fas fa-user\",\n    \"fas fa-user-alt\",\n    \"fas fa-user-alt-slash\",\n    \"fas fa-user-astronaut\",\n    \"fas fa-user-check\",\n    \"fas fa-user-circle\",\n    \"fas fa-user-clock\",\n    \"fas fa-user-cog\",\n    \"fas fa-user-edit\",\n    \"fas fa-user-friends\",\n    \"fas fa-user-graduate\",\n    \"fas fa-user-injured\",\n    \"fas fa-user-lock\",\n    \"fas fa-user-md\",\n    \"fas fa-user-minus\",\n    \"fas fa-user-ninja\",\n    \"fas fa-user-plus\",\n    \"fas fa-user-secret\",\n    \"fas fa-user-shield\",\n    \"fas fa-user-slash\",\n    \"fas fa-user-tag\",\n    \"fas fa-user-tie\",\n    \"fas fa-user-times\",\n    \"fas fa-users\",\n    \"fas fa-users-cog\",\n    \"fas fa-utensil-spoon\",\n    \"fas fa-utensils\",\n    \"fas fa-vector-square\",\n    \"fas fa-venus\",\n    \"fas fa-venus-double\",\n    \"fas fa-venus-mars\",\n    \"fas fa-vial\",\n    \"fas fa-vials\",\n    \"fas fa-video\",\n    \"fas fa-video-slash\",\n    \"fas fa-vihara\",\n    \"fas fa-volleyball-ball\",\n    \"fas fa-volume-down\",\n    \"fas fa-volume-mute\",\n    \"fas fa-volume-off\",\n    \"fas fa-volume-up\",\n    \"fas fa-vote-yea\",\n    \"fas fa-vr-cardboard\",\n    \"fas fa-walking\",\n    \"fas fa-wallet\",\n    \"fas fa-warehouse\",\n    \"fas fa-water\",\n    \"fas fa-weight\",\n    \"fas fa-weight-hanging\",\n    \"fas fa-wheelchair\",\n    \"fas fa-wifi\",\n    \"fas fa-wind\",\n    \"fas fa-window-close\",\n    \"fas fa-window-maximize\",\n    \"fas fa-window-minimize\",\n    \"fas fa-window-restore\",\n    \"fas fa-wine-bottle\",\n    \"fas fa-wine-glass\",\n    \"fas fa-wine-glass-alt\",\n    \"fas fa-won-sign\",\n    \"fas fa-wrench\",\n    \"fas fa-x-ray\",\n    \"fas fa-yen-sign\",\n    \"fas fa-yin-yang\",\n    \"far fa-address-book\",\n    \"far fa-address-card\",\n    \"far fa-angry\",\n    \"far fa-arrow-alt-circle-down\",\n    \"far fa-arrow-alt-circle-left\",\n    \"far fa-arrow-alt-circle-right\",\n    \"far fa-arrow-alt-circle-up\",\n    \"far fa-bell\",\n    \"far fa-bell-slash\",\n    \"far fa-bookmark\",\n    \"far fa-building\",\n    \"far fa-calendar\",\n    \"far fa-calendar-alt\",\n    \"far fa-calendar-check\",\n    \"far fa-calendar-minus\",\n    \"far fa-calendar-plus\",\n    \"far fa-calendar-times\",\n    \"far fa-caret-square-down\",\n    \"far fa-caret-square-left\",\n    \"far fa-caret-square-right\",\n    \"far fa-caret-square-up\",\n    \"far fa-chart-bar\",\n    \"far fa-check-circle\",\n    \"far fa-check-square\",\n    \"far fa-circle\",\n    \"far fa-clipboard\",\n    \"far fa-clock\",\n    \"far fa-clone\",\n    \"far fa-closed-captioning\",\n    \"far fa-comment\",\n    \"far fa-comment-alt\",\n    \"far fa-comment-dots\",\n    \"far fa-comments\",\n    \"far fa-compass\",\n    \"far fa-copy\",\n    \"far fa-copyright\",\n    \"far fa-credit-card\",\n    \"far fa-dizzy\",\n    \"far fa-dot-circle\",\n    \"far fa-edit\",\n    \"far fa-envelope\",\n    \"far fa-envelope-open\",\n    \"far fa-eye\",\n    \"far fa-eye-slash\",\n    \"far fa-file\",\n    \"far fa-file-alt\",\n    \"far fa-file-archive\",\n    \"far fa-file-audio\",\n    \"far fa-file-code\",\n    \"far fa-file-excel\",\n    \"far fa-file-image\",\n    \"far fa-file-pdf\",\n    \"far fa-file-powerpoint\",\n    \"far fa-file-video\",\n    \"far fa-file-word\",\n    \"far fa-flag\",\n    \"far fa-flushed\",\n    \"far fa-folder\",\n    \"far fa-folder-open\",\n    \"far fa-frown\",\n    \"far fa-frown-open\",\n    \"far fa-futbol\",\n    \"far fa-gem\",\n    \"far fa-grimace\",\n    \"far fa-grin\",\n    \"far fa-grin-alt\",\n    \"far fa-grin-beam\",\n    \"far fa-grin-beam-sweat\",\n    \"far fa-grin-hearts\",\n    \"far fa-grin-squint\",\n    \"far fa-grin-squint-tears\",\n    \"far fa-grin-stars\",\n    \"far fa-grin-tears\",\n    \"far fa-grin-tongue\",\n    \"far fa-grin-tongue-squint\",\n    \"far fa-grin-tongue-wink\",\n    \"far fa-grin-wink\",\n    \"far fa-hand-lizard\",\n    \"far fa-hand-paper\",\n    \"far fa-hand-peace\",\n    \"far fa-hand-point-down\",\n    \"far fa-hand-point-left\",\n    \"far fa-hand-point-right\",\n    \"far fa-hand-point-up\",\n    \"far fa-hand-pointer\",\n    \"far fa-hand-rock\",\n    \"far fa-hand-scissors\",\n    \"far fa-hand-spock\",\n    \"far fa-handshake\",\n    \"far fa-hdd\",\n    \"far fa-heart\",\n    \"far fa-hospital\",\n    \"far fa-hourglass\",\n    \"far fa-id-badge\",\n    \"far fa-id-card\",\n    \"far fa-image\",\n    \"far fa-images\",\n    \"far fa-keyboard\",\n    \"far fa-kiss\",\n    \"far fa-kiss-beam\",\n    \"far fa-kiss-wink-heart\",\n    \"far fa-laugh\",\n    \"far fa-laugh-beam\",\n    \"far fa-laugh-squint\",\n    \"far fa-laugh-wink\",\n    \"far fa-lemon\",\n    \"far fa-life-ring\",\n    \"far fa-lightbulb\",\n    \"far fa-list-alt\",\n    \"far fa-map\",\n    \"far fa-meh\",\n    \"far fa-meh-blank\",\n    \"far fa-meh-rolling-eyes\",\n    \"far fa-minus-square\",\n    \"far fa-money-bill-alt\",\n    \"far fa-moon\",\n    \"far fa-newspaper\",\n    \"far fa-object-group\",\n    \"far fa-object-ungroup\",\n    \"far fa-paper-plane\",\n    \"far fa-pause-circle\",\n    \"far fa-play-circle\",\n    \"far fa-plus-square\",\n    \"far fa-question-circle\",\n    \"far fa-registered\",\n    \"far fa-sad-cry\",\n    \"far fa-sad-tear\",\n    \"far fa-save\",\n    \"far fa-share-square\",\n    \"far fa-smile\",\n    \"far fa-smile-beam\",\n    \"far fa-smile-wink\",\n    \"far fa-snowflake\",\n    \"far fa-square\",\n    \"far fa-star\",\n    \"far fa-star-half\",\n    \"far fa-sticky-note\",\n    \"far fa-stop-circle\",\n    \"far fa-sun\",\n    \"far fa-surprise\",\n    \"far fa-thumbs-down\",\n    \"far fa-thumbs-up\",\n    \"far fa-times-circle\",\n    \"far fa-tired\",\n    \"far fa-trash-alt\",\n    \"far fa-user\",\n    \"far fa-user-circle\",\n    \"far fa-window-close\",\n    \"far fa-window-maximize\",\n    \"far fa-window-minimize\",\n    \"far fa-window-restore\",\n    \"fab fa-500px\",\n    \"fab fa-accessible-icon\",\n    \"fab fa-accusoft\",\n    \"fab fa-acquisitions-incorporated\",\n    \"fab fa-adn\",\n    \"fab fa-adobe\",\n    \"fab fa-adversal\",\n    \"fab fa-affiliatetheme\",\n    \"fab fa-algolia\",\n    \"fab fa-alipay\",\n    \"fab fa-amazon\",\n    \"fab fa-amazon-pay\",\n    \"fab fa-amilia\",\n    \"fab fa-android\",\n    \"fab fa-angellist\",\n    \"fab fa-angrycreative\",\n    \"fab fa-angular\",\n    \"fab fa-app-store\",\n    \"fab fa-app-store-ios\",\n    \"fab fa-apper\",\n    \"fab fa-apple\",\n    \"fab fa-apple-pay\",\n    \"fab fa-artstation\",\n    \"fab fa-asymmetrik\",\n    \"fab fa-atlassian\",\n    \"fab fa-audible\",\n    \"fab fa-autoprefixer\",\n    \"fab fa-avianex\",\n    \"fab fa-aviato\",\n    \"fab fa-aws\",\n    \"fab fa-bandcamp\",\n    \"fab fa-behance\",\n    \"fab fa-behance-square\",\n    \"fab fa-bimobject\",\n    \"fab fa-bitbucket\",\n    \"fab fa-bitcoin\",\n    \"fab fa-bity\",\n    \"fab fa-black-tie\",\n    \"fab fa-blackberry\",\n    \"fab fa-blogger\",\n    \"fab fa-blogger-b\",\n    \"fab fa-bluetooth\",\n    \"fab fa-bluetooth-b\",\n    \"fab fa-btc\",\n    \"fab fa-buromobelexperte\",\n    \"fab fa-buysellads\",\n    \"fab fa-canadian-maple-leaf\",\n    \"fab fa-cc-amazon-pay\",\n    \"fab fa-cc-amex\",\n    \"fab fa-cc-apple-pay\",\n    \"fab fa-cc-diners-club\",\n    \"fab fa-cc-discover\",\n    \"fab fa-cc-jcb\",\n    \"fab fa-cc-mastercard\",\n    \"fab fa-cc-paypal\",\n    \"fab fa-cc-stripe\",\n    \"fab fa-cc-visa\",\n    \"fab fa-centercode\",\n    \"fab fa-centos\",\n    \"fab fa-chrome\",\n    \"fab fa-cloudscale\",\n    \"fab fa-cloudsmith\",\n    \"fab fa-cloudversify\",\n    \"fab fa-codepen\",\n    \"fab fa-codiepie\",\n    \"fab fa-confluence\",\n    \"fab fa-connectdevelop\",\n    \"fab fa-contao\",\n    \"fab fa-cpanel\",\n    \"fab fa-creative-commons\",\n    \"fab fa-creative-commons-by\",\n    \"fab fa-creative-commons-nc\",\n    \"fab fa-creative-commons-nc-eu\",\n    \"fab fa-creative-commons-nc-jp\",\n    \"fab fa-creative-commons-nd\",\n    \"fab fa-creative-commons-pd\",\n    \"fab fa-creative-commons-pd-alt\",\n    \"fab fa-creative-commons-remix\",\n    \"fab fa-creative-commons-sa\",\n    \"fab fa-creative-commons-sampling\",\n    \"fab fa-creative-commons-sampling-plus\",\n    \"fab fa-creative-commons-share\",\n    \"fab fa-creative-commons-zero\",\n    \"fab fa-critical-role\",\n    \"fab fa-css3\",\n    \"fab fa-css3-alt\",\n    \"fab fa-cuttlefish\",\n    \"fab fa-d-and-d\",\n    \"fab fa-d-and-d-beyond\",\n    \"fab fa-dashcube\",\n    \"fab fa-delicious\",\n    \"fab fa-deploydog\",\n    \"fab fa-deskpro\",\n    \"fab fa-dev\",\n    \"fab fa-deviantart\",\n    \"fab fa-dhl\",\n    \"fab fa-diaspora\",\n    \"fab fa-digg\",\n    \"fab fa-digital-ocean\",\n    \"fab fa-discord\",\n    \"fab fa-discourse\",\n    \"fab fa-dochub\",\n    \"fab fa-docker\",\n    \"fab fa-draft2digital\",\n    \"fab fa-dribbble\",\n    \"fab fa-dribbble-square\",\n    \"fab fa-dropbox\",\n    \"fab fa-drupal\",\n    \"fab fa-dyalog\",\n    \"fab fa-earlybirds\",\n    \"fab fa-ebay\",\n    \"fab fa-edge\",\n    \"fab fa-elementor\",\n    \"fab fa-ello\",\n    \"fab fa-ember\",\n    \"fab fa-empire\",\n    \"fab fa-envira\",\n    \"fab fa-erlang\",\n    \"fab fa-ethereum\",\n    \"fab fa-etsy\",\n    \"fab fa-expeditedssl\",\n    \"fab fa-facebook\",\n    \"fab fa-facebook-f\",\n    \"fab fa-facebook-messenger\",\n    \"fab fa-facebook-square\",\n    \"fab fa-fantasy-flight-games\",\n    \"fab fa-fedex\",\n    \"fab fa-fedora\",\n    \"fab fa-figma\",\n    \"fab fa-firefox\",\n    \"fab fa-first-order\",\n    \"fab fa-first-order-alt\",\n    \"fab fa-firstdraft\",\n    \"fab fa-flickr\",\n    \"fab fa-flipboard\",\n    \"fab fa-fly\",\n    \"fab fa-font-awesome\",\n    \"fab fa-font-awesome-alt\",\n    \"fab fa-font-awesome-flag\",\n    \"fab fa-fonticons\",\n    \"fab fa-fonticons-fi\",\n    \"fab fa-fort-awesome\",\n    \"fab fa-fort-awesome-alt\",\n    \"fab fa-forumbee\",\n    \"fab fa-foursquare\",\n    \"fab fa-free-code-camp\",\n    \"fab fa-freebsd\",\n    \"fab fa-fulcrum\",\n    \"fab fa-galactic-republic\",\n    \"fab fa-galactic-senate\",\n    \"fab fa-get-pocket\",\n    \"fab fa-gg\",\n    \"fab fa-gg-circle\",\n    \"fab fa-git\",\n    \"fab fa-git-square\",\n    \"fab fa-github\",\n    \"fab fa-github-alt\",\n    \"fab fa-github-square\",\n    \"fab fa-gitkraken\",\n    \"fab fa-gitlab\",\n    \"fab fa-gitter\",\n    \"fab fa-glide\",\n    \"fab fa-glide-g\",\n    \"fab fa-gofore\",\n    \"fab fa-goodreads\",\n    \"fab fa-goodreads-g\",\n    \"fab fa-google\",\n    \"fab fa-google-drive\",\n    \"fab fa-google-play\",\n    \"fab fa-google-plus\",\n    \"fab fa-google-plus-g\",\n    \"fab fa-google-plus-square\",\n    \"fab fa-google-wallet\",\n    \"fab fa-gratipay\",\n    \"fab fa-grav\",\n    \"fab fa-gripfire\",\n    \"fab fa-grunt\",\n    \"fab fa-gulp\",\n    \"fab fa-hacker-news\",\n    \"fab fa-hacker-news-square\",\n    \"fab fa-hackerrank\",\n    \"fab fa-hips\",\n    \"fab fa-hire-a-helper\",\n    \"fab fa-hooli\",\n    \"fab fa-hornbill\",\n    \"fab fa-hotjar\",\n    \"fab fa-houzz\",\n    \"fab fa-html5\",\n    \"fab fa-hubspot\",\n    \"fab fa-imdb\",\n    \"fab fa-instagram\",\n    \"fab fa-intercom\",\n    \"fab fa-internet-explorer\",\n    \"fab fa-invision\",\n    \"fab fa-ioxhost\",\n    \"fab fa-itunes\",\n    \"fab fa-itunes-note\",\n    \"fab fa-java\",\n    \"fab fa-jedi-order\",\n    \"fab fa-jenkins\",\n    \"fab fa-jira\",\n    \"fab fa-joget\",\n    \"fab fa-joomla\",\n    \"fab fa-js\",\n    \"fab fa-js-square\",\n    \"fab fa-jsfiddle\",\n    \"fab fa-kaggle\",\n    \"fab fa-keybase\",\n    \"fab fa-keycdn\",\n    \"fab fa-kickstarter\",\n    \"fab fa-kickstarter-k\",\n    \"fab fa-korvue\",\n    \"fab fa-laravel\",\n    \"fab fa-lastfm\",\n    \"fab fa-lastfm-square\",\n    \"fab fa-leanpub\",\n    \"fab fa-less\",\n    \"fab fa-line\",\n    \"fab fa-linkedin\",\n    \"fab fa-linkedin-in\",\n    \"fab fa-linode\",\n    \"fab fa-linux\",\n    \"fab fa-lyft\",\n    \"fab fa-magento\",\n    \"fab fa-mailchimp\",\n    \"fab fa-mandalorian\",\n    \"fab fa-markdown\",\n    \"fab fa-mastodon\",\n    \"fab fa-maxcdn\",\n    \"fab fa-medapps\",\n    \"fab fa-medium\",\n    \"fab fa-medium-m\",\n    \"fab fa-medrt\",\n    \"fab fa-meetup\",\n    \"fab fa-megaport\",\n    \"fab fa-mendeley\",\n    \"fab fa-microsoft\",\n    \"fab fa-mix\",\n    \"fab fa-mixcloud\",\n    \"fab fa-mizuni\",\n    \"fab fa-modx\",\n    \"fab fa-monero\",\n    \"fab fa-napster\",\n    \"fab fa-neos\",\n    \"fab fa-nimblr\",\n    \"fab fa-nintendo-switch\",\n    \"fab fa-node\",\n    \"fab fa-node-js\",\n    \"fab fa-npm\",\n    \"fab fa-ns8\",\n    \"fab fa-nutritionix\",\n    \"fab fa-odnoklassniki\",\n    \"fab fa-odnoklassniki-square\",\n    \"fab fa-old-republic\",\n    \"fab fa-opencart\",\n    \"fab fa-openid\",\n    \"fab fa-opera\",\n    \"fab fa-optin-monster\",\n    \"fab fa-osi\",\n    \"fab fa-page4\",\n    \"fab fa-pagelines\",\n    \"fab fa-palfed\",\n    \"fab fa-patreon\",\n    \"fab fa-paypal\",\n    \"fab fa-penny-arcade\",\n    \"fab fa-periscope\",\n    \"fab fa-phabricator\",\n    \"fab fa-phoenix-framework\",\n    \"fab fa-phoenix-squadron\",\n    \"fab fa-php\",\n    \"fab fa-pied-piper\",\n    \"fab fa-pied-piper-alt\",\n    \"fab fa-pied-piper-hat\",\n    \"fab fa-pied-piper-pp\",\n    \"fab fa-pinterest\",\n    \"fab fa-pinterest-p\",\n    \"fab fa-pinterest-square\",\n    \"fab fa-playstation\",\n    \"fab fa-product-hunt\",\n    \"fab fa-pushed\",\n    \"fab fa-python\",\n    \"fab fa-qq\",\n    \"fab fa-quinscape\",\n    \"fab fa-quora\",\n    \"fab fa-r-project\",\n    \"fab fa-raspberry-pi\",\n    \"fab fa-ravelry\",\n    \"fab fa-react\",\n    \"fab fa-reacteurope\",\n    \"fab fa-readme\",\n    \"fab fa-rebel\",\n    \"fab fa-red-river\",\n    \"fab fa-reddit\",\n    \"fab fa-reddit-alien\",\n    \"fab fa-reddit-square\",\n    \"fab fa-redhat\",\n    \"fab fa-renren\",\n    \"fab fa-replyd\",\n    \"fab fa-researchgate\",\n    \"fab fa-resolving\",\n    \"fab fa-rev\",\n    \"fab fa-rocketchat\",\n    \"fab fa-rockrms\",\n    \"fab fa-safari\",\n    \"fab fa-sass\",\n    \"fab fa-schlix\",\n    \"fab fa-scribd\",\n    \"fab fa-searchengin\",\n    \"fab fa-sellcast\",\n    \"fab fa-sellsy\",\n    \"fab fa-servicestack\",\n    \"fab fa-shirtsinbulk\",\n    \"fab fa-shopware\",\n    \"fab fa-simplybuilt\",\n    \"fab fa-sistrix\",\n    \"fab fa-sith\",\n    \"fab fa-sketch\",\n    \"fab fa-skyatlas\",\n    \"fab fa-skype\",\n    \"fab fa-slack\",\n    \"fab fa-slack-hash\",\n    \"fab fa-slideshare\",\n    \"fab fa-snapchat\",\n    \"fab fa-snapchat-ghost\",\n    \"fab fa-snapchat-square\",\n    \"fab fa-soundcloud\",\n    \"fab fa-sourcetree\",\n    \"fab fa-speakap\",\n    \"fab fa-spotify\",\n    \"fab fa-squarespace\",\n    \"fab fa-stack-exchange\",\n    \"fab fa-stack-overflow\",\n    \"fab fa-staylinked\",\n    \"fab fa-steam\",\n    \"fab fa-steam-square\",\n    \"fab fa-steam-symbol\",\n    \"fab fa-sticker-mule\",\n    \"fab fa-strava\",\n    \"fab fa-stripe\",\n    \"fab fa-stripe-s\",\n    \"fab fa-studiovinari\",\n    \"fab fa-stumbleupon\",\n    \"fab fa-stumbleupon-circle\",\n    \"fab fa-superpowers\",\n    \"fab fa-supple\",\n    \"fab fa-suse\",\n    \"fab fa-teamspeak\",\n    \"fab fa-telegram\",\n    \"fab fa-telegram-plane\",\n    \"fab fa-tencent-weibo\",\n    \"fab fa-the-red-yeti\",\n    \"fab fa-themeco\",\n    \"fab fa-themeisle\",\n    \"fab fa-think-peaks\",\n    \"fab fa-trade-federation\",\n    \"fab fa-trello\",\n    \"fab fa-tripadvisor\",\n    \"fab fa-tumblr\",\n    \"fab fa-tumblr-square\",\n    \"fab fa-twitch\",\n    \"fab fa-twitter\",\n    \"fab fa-twitter-square\",\n    \"fab fa-typo3\",\n    \"fab fa-uber\",\n    \"fab fa-ubuntu\",\n    \"fab fa-uikit\",\n    \"fab fa-uniregistry\",\n    \"fab fa-untappd\",\n    \"fab fa-ups\",\n    \"fab fa-usb\",\n    \"fab fa-usps\",\n    \"fab fa-ussunnah\",\n    \"fab fa-vaadin\",\n    \"fab fa-viacoin\",\n    \"fab fa-viadeo\",\n    \"fab fa-viadeo-square\",\n    \"fab fa-viber\",\n    \"fab fa-vimeo\",\n    \"fab fa-vimeo-square\",\n    \"fab fa-vimeo-v\",\n    \"fab fa-vine\",\n    \"fab fa-vk\",\n    \"fab fa-vnv\",\n    \"fab fa-vuejs\",\n    \"fab fa-weebly\",\n    \"fab fa-weibo\",\n    \"fab fa-weixin\",\n    \"fab fa-whatsapp\",\n    \"fab fa-whatsapp-square\",\n    \"fab fa-whmcs\",\n    \"fab fa-wikipedia-w\",\n    \"fab fa-windows\",\n    \"fab fa-wix\",\n    \"fab fa-wizards-of-the-coast\",\n    \"fab fa-wolf-pack-battalion\",\n    \"fab fa-wordpress\",\n    \"fab fa-wordpress-simple\",\n    \"fab fa-wpbeginner\",\n    \"fab fa-wpexplorer\",\n    \"fab fa-wpforms\",\n    \"fab fa-wpressr\",\n    \"fab fa-xbox\",\n    \"fab fa-xing\",\n    \"fab fa-xing-square\",\n    \"fab fa-y-combinator\",\n    \"fab fa-yahoo\",\n    \"fab fa-yandex\",\n    \"fab fa-yandex-international\",\n    \"fab fa-yarn\",\n    \"fab fa-yelp\",\n    \"fab fa-yoast\",\n    \"fab fa-youtube\",\n    \"fab fa-youtube-square\",\n    \"fab fa-zhihu\",\n];\nexport default icons_;","import \"./editor.scss\";","import { decodeEntities } from \"@wordpress/html-entities\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst { apiFetch } = wp;\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const postDataInit = (data = {}) => {\n  let sendData = data;\n  return apiFetch({\n    path: \"/unlimited-blocks-post-api/v3/posts/\",\n    method: \"POST\",\n    data: sendData,\n  })\n    .then((postsData) => {\n      return postsData;\n    })\n    .catch((error) => console.error(error));\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const filterPostInit = async (this_, data_ = {}) => {\n  let argData = data_;\n  //number of post\n  if (!(\"numberOfPosts\" in argData)) {\n    argData[\"numberOfPosts\"] = this_.props.attributes.numberOfPosts;\n  }\n  // choose category\n  let categoryIes =\n    \"postCategories\" in argData\n      ? argData.postCategories\n      : this_.props.attributes.postCategories;\n  if (categoryIes) {\n    argData[\"postCategories\"] = categoryIes.join(\",\");\n  }\n  // featured image\n  if (\"featured_image\" in argData && argData.featured_image == \"1\") {\n    argData[\"featured_image\"] = 1;\n  }\n  let postData = await postDataInit(argData);\n  if (postData) {\n    // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const firstTimeInit = async (this_, data_ = {}) => {\n  let { numberOfPosts, postCategories } = this_.props.attributes;\n  let sendData = {\n    initialize: 1,\n    numberOfPosts: numberOfPosts,\n  };\n  // featured image\n  if (\"featured_image\" in data_) {\n    sendData[\"featured_image\"] = 1;\n  }\n  // choose category\n  if (postCategories) {\n    sendData[\"postCategories\"] = postCategories.join(\",\");\n  }\n  let postData = await postDataInit(sendData);\n  if (postData) {\n    // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    //all categories\n    if (\"category\" in postData && postData.category != \"\") {\n      let category_ = postData.category;\n      if (category_ instanceof Object && Object.keys(category_).length) {\n        let setobjasArray = [];\n        for (let objKey in category_) {\n          setobjasArray.push(category_[objKey]);\n        }\n        this_.setState({ category: setobjasArray });\n      } else {\n        this_.setState({ category: category_ });\n      }\n    } else {\n      this_.setState({ category: null });\n    }\n    //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const categoryList = (category) => {\n  if (\n    (category && category.length) ||\n    (category instanceof Object && Object.keys(category).length)\n  ) {\n    let cateGory = [{ value: \"all\", label: __(\"All\", \"unlimited-blocks\") }];\n    if (category && category.length) {\n      category.map((catt) => {\n        let cate_Items = {\n          value: catt.slug,\n          label: catt.name,\n        };\n        cateGory.push(cate_Items);\n      });\n    } else if (category instanceof Object && Object.keys(category).length) {\n      for (let keys_ in category) {\n        let cate_Items = {\n          value: category[keys_].slug,\n          label: category[keys_].name,\n        };\n        cateGory.push(cate_Items);\n      }\n    }\n    return cateGory;\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const excerptWords = (words, words_) => {\n  words_ = decodeEntities(words_);\n  words_ = words_.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  words_ = words_.split(\" \");\n  words_ = words_.slice(0, words);\n  words_ = words_.join(\" \");\n  // words_ = decodeEntities(words_);\n  return words_;\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const showCateFn = (this_props, categories, cate_) => {\n  if (categories && categories instanceof Array && categories.length > 0) {\n    let copiedCate = [...categories];\n    let countCate = cate_.count;\n    if (countCate < copiedCate.length) {\n      let filterChoosen = this_props.attributes.postCategories;\n      if (\n        filterChoosen.length > 0 &&\n        filterChoosen.length < copiedCate.length\n      ) {\n        filterChoosen.map((cateSlug) => {\n          let getIndex = copiedCate.findIndex((slug_) => {\n            if (slug_ && \"slug\" in slug_) {\n              return slug_.slug == cateSlug;\n            }\n          });\n          if (getIndex && getIndex + 1 > countCate) {\n            delete copiedCate[getIndex];\n            copiedCate.unshift({ name: cateSlug });\n          }\n        });\n      }\n    }\n    let putCateStyle = { fontSize: cate_.fontSize + \"px\" };\n    if (cate_.customColor) {\n      putCateStyle[\"color\"] = cate_.color;\n      putCateStyle[\"backgroundColor\"] = cate_.backgroundColor;\n    }\n    copiedCate.splice(countCate);\n    return copiedCate.map((returnH) => (\n      <span style={putCateStyle}>{returnH.name}</span>\n    ));\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const showTagsFn = (tags_, tag_r) => {\n  if (tags_ && tags_ instanceof Array && tags_.length) {\n    let putTagStyle = { color: tag_r.color };\n    putTagStyle[\"color\"] = tag_r.color;\n    putTagStyle[\"backgroundColor\"] = tag_r.backgroundColor;\n    putTagStyle[\"fontSize\"] = tag_r.fontSize + \"px\";\n    let countTag = tag_r.count;\n    let tagCopied = [...tags_];\n    tagCopied.splice(countTag);\n    return tagCopied.map((returnH) => (\n      <span style={putTagStyle}>{returnH.name}</span>\n    ));\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const PostLoader = () => {\n  return (\n    <div className=\"post-loader\">\n      <div className=\"active linear-bubble ubl-block-loader\">\n        {__(\"Post Loading...\", \"unlimited-blocks\")}\n        <div>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  );\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const PostNotfound = () => {\n  return (\n    <div className=\"no-post-found\">\n      <p>{__(\"No Post Found\", \"unlimited-blocks\")}</p>\n    </div>\n  );\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const UBLGraDientColors = [\n  {\n    name: __(\"ubl color 1\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(6, 147, 227) 0%, rgb(155, 81, 224) 100%)\",\n  },\n  {\n    name: __(\"ubl color 2\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%)\",\n  },\n  {\n    name: __(\"ubl color 3\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%)\",\n  },\n  {\n    name: __(\"ubl color 4\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%)\",\n  },\n  {\n    name: __(\"Vivid cyan blue to vivid purple\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)\",\n  },\n  {\n    name: __(\"Vivid green cyan to vivid cyan blue\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)\",\n  },\n  {\n    name: __(\"Light green cyan to vivid green cyan\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)\",\n  },\n  {\n    name: __(\n      \"Luminous vivid amber to luminous vivid orange\",\n      \"unlimited-blocks\"\n    ),\n    gradient:\n      \"linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)\",\n  },\n  {\n    name: __(\"Luminous vivid orange to vivid red\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)\",\n  },\n  // new added\n  {\n    name: __(\"ubl color 6\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%)\",\n  },\n\n  {\n    name: __(\"ubl color 7\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(180deg, #2AF598 0%, #009EFD 100%)\",\n  },\n  {\n    name: __(\"ubl color 8\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #F43B47 0%, #453A94 100%)\",\n  },\n  {\n    name: __(\"ubl color 10\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #CC208E 0%, #6713D2 100%)\",\n  },\n\n  {\n    name: __(\"ubl color 11\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient( 67.2deg,  rgba(37,208,199,1) -7.5%, rgba(165,90,240,1) 62.7% )\",\n  },\n  {\n    name: __(\"ubl color 12\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #E6E9F0 0%, #EEF1F5 100%)\",\n  },\n  {\n    name: __(\"ubl color 13\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(19deg, #21D4FD 0%, #B721FF 100%)\",\n  },\n  {\n    name: __(\"ubl color 14\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(to right top, #051937, #004D7A, #008793, #00BF72, #A8EB12)\",\n  },\n];\n\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const UblColorPlates = [\n  { name: \"Color: Black\", color: \"rgb(0, 0, 0)\" },\n\n  { name: \"Color: Cyan bluish gray\", color: \"rgb(171, 184, 195)\" },\n\n  { name: \"Color: White\", color: \"rgb(255, 255, 255)\" },\n\n  { name: \"Color: Pale pink\", color: \"rgb(247, 141, 167)\" },\n\n  { name: \"Color: Vivid red\", color: \"rgb(207, 46, 46)\" },\n\n  { name: \"Color: Luminous vivid orange\", color: \"rgb(255, 105, 0)\" },\n\n  { name: \"Color: Luminous vivid amber\", color: \"rgb(252, 185, 0)\" },\n\n  { name: \"Color: Light green cyan\", color: \"rgb(123, 220, 181)\" },\n\n  { name: \"Color: Vivid green cyan\", color: \"rgb(0, 208, 132)\" },\n\n  { name: \"Color: Pale cyan blue\", color: \"rgb(142, 209, 252)\" },\n\n  { name: \"Color: Vivid cyan blue\", color: \"rgb(6, 147, 227)\" },\n\n  { name: \"Color: Vivid purple\", color: \"rgb(155, 81, 224)\" },\n];\n","const BasicToggleNav = (props) => {\n  const { navItem, clickme, value, wrapperClass } = props;\n  if (navItem) {\n    let default_class = \"ul-top-nav\";\n    if (wrapperClass) {\n      default_class = default_class.concat(\" \", wrapperClass);\n    }\n    return (\n      <div className={default_class}>\n        {navItem.map((nav_val, key_) => {\n          return (\n            <div\n              key={key_}\n              onClick={() => {\n                if (nav_val.name != value) {\n                  clickme(nav_val.name);\n                }\n              }}\n              className={value == nav_val.name ? \"active\" : null}\n            >\n              {nav_val.icon && (\n                <span className=\"icon_\">\n                  {<span className={nav_val.icon}></span>}\n                </span>\n              )}\n              <span className=\"title_\">\n                {nav_val.title}\n                {/* {__(nav_val.title, \"unlimited-blocks\")} */}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n};\nexport default BasicToggleNav;\n// component\n{\n  /* <BasicToggleNav\n              value={this.state.openPanel}\n              navItem={[\n                {\n                  name: \"layout\",\n                  title: \"Layout\",\n                  icon: \"dashicons dashicons-editor-table\",\n                },\n                {\n                  name: \"style\",\n                  title: \"Style\",\n                  icon: \"dashicons dashicons-admin-customizer\",\n                },\n              ]}\n              clickme={(value_) => {\n                this.setState({ openPanel: value_ });\n              }}\n            /> */\n}\n// component\n","const bounce = {\n  title: \"Bouncing\",\n  value: [\n    //in\n    { title: \"Bounce\", anim_class: \"animate__bounce\" },\n    { title: \"Bounce In Down\", anim_class: \"animate__bounceInDown\" },\n    { title: \"Bounce In Left\", anim_class: \"animate__bounceInLeft\" },\n    { title: \"Bounce In Right\", anim_class: \"animate__bounceInRight\" },\n    { title: \"Bounce In Up\", anim_class: \"animate__bounceInUp\" },\n    //out\n    { title: \"Bounce Out\", anim_class: \"animate__bounceOut\" },\n    { title: \"Bounce Out Down\", anim_class: \"animate__bounceOut\" },\n    { title: \"Bounce Out Left\", anim_class: \"animate__bounceOutLeft\" },\n    { title: \"Bounce Out Right\", anim_class: \"animate__bounceOutRight\" },\n    { title: \"Bounce Out Up\", anim_class: \"animate__bounceOutUp\" },\n  ],\n};\n\nconst Fade = {\n  title: \"Fading\",\n  value: [\n    //in\n    { title: \"Fade In\", anim_class: \"animate__fadeIn\" },\n    { title: \"Fade In Down\", anim_class: \"animate__fadeInDown\" },\n    { title: \"Fade In Down Big\", anim_class: \"animate__fadeInDownBig\" },\n    { title: \"Fade In Left\", anim_class: \"animate__fadeInLeft\" },\n    { title: \"Fade In Left Big\", anim_class: \"animate__fadeInLeftBig\" },\n    { title: \"Fade In Right\", anim_class: \"animate__fadeInRight\" },\n    { title: \"Fade In Right Big\", anim_class: \"animate__fadeInRightBig\" },\n    { title: \"Fade In Up\", anim_class: \"animate__fadeInUp\" },\n    { title: \"Fade In Up Big\", anim_class: \"animate__fadeInUpBig\" },\n    //out\n    { title: \"Fade Out\", anim_class: \"animate__fadeOut\" },\n    { title: \"Fade Out Down\", anim_class: \"animate__fadeOutDown\" },\n    { title: \"Fade Out Down Big\", anim_class: \"animate__fadeOutDownBig\" },\n    { title: \"Fade Out Left\", anim_class: \"animate__fadeOutLeft\" },\n    { title: \"Fade Out Left Big\", anim_class: \"animate__fadeOutLeftBig\" },\n    { title: \"Fade Out Right\", anim_class: \"animate__fadeOutRight\" },\n    { title: \"Fade Out Right Big\", anim_class: \"animate__fadeOutRightBig\" },\n    { title: \"Fade Out Up\", anim_class: \"animate__fadeOutUp\" },\n    { title: \"Fade Out Up Big\", anim_class: \"animate__fadeOutUpBig\" },\n  ],\n};\nconst Fliping = {\n  title: \"Fliping\",\n  value: [\n    //in\n    { title: \"Flip\", anim_class: \"animate__flip\" },\n    { title: \"Flip In X\", anim_class: \"animate__flipInX\" },\n    { title: \"Flip In Y\", anim_class: \"animate__flipInY\" },\n    { title: \"Flip Out X\", anim_class: \"animate__flipOutX\" },\n    { title: \"Flip Out Y\", anim_class: \"animate__flipOutY\" },\n  ],\n};\nconst Rotate = {\n  title: \"Rotating\",\n  value: [\n    //in\n    { title: \"Rotate In\", anim_class: \"animate__rotateIn\" },\n    { title: \"Rotate In Down Left\", anim_class: \"animate__rotateInDownLeft\" },\n    { title: \"Rotate In Down Right\", anim_class: \"animate__rotateInDownRight\" },\n    { title: \"Rotate In Up Left\", anim_class: \"animate__rotateInUpLeft\" },\n    { title: \"Rotate In Up Right\", anim_class: \"animate__rotateInUpRight\" },\n    { title: \"Rotate Out\", anim_class: \"animate__rotateOut\" },\n    { title: \"Rotate Out Down Left\", anim_class: \"animate__rotateOutDownLeft\" },\n    {\n      title: \"Rotate Out Down Right\",\n      anim_class: \"animate__rotateOutDownRight\",\n    },\n    { title: \"Rotate Out Up Left\", anim_class: \"animate__rotateOutUpLeft\" },\n    { title: \"Rotate Out Up Right\", anim_class: \"animate__rotateOutUpRight\" },\n  ],\n};\nconst Sliding = {\n  title: \"Sliding\",\n  value: [\n    //in\n    { title: \"Slide In Down\", anim_class: \"animate__slideInDown\" },\n    { title: \"Slide In Left\", anim_class: \"animate__slideInLeft\" },\n    { title: \"Slide In Right\", anim_class: \"animate__slideInRight\" },\n    { title: \"Slide In Up\", anim_class: \"animate__slideInUp\" },\n\n    { title: \"Slide Out Down\", anim_class: \"animate__slideOutDown\" },\n    { title: \"Slide Out Left\", anim_class: \"animate__slideOutLeft\" },\n    { title: \"Slide Out Right\", anim_class: \"animate__slideOutRight\" },\n    { title: \"Slide Out Up\", anim_class: \"animate__slideOutUp\" },\n  ],\n};\nconst Zooming = {\n  title: \"Zooming\",\n  value: [\n    //in\n    { title: \"Zoom In\", anim_class: \"animate__zoomIn\" },\n    { title: \"Zoom In Down\", anim_class: \"animate__zoomInDown\" },\n    { title: \"Zoom In Left\", anim_class: \"animate__zoomInLeft\" },\n    { title: \"Zoom In Right\", anim_class: \"animate__zoomInRight\" },\n    { title: \"Zoom In Up\", anim_class: \"animate__zoomInUp\" },\n    { title: \"Zoom Out\", anim_class: \"animate__zoomOut\" },\n    { title: \"Zoom Out Down\", anim_class: \"animate__zoomOutDown\" },\n    { title: \"Zoom Out Left\", anim_class: \"animate__zoomOutLeft\" },\n    { title: \"Zoom Out Right\", anim_class: \"animate__zoomOutRight\" },\n    { title: \"Zoom Out Up\", anim_class: \"animate__zoomOutUp\" },\n  ],\n};\nconst Roling = {\n  title: \"Rolling\",\n  value: [\n    //in\n    { title: \"Roll In\", anim_class: \"animate__rollIn\" },\n    { title: \"Roll Out\", anim_class: \"animate__rollOut\" },\n  ],\n};\nconst Other = {\n  title: \"Othre\",\n  value: [\n    //in\n    { title: \"Light Speed In Left\", anim_class: \"animate__lightSpeedInLeft\" },\n    { title: \"Light Speed In Right\", anim_class: \"animate__lightSpeedInRight\" },\n    { title: \"Light Speed Out Left\", anim_class: \"animate__lightSpeedOutLeft\" },\n    {\n      title: \"Light Speed Out Right\",\n      anim_class: \"animate__lightSpeedOutRight\",\n    },\n\n    { title: \"Flash\", anim_class: \"animate__flash\" },\n    { title: \"Pulse\", anim_class: \"animate__pulse\" },\n    { title: \"Rubber Band\", anim_class: \"animate__rubberBand\" },\n    { title: \"Shake\", anim_class: \"animate__shakeX\" },\n    { title: \"Hand Shake\", anim_class: \"animate__headShake\" },\n    { title: \"Swing\", anim_class: \"animate__swing\" },\n    { title: \"TaDa\", anim_class: \"animate__tada\" },\n    { title: \"Wobble\", anim_class: \"animate__wobble\" },\n    { title: \"Jello\", anim_class: \"animate__jello\" },\n    { title: \"Heart Beat\", anim_class: \"animate__heartBeat\" },\n    { title: \"Hinge\", anim_class: \"animate__hinge\" },\n    { title: \"Jack In The Box\", anim_class: \"animate__jackInTheBox\" },\n  ],\n};\n\nexport let animations = [\n  bounce,\n  Fade,\n  Fliping,\n  Rotate,\n  Sliding,\n  Zooming,\n  Roling,\n  Other,\n];\nexport let AnimationDelay_ = [\n  { title: \"One Second\", anim_class: \"animate__delay-1s\" },\n  { title: \"Two Second\", anim_class: \"animate__delay-2s\" },\n  { title: \"Three Second\", anim_class: \"animate__delay-3s\" },\n  { title: \"Four Second\", anim_class: \"animate__delay-4s\" },\n  { title: \"Five Second\", anim_class: \"animate__delay-5s\" },\n];\nexport let AnimationSpeed_ = [\n  { title: \"Faster\", anim_class: \"animate__faster\" },\n  { title: \"Fast\", anim_class: \"animate__fast\" },\n  { title: \"Slow\", anim_class: \"animate__slow\" },\n  { title: \"Slower\", anim_class: \"animate__slower\" },\n];\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { Button, Popover, MenuGroup, MenuItem } from \"@wordpress/components\";\n\nimport {\n  animations as AnimationsClass,\n  AnimationDelay_,\n  AnimationSpeed_,\n} from \"./animateclasses\";\nexport class Animation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animationTitle: false,\n      animation: { name: null, delay: null, speed: null },\n      allAnimation: AnimationsClass,\n      showPopOver: false,\n    };\n  }\n  componentDidMount() {\n    let { value } = this.props;\n    if (\n      value &&\n      typeof value == \"object\" &&\n      !Array.isArray(value) &&\n      \"name\" in value\n    ) {\n      let setobj = { name: value.name };\n      if (value.delay) {\n        setobj[\"delay\"] = value.delay;\n      }\n      if (value.speed) {\n        setobj[\"speed\"] = value.speed;\n      }\n      let setObje = { animation: setobj };\n      let getTitle = this.getDefaultTitle(value.name);\n      if (getTitle) {\n        setObje[\"animationTitle\"] = getTitle;\n      }\n      this.setState(setObje);\n    }\n  }\n\n  getDefaultTitle = (value_) => {\n    let getAnimation = [...AnimationsClass];\n    const checkPointOne_ = (mainArray) => {\n      let stageTwo = false;\n      for (let stageTwoFil of mainArray) {\n        if (stageTwoFil.anim_class == value_) {\n          stageTwo = stageTwoFil.title;\n          break;\n        }\n      }\n      return stageTwo;\n    };\n    let title = false;\n    for (let stageOne of getAnimation) {\n      let stageTwo = checkPointOne_(stageOne.value);\n      if (stageTwo) {\n        title = stageTwo;\n        break;\n      }\n    }\n    return title;\n  };\n\n  changeVal(stateKey, stateVal) {\n    let stateWoutCopyAnim = this.state.animation;\n    if (!stateWoutCopyAnim) {\n      stateWoutCopyAnim = {};\n    }\n    let copyStateAnim = { ...stateWoutCopyAnim };\n    copyStateAnim[stateKey] = stateVal == \"none\" ? null : stateVal;\n    this.setState({ animation: copyStateAnim });\n    this.props.change(copyStateAnim);\n  }\n\n  animationsDelay = () => {\n    let allDelay = AnimationDelay_;\n    let thisAnimDelay = this.state.animation.delay;\n    return (\n      <select\n        onChange={(e) => {\n          this.changeVal(\"delay\", e.target.value);\n        }}\n      >\n        <option value=\"none\">{__(\"Default\", \"unlimited-blocks\")}</option>\n        {allDelay.map((val_) => (\n          <option\n            value={val_.anim_class}\n            selected={thisAnimDelay == val_.anim_class ? \"selected\" : null}\n          >\n            {val_.title}\n          </option>\n        ))}\n      </select>\n    );\n  };\n  animationsSpeed = () => {\n    let allSpeed = AnimationSpeed_;\n    let thisAnimSpeed = this.state.animation.speed;\n    return (\n      <select\n        onChange={(e) => {\n          this.changeVal(\"speed\", e.target.value);\n        }}\n      >\n        <option value=\"none\">{__(\"Default\", \"unlimited-blocks\")}</option>\n        {allSpeed.map((val_) => (\n          <option\n            value={val_.anim_class}\n            selected={thisAnimSpeed == val_.anim_class ? \"selected\" : null}\n          >\n            {val_.title}\n          </option>\n        ))}\n      </select>\n    );\n  };\n  allAnimations = () => {\n    let allAnimations = this.state.allAnimation;\n    let thisAnimation = this.state.animation.name;\n    const chooseAnimation = (animClass, title_) => {\n      this.changeVal(\"name\", animClass);\n      this.setState({ showPopOver: false, animationTitle: title_ });\n    };\n    const classNandTitle = (val) => {\n      return val.map((val2) => {\n        let isActive = val2.anim_class == thisAnimation ? true : false;\n        return (\n          <MenuItem\n            onClick={() => {\n              chooseAnimation(val2.anim_class, val2.title);\n            }}\n            icon={isActive ? \"yes\" : false}\n          >\n            {val2.title}\n          </MenuItem>\n        );\n      });\n    };\n    return (\n      <MenuGroup>\n        {allAnimations ? (\n          <>\n            <MenuItem\n              onClick={() => {\n                chooseAnimation(\"none\", false);\n              }}\n            >\n              {__(\"None\", \"unlimited-blocks\")}\n            </MenuItem>\n            {allAnimations.map((val_) => {\n              return (\n                <>\n                  {val_.title && (\n                    <strong className=\"animationHeading\">{val_.title}</strong>\n                  )}\n                  {classNandTitle(val_.value)}\n                </>\n              );\n            })}\n          </>\n        ) : (\n          <div className=\"no_animation_found\">\n            <span>{__(\"No Animation Found\", \"unlinited-blocks\")}</span>\n          </div>\n        )}\n      </MenuGroup>\n    );\n  };\n  animationInPopup = () => {\n    return (\n      <Popover\n        position=\"top middle\"\n        onFocusOutside={(outs) => {\n          if (this.state.showPopOver) {\n            this.setState({ showPopOver: false });\n          }\n        }}\n        className={\"ul-animation-popup\"}\n      >\n        <div className=\"search-wrap_\">\n          <strong className=\"search-wrap_heading\">\n            {__(\"Animations\", \"unlimited-blocks\")}\n          </strong>\n          <input\n            type=\"text\"\n            onKeyUp={(e) => {\n              this.searchAnimation(e.target.value);\n            }}\n          />\n        </div>\n        {this.allAnimations()}\n      </Popover>\n    );\n  };\n  searchAnimation = (val) => {\n    if (val != \"\") {\n      let lowerValue = val.toLowerCase();\n      let getAnimation = [...AnimationsClass];\n      const checkPointOne = (mainArray) => {\n        let stageTwo = [];\n        for (let stageTwoFil of mainArray) {\n          if (stageTwoFil.title) {\n            let chunkArrayTitle = stageTwoFil.title.toLowerCase();\n            let getIndex = chunkArrayTitle.indexOf(lowerValue);\n            if (getIndex >= 0) {\n              stageTwo.push(stageTwoFil);\n            }\n          }\n        }\n        if (stageTwo.length) {\n          return stageTwo;\n        }\n      };\n      let newAnimation = [];\n      for (let stageOne of getAnimation) {\n        let stageTwo = checkPointOne(stageOne.value);\n        if (stageTwo) newAnimation.push({ value: stageTwo });\n      }\n\n      if (newAnimation.length) {\n        this.setState({ allAnimation: newAnimation });\n      } else {\n        // set animations not available\n        this.setState({ allAnimation: false });\n      }\n    } else {\n      // set original animations\n      this.setState({ allAnimation: AnimationsClass });\n    }\n  };\n  render() {\n    let { state } = this;\n    return (\n      <div className=\"ul-animation-tool\">\n        <div>\n          <p className=\"anim_title_\">{__(\"Animation\", \"unlimited-blocks\")}</p>\n          <Button\n            variant=\"secondary\"\n            className=\"ul-animation-tool-toggle-btn\"\n            onClick={() => {\n              if (!this.state.showPopOver) {\n                this.setState({ showPopOver: true });\n              } else {\n                this.setState({ showPopOver: false });\n              }\n            }}\n          >\n            {state.animationTitle\n              ? state.animationTitle\n              : __(\"Choose Animation\", \"unlimited-blocks\")}\n          </Button>\n          {this.state.showPopOver && this.animationInPopup()}\n        </div>\n        {state.animation.name && (\n          <>\n            <div className=\"ul-animation-delay\">\n              <p className=\"anim_title_\">{__(\"Delay\", \"unlimited-blocks\")}</p>\n              {this.animationsDelay()}\n            </div>\n            <div className=\"ul-animation-speed\">\n              <p className=\"anim_title_\">{__(\"Speed\", \"unlimited-blocks\")}</p>\n              {this.animationsSpeed()}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\n// export Animations;\nexport let setAnimationClass = (cssObj, existClass = false) => {\n  let returnString = \"\";\n  if (\n    cssObj &&\n    typeof cssObj == \"object\" &&\n    !Array.isArray(cssObj) &&\n    \"name\" in cssObj\n  ) {\n    let returnClass = [\"animate__animated\"];\n    returnClass.push(cssObj.name);\n    // delay\n    if (cssObj.delay) {\n      returnClass.push(cssObj.delay);\n    }\n    // speed\n    if (cssObj.speed) {\n      returnClass.push(cssObj.speed);\n    }\n    // delay\n    if (existClass) {\n      returnClass.push(existClass);\n    }\n    returnString = returnClass.join(\" \");\n  } else if (existClass) {\n    returnString = existClass;\n  }\n  return returnString;\n};\n{\n  /* <Animation\n              value={attributes.additionalClassNames}\n              change={(animate) => {\n                setAttributes({ additionalClassNames: animate });\n              }}\n            /> \n    added classes\n    // ex ->  animate__animated animate__bounce animate__delay-2s\n            \n            */\n}\n\n// const { hasChildBlocks, rootClientId } = useSelect(\n//   (select) => {\n//     const { getBlockOrder, getBlockRootClientId } = select(blockEditorStore);\n\n//     return {\n//       hasChildBlocks: getBlockOrder(clientId).length > 0,\n//       rootClientId: getBlockRootClientId(clientId),\n//     };\n//   },\n//   [clientId]\n// );\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { MediaUpload, ColorPalette } from \"@wordpress/block-editor\";\nimport { GradientPicker, RangeControl } from \"@wordpress/components\";\nimport { UBLGraDientColors, UblColorPlates } from \"./../../post-functions\";\nclass BackgroundType extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundType: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"\",\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImageGradient: \"\",\n      backgroundOpacity: \"\",\n    };\n  }\n  componentDidMount() {\n    // console.log(\"props -> \", this.props);\n    if (this.props.value) {\n      let {\n        backgroundType,\n        backgroundImage,\n        backgroundImageSize,\n        backgroundColorType,\n        backgroundColor,\n        backgroundImageGradient,\n        backgroundOpacity,\n      } = this.props.value;\n\n      let setStateObj = {};\n      let checkB = false;\n      if (backgroundType) {\n        setStateObj[\"backgroundType\"] = backgroundType;\n        checkB = true;\n      }\n      if (backgroundImage) {\n        setStateObj[\"backgroundImage\"] = backgroundImage;\n        checkB = true;\n      }\n      if (backgroundImageSize) {\n        setStateObj[\"backgroundImageSize\"] = backgroundImageSize;\n        checkB = true;\n      }\n      if (backgroundColorType) {\n        setStateObj[\"backgroundColorType\"] = backgroundColorType;\n        checkB = true;\n      }\n      if (backgroundColor) {\n        setStateObj[\"backgroundColor\"] = backgroundColor;\n        checkB = true;\n      }\n      if (backgroundImageGradient) {\n        setStateObj[\"backgroundImageGradient\"] = backgroundImageGradient;\n        checkB = true;\n      }\n      if (backgroundOpacity) {\n        setStateObj[\"backgroundOpacity\"] = backgroundOpacity;\n        checkB = true;\n      }\n      if (checkB) {\n        this.setState(setStateObj);\n      }\n    }\n  }\n  //   set state of bg type\n  updateState(stateKey, stateVal) {\n    let obj_ = {};\n    obj_[stateKey] = stateVal;\n    this.setState(obj_);\n    let state_ = {\n      backgroundType: this.state.backgroundType,\n      backgroundImage: this.state.backgroundImage,\n      backgroundImageSize: this.state.backgroundImageSize,\n      backgroundColorType: this.state.backgroundColorType,\n      backgroundColor: this.state.backgroundColor,\n      backgroundImageGradient: this.state.backgroundImageGradient,\n      backgroundOpacity: this.state.backgroundOpacity,\n      ...obj_,\n    };\n\n    this.props.changeme(state_);\n  }\n\n  navType() {\n    return (\n      <div className=\"ubl-background-type\">\n        <span className=\"top-title\">\n          {__(\"Background Type\", \"unlimited-blocks\")}\n        </span>\n        <div className=\"types_\">\n          <div\n            data-title={__(\"None\", \"unlimited-blocks\")}\n            className={`${!this.state.backgroundType ? \"selected\" : \"\"}`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-dismiss`}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"\");\n              }}\n            ></span>\n          </div>\n          <div\n            data-title={__(\"Color\", \"unlimited-blocks\")}\n            className={`${\n              this.state.backgroundType == \"color\" ? \"selected\" : \"\"\n            }`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-admin-customizer`}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"color\");\n              }}\n            ></span>\n          </div>\n          <div\n            data-title={__(\"Image\", \"unlimited-blocks\")}\n            className={`${\n              this.state.backgroundType == \"image\" ? \"selected\" : \"\"\n            }`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-format-image `}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"image\");\n              }}\n            ></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  bgImage() {\n    return (\n      <>\n        <p>\n          <strong>{__(\"Background image\", \"unlimited-blocks\")}</strong>\n        </p>\n        <MediaUpload\n          allowedType=\"image\"\n          onSelect={(newImage) => {\n            console.log(\"newImage\", newImage);\n            this.updateState(\"backgroundImage\", newImage.sizes.full.url);\n          }}\n          value={this.state.backgroundImage}\n          render={({ open }) => (\n            <div\n              onClick={open}\n              className={`ubl-block-image-uploader ${\n                \"\" == this.state.backgroundImage && \"blank\"\n              }`}\n            >\n              <div>\n                <i className=\"fas fa-plus\"></i>\n              </div>\n              <img src={this.state.backgroundImage} />\n            </div>\n          )}\n        />\n        {this.state.backgroundImage != \"\" && (\n          <div className=\"flex-section\">\n            <p>{__(\"Background Size\", \"unlimited-blocks\")}</p>\n            <select\n              value={this.state.backgroundImageSize}\n              onChange={(e) => {\n                this.updateState(\"backgroundImageSize\", e.target.value);\n              }}\n            >\n              <option value=\"auto\">{__(\"Auto\", \"unlimited-blocks\")}</option>\n              <option value=\"cover\">{__(\"Cover\", \"unlimited-blocks\")}</option>\n              <option value=\"contain\">\n                {__(\"Contain\", \"unlimited-blocks\")}\n              </option>\n            </select>\n          </div>\n        )}\n      </>\n    );\n  }\n  colorGradient() {\n    return (\n      <>\n        <p>\n          <strong>\n            {this.state.backgroundType == \"image\" &&\n            this.state.backgroundImage != \"\"\n              ? __(\"Overlay Color\", \"unlimited-blocks\")\n              : __(\"Background Color\", \"unlimited-blocks\")}\n          </strong>\n        </p>\n\n        <div\n          class={`ubl-switcher-bg-clr-gradient clor_${this.state.backgroundColorType}`}\n        >\n          <span className=\"bg-span\"></span>\n          <span\n            onClick={() => this.updateState(\"backgroundColorType\", \"color\")}\n            className={\n              this.state.backgroundColorType == \"color\" ? \"selected\" : \"\"\n            }\n          >\n            {__(\"Solid\", \"unlimited-blocks\")}\n          </span>\n          <span\n            onClick={() => this.updateState(\"backgroundColorType\", \"gradient\")}\n            className={\n              this.state.backgroundColorType == \"gradient\" ? \"selected\" : \"\"\n            }\n          >\n            {__(\"Gradient\", \"unlimited-blocks\")}\n          </span>\n        </div>\n\n        {\"color\" == this.state.backgroundColorType ? (\n          <>\n            <ColorPalette\n              value={this.state.backgroundColor}\n              // colors={UblColorPlates}\n              onChange={(color) => {\n                this.updateState(\"backgroundColor\", color);\n              }}\n            />\n          </>\n        ) : (\n          <GradientPicker\n            disableCustomGradients={false}\n            value={this.state.backgroundImageGradient}\n            gradients={UBLGraDientColors}\n            onChange={(newGradient) => {\n              // console.log(\"new gradient->\", newGradient);\n\n              this.updateState(\"backgroundImageGradient\", newGradient);\n            }}\n          />\n        )}\n        {this.state.backgroundType == \"image\" && (\n          <RangeControl\n            label={__(\"Opacity\", \"unlimited-blocks\")}\n            value={this.state.backgroundOpacity}\n            min={0}\n            max={1}\n            step={0.1}\n            onChange={(e) => {\n              this.updateState(\"backgroundOpacity\", e);\n            }}\n          />\n        )}\n      </>\n    );\n  }\n  render() {\n    return (\n      <>\n        {this.navType()}\n        {this.state.backgroundType == \"image\" && this.bgImage()}\n        {(this.state.backgroundType == \"image\" ||\n          this.state.backgroundType == \"color\") &&\n          this.colorGradient()}\n      </>\n    );\n  }\n}\nexport default BackgroundType;\n{\n  /* <BackgroundType changeme={(object_)=>{\n\n}}/> */\n}\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nclass Dimension extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimension: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n      isLink: false,\n    };\n  }\n  componentDidMount() {\n    let defaultValue = this.props.value;\n    let isLink = this.props.isLink;\n    // console.log(\"default value \", defaultValue);\n    if (typeof defaultValue == \"object\" && !Array.isArray(defaultValue)) {\n      let oldDimension = { ...this.state.dimension, ...defaultValue };\n      if (isLink) {\n        // with link\n        let compareValue = 0;\n        for (let key_ in oldDimension) {\n          let int_ = parseInt(oldDimension[key_]);\n          if (int_ && int_ > compareValue) {\n            compareValue = int_;\n          }\n        }\n        oldDimension.top = compareValue;\n        oldDimension.right = compareValue;\n        oldDimension.bottom = compareValue;\n        oldDimension.left = compareValue;\n        this.setState({ dimension: oldDimension, isLink: true });\n      } else {\n        this.setState({ dimension: oldDimension });\n      }\n    }\n  }\n\n  setInlink(checkLinked) {\n    let setLinkDimension = { ...this.state.dimension };\n    let isLinkObject = {};\n    if (checkLinked) {\n      let compareValue = 0;\n      for (let key_ in setLinkDimension) {\n        let int_ = parseInt(setLinkDimension[key_]);\n        if (int_ && int_ > compareValue) {\n          compareValue = int_;\n        }\n      }\n      setLinkDimension.top = compareValue;\n      setLinkDimension.right = compareValue;\n      setLinkDimension.bottom = compareValue;\n      setLinkDimension.left = compareValue;\n      // add is link on change\n      this.setState({ dimension: setLinkDimension, isLink: true });\n      isLinkObject = { isLink: true };\n    } else {\n      this.setState({ isLink: false });\n      isLinkObject = { isLink: false };\n    }\n    let changeSetlinkMe = { ...setLinkDimension, ...isLinkObject };\n    this.props.changeme(changeSetlinkMe);\n  }\n\n  changeVal(val, cordinate) {\n    // const { state, setState } = this;\n    val = parseInt(val);\n    // console.log(\"props\", this.props);\n    let copyDimension = { ...this.state.dimension };\n    let { isLink } = this.state;\n    if (isLink) {\n      copyDimension.top = val;\n      copyDimension.right = val;\n      copyDimension.bottom = val;\n      copyDimension.left = val;\n    } else {\n      copyDimension[cordinate] = val;\n    }\n    this.setState({ dimension: copyDimension });\n    this.props.changeme(copyDimension);\n  }\n  render() {\n    // console.log(\"props inrender\", this.props);\n    let { top, right, bottom, left } = this.state.dimension;\n    let { isLink } = this.state;\n    isLink = isLink ? \"linked\" : \"\";\n    return (\n      <div className=\"ul-dimension-tool\">\n        <div className=\"tools_\">\n          <div className=\"ul-dimension-top\">\n            <input\n              type=\"number\"\n              value={top}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"top\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-right\">\n            <input\n              type=\"number\"\n              value={right}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"right\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-bottom\">\n            <input\n              type=\"number\"\n              value={bottom}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"bottom\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-left\">\n            <input\n              type=\"number\"\n              value={left}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"left\");\n              }}\n            />\n          </div>\n          <div\n            className={`link_dimension ${isLink}`}\n            onClick={() => {\n              let setisLink = !isLink;\n              this.setInlink(setisLink);\n            }}\n          >\n            <span></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Dimension;\n\n{\n  /* <Dimension\n              value={{\n                top: styles.paddingTop,\n                right: styles.paddingRight,\n                bottom: styles.paddingBottom,\n                left: styles.paddingLeft,\n              }}\n              isLink={styles.paddingLink}\n              changeme={(val_) => {\n                let saveObj = {\n                  paddingTop: val_.top,\n                  paddingRight: val_.right,\n                  paddingBottom: val_.bottom,\n                  paddingLeft: val_.left,\n                };\n                if (\"isLink\" in val_) {\n                  saveObj.paddingLink = val_.isLink;\n                }\n                this.updateStyle(true, true, saveObj);\n              }}\n            /> */\n}\n","/**\n * Edit component.\n */\n\n/**\n * Import dependencies.\n */\nimport LayoutModal from \"./layouts/modal\";\n// import { LayoutsContext } from \"./layouts-provider\";\n\n/**\n * WordPress dependencies.\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { Component, Fragment } from \"@wordpress/element\";\nimport { Placeholder } from \"@wordpress/components\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(...arguments);\n  }\n  render() {\n    const { attributes, setAttributes, clientId } = this.props;\n    /* Placeholder with layout modal */\n    return [\n      <Fragment key={clientId}>\n        <Placeholder\n          key=\"placeholder\"\n          label={__(\"Layout Selector\", \"unlimited-blocks\")}\n          instructions={__(\n            \"Launch the layout library to browse pre-designed sections.\",\n            \"unlimited-blocks\"\n          )}\n          className={\"gb-layout-selector-placeholder\"}\n          icon=\"layout\"\n        >\n          <LayoutModal clientId={clientId} />\n        </Placeholder>\n      </Fragment>,\n    ];\n  }\n}\n","const { compose } = wp.compose;\nconst { rawHandler } = wp.blocks;\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { Button } from \"@wordpress/components\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\n\nclass Layoutlist extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // apiUrl: \"http://localhost:8888/one/wp-json/zita-blocks-layout/v2/search/\",\n      apiUrl:\n        \"https://zitademo.wpzita.com/zita-blocks/wp-json/zita-blocks-layout/v2/search/\",\n      // apiUrl:\n      //   \"https://wpzita.com/zitademo/zita-blocks/wp-json/zita-blocks-layout/v2/search/\",\n      templateLoading: true,\n      categoryLoading: true,\n      templateCategory: \"all\",\n      templatePrice: \"all\",\n      block_templates_category: [],\n      block_templates: [],\n    };\n  }\n  //component did mount\n  async componentDidMount() {\n    await this.getAllRetrived();\n  }\n  //   get all blocks first time\n  getAllRetrived() {\n    let url = this.state.apiUrl + \"?initilaize=1\";\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        this.setState({\n          block_templates: json.demos,\n          block_templates_category: json.categories,\n          templateLoading: false,\n          categoryLoading: false,\n        });\n      });\n  }\n  // get all blocks with argument\n  getDemosByFilter(object_parem = {}) {\n    const urlParams = new URLSearchParams(object_parem);\n    let putUrl = urlParams && urlParams != \"\" ? \"?\" + urlParams : \"\";\n    let apiUrl = this.state.apiUrl + putUrl;\n    fetch(apiUrl)\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        if (\n          \"price_send\" in object_parem &&\n          json &&\n          \"categories\" in json &&\n          \"demos\" in json\n        ) {\n          let blockTemplate = json.demos.length > 0 ? json.demos : false;\n          let blockTemplateCate =\n            json.categories.length > 0 ? json.categories : false;\n          this.setState({\n            block_templates: blockTemplate,\n            block_templates_category: blockTemplateCate,\n            templateLoading: false,\n            categoryLoading: false,\n          });\n        } else if (json) {\n          this.setState({ block_templates: json, templateLoading: false });\n        } else {\n          // console.lo(\"no json data found json -> \", json);\n        }\n      });\n  }\n  //choose category,\n  async getDemosFilterCategory(category) {\n    this.setState({ templateCategory: category, templateLoading: true });\n    await this.getDemosByFilter({\n      category: category,\n      price: this.state.templatePrice,\n    });\n  }\n  //choose price,\n  async getDemosFilterPrice(price) {\n    this.setState({\n      templateCategory: \"all\",\n      templatePrice: price,\n      categoryLoading: true,\n      templateLoading: true,\n    });\n    await this.getDemosByFilter({\n      category: \"all\",\n      price: price,\n      price_send: \"1\",\n    });\n  }\n  // category loading\n  PostLoading = (props) => {\n    let msg = props.data;\n    return (\n      <div>\n        <div className=\"post-loader\">\n          <div className=\"active linear-bubble ubl-block-loader\">\n            {__(msg, \"unlimited-blocks\")}\n            <div>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  PostNotFound = (props) => {\n    let msg = props.data;\n    return (\n      <div className=\"template-not-found\">\n        <h2>{__(msg, \"unlimited-blocks\")}</h2>\n      </div>\n    );\n  };\n  //show all data from\n  render() {\n    const {\n      block_templates,\n      block_templates_category,\n      templateCategory,\n      templatePrice,\n      templateLoading,\n      categoryLoading,\n    } = this.state;\n    const { clientId } = this.props;\n    return (\n      <div className=\"ubl-blocks-layout-wrapper\">\n        <div className=\"container_\">\n          <div className=\"left-section_\">\n            <nav>\n              <span\n                key={\"all\"}\n                className={templatePrice == \"all\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"all\") {\n                    this.getDemosFilterPrice(\"all\");\n                  }\n                }}\n              >\n                {__(\"All\", \"unlimited-blocks\")}\n              </span>\n              <span\n                key={\"free\"}\n                className={templatePrice == \"free\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"free\") {\n                    this.getDemosFilterPrice(\"free\");\n                  }\n                }}\n              >\n                {__(\"Free\", \"unlimited-blocks\")}\n              </span>\n              <span\n                key={\"premium\"}\n                className={templatePrice == \"premium\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"premium\") {\n                    this.getDemosFilterPrice(\"premium\");\n                  }\n                }}\n              >\n                {__(\"Premium\", \"unlimited-blocks\")}\n              </span>\n            </nav>\n            <div className=\"cate-container-\">\n              <div>\n                <span>{__(\"CATEGORIES\", \"unlimited-blocks\")}</span>\n                <div className=\"list_\">\n                  {block_templates_category &&\n                  block_templates_category.length > 0 &&\n                  categoryLoading == false ? (\n                    <>\n                      <span\n                        className={templateCategory == \"all\" ? \"active\" : null}\n                        onClick={() => {\n                          if (templateCategory != \"all\") {\n                            this.getDemosFilterCategory(\"all\");\n                          }\n                        }}\n                      >\n                        {__(\"all\", \"unlimited-blocks\")}\n                      </span>\n                      {block_templates_category.map((template_v) => {\n                        return (\n                          <span\n                            key={template_v.id}\n                            className={\n                              templateCategory == template_v.id\n                                ? \"active\"\n                                : null\n                            }\n                            onClick={() => {\n                              if (templateCategory != template_v.id) {\n                                this.getDemosFilterCategory(template_v.id);\n                              }\n                            }}\n                          >\n                            {__(template_v.title, \"unlimited-blocks\")}\n                          </span>\n                        );\n                      })}\n                    </>\n                  ) : !block_templates_category ? (\n                    <this.PostNotFound data={\"Category Not Found.\"} />\n                  ) : (\n                    <this.PostLoading data={\"Categories Loading...\"} />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"main-section_\">\n            {block_templates &&\n            block_templates.length > 0 &&\n            templateLoading == false ? (\n              <div className=\"template-itemes_\">\n                {block_templates.map((template) => {\n                  return (\n                    <div>\n                      <div className=\"template-content\">\n                        <div className=\"image_\">\n                          <img src={template.image} />\n                        </div>\n                        <div className=\"title_\">\n                          <span>{template.name}</span>\n                        </div>\n                      </div>\n                      <div className=\"template-btn_\">\n                        <button>{__(\"Preview\", \"unlimited-blocks\")}</button>\n                        <Button\n                          className=\"ubl-blocks-layout-imp-btn\"\n                          onClick={() => {\n                            this.props.import(template.content);\n                          }}\n                        >\n                          <i className=\"fas fa-download\"></i>\n                          <span>{__(\"import\", \"unlimited-blocks\")}</span>\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : !block_templates_category ? (\n              <this.PostNotFound data={\"Template Not Found.\"} />\n            ) : (\n              <this.PostLoading data={\"Template Loading...\"} />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// export default Layoutlist;\nexport default compose(\n  withSelect((select, { clientId }) => {\n    const { getBlock } = select(\"core/block-editor\");\n    const { canUserUseUnfilteredHTML } = select(\"core/editor\");\n    const block = getBlock(clientId);\n    return {\n      block,\n      canUserUseUnfilteredHTML: canUserUseUnfilteredHTML(),\n    };\n  }),\n  withDispatch((dispatch, { block, canUserUseUnfilteredHTML }) => ({\n    import: (blockLayout) =>\n      dispatch(\"core/block-editor\").replaceBlocks(\n        block.clientId,\n        rawHandler({\n          HTML: blockLayout,\n          mode: \"BLOCKS\",\n          canUserUseUnfilteredHTML,\n        })\n      ),\n  }))\n)(Layoutlist);\n","/**\n * Layout modal window with tab panel.\n */\n/**\n * WordPress dependencies.\n */\nimport Layoutlist from \"./layout-list\";\nimport { __ } from \"@wordpress/i18n\";\nimport { Fragment, useState } from \"@wordpress/element\";\nimport { Button, Modal } from \"@wordpress/components\";\nimport { useDispatch } from \"@wordpress/data\";\nfunction LayoutModal(props) {\n  //   const [currentTab, setCurrentTab] = useState(\"gb-layout-tab-sections\");\n  const [modalOpen, setModalOpen] = useState(true);\n  //   preventing to close first time\n  const [checkFirst, setcheckFirst] = useState(false);\n  const { removeBlock } = useDispatch(\"core/block-editor\");\n  return (\n    <>\n      <Fragment key={\"layout-modal-fragment-\" + props.clientId}>\n        {/* Launch the layout modal window */}\n        <Button\n          key={\"layout-modal-library-button-\" + props.clientId}\n          isPrimary\n          className=\"gb-layout-modal-button\"\n          onClick={() => {\n            setModalOpen(true);\n          }}\n        >\n          {__(\"Unlimited Blocks Library\", \"unlimited-blocks\")}\n        </Button>\n        {modalOpen ? (\n          <Modal\n            key={\"layout-modal-modal-component-\" + props.clientId}\n            className=\"ubl-blocks-layout-modal\"\n            title={__(\"Unlimited Blocks Templates\", \"unlimited-blocks\")}\n            shouldCloseOnClickOutside={true}\n            onRequestClose={() => {\n              if (checkFirst) {\n                setModalOpen(false);\n                removeBlock(props.clientId);\n              } else {\n                setcheckFirst(true);\n              }\n            }}\n          >\n            <Layoutlist clientId={props.clientId} />\n          </Modal>\n        ) : null}\n      </Fragment>\n    </>\n  );\n}\nexport default LayoutModal;\n","// extracted by mini-css-extract-plugin","import Edit from \"./components/edit\";\nimport \"./editor.scss\";\nimport { __ } from \"@wordpress/i18n\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { block_layout_pre } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/unlimited-blocks-layouts\", {\n  title: block_layout_pre.title,\n  description: block_layout_pre.description,\n  icon: block_layout_pre.icon,\n  keywords: block_layout_pre.keywords,\n  category: \"unlimited-blocks-category\",\n  edit: (props) => {\n    return <Edit {...props} />;\n  },\n  save: () => {\n    return null;\n  },\n});\n\n/**\n * Add a Layout button to the toolbar.\n */\nlet genesisBlocksLayoutButtonAdded = false;\nwp.data.subscribe(() => {\n  appendImportButton();\n});\n/**\n * Build the layout inserter button.\n */\nfunction appendImportButton() {\n  if (genesisBlocksLayoutButtonAdded) {\n    return;\n  }\n  const toolbar = document.querySelector(\".edit-post-header__toolbar\");\n  if (!toolbar) {\n    return;\n  }\n  setTimeout(() => {\n    if (!document.getElementById(\"ublBlocksinsert\")) {\n      const buttonDiv = document.createElement(\"div\");\n      buttonDiv.className = \"ublBlocksinsertWrap\";\n      let html = \"\";\n      html += '<button id=\"ublBlocksinsert\">';\n      let imgUrl =\n        plugin_url.url + \"assets/img/blocks-image/ubl-transparent-img.png\";\n      html += '<img src=\"' + imgUrl + '\">';\n      html += `${__(\"Unlimited Templates\", \"unlimited-blocks\")}`;\n      html += \"</button>\";\n      buttonDiv.innerHTML = html;\n      toolbar.appendChild(buttonDiv);\n      document\n        .getElementById(\"ublBlocksinsert\")\n        .addEventListener(\"click\", gbInsertLayout);\n      genesisBlocksLayoutButtonAdded = true;\n    }\n  }, 1000);\n}\n/**\n * Add the Layout block on click.\n */\nfunction gbInsertLayout() {\n  const block = wp.blocks.createBlock(\n    \"unlimited-blocks/unlimited-blocks-layouts\"\n  );\n  wp.data.dispatch(\"core/block-editor\").insertBlocks(block);\n}\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  InnerBlocks,\n  InspectorControls,\n  MediaUpload,\n  ColorPalette,\n  store as blockEditorStore,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  SelectControl,\n  ToggleControl,\n  __experimentalGradientPicker as GradientPicker,\n  ResizableBox,\n} from \"@wordpress/components\";\n\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport BasicToggleNav from \"../block-assets/utility-components/BasicToggleNav\";\nimport Dimension from \"../block-assets/utility-components/dimension\";\nimport {\n  Animation,\n  setAnimationClass,\n} from \"../block-assets/utility-components/animations/index\";\nimport { compose } from \"redux\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\nclass Edit extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      // widthFirst: false,\n      chooseBorderORShadow: \"border\",\n      resizeWidth: false,\n      resizeContainerWidth: false,\n      openPanel: \"layout\",\n      cloneWidth: false,\n    };\n  }\n  updateStyle = (key_, value, multiple = false) => {\n    const { attributes, setAttributes } = this.props;\n    let getStyle = { ...attributes.styles };\n    if (multiple) {\n      getStyle = { ...getStyle, ...multiple };\n    } else {\n      getStyle[key_] = value;\n    }\n    setAttributes({ styles: getStyle });\n  };\n  render() {\n    // console.log(\"block column block class name \", this.props);\n    const { attributes, setAttributes } = this.props;\n    let { width, styles } = attributes;\n    // wrapper style\n    let wrapperStyles = {\n      margin: `${styles.marginTop}px ${styles.marginRight}px ${styles.marginBottom}px ${styles.marginLeft}px`,\n      padding: `${styles.paddingTop}px ${styles.paddingRight}px ${styles.paddingBottom}px ${styles.paddingLeft}px`,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          backgroundImage: `url(${styles.backgroundImage})`,\n          backgroundSize: styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          boxShadow: BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderEnable) {\n      let borderStyle = `${styles.borderWidth}px ${styles.borderStyle} ${styles.borderColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          border: borderStyle,\n          borderRadius: styles.borderRadius + \"px\",\n        },\n      };\n    }\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n      overlLayColor = {\n        ...overlLayColor,\n        ...{ opacity: styles.backgroundOpacity },\n      };\n    }\n    let verticleStyle = {};\n    if (attributes.verticleAlign) {\n      verticleStyle = {\n        ...verticleStyle,\n        ...{\n          height: 100 + \"%\",\n          display: \"flex\",\n          alignItems: attributes.verticleAlign,\n        },\n      };\n      wrapperStyles = { ...wrapperStyles, ...{ width: 100 + \"%\" } };\n    }\n    let WrapperClass = \"ubl-blocks-cw-column-wrap\";\n    WrapperClass = setAnimationClass(\n      attributes.additionalClassNames,\n      WrapperClass\n    );\n    return (\n      <>\n        <InspectorControls key=\"inspector\">\n          <PanelBody initialOpen={true}>\n            <BasicToggleNav\n              value={this.state.openPanel}\n              navItem={[\n                {\n                  name: \"layout\",\n                  title: \"Layout\",\n                  icon: \"dashicons dashicons-editor-table\",\n                },\n                {\n                  name: \"style\",\n                  title: \"Style\",\n                  icon: \"dashicons dashicons-admin-customizer\",\n                },\n              ]}\n              clickme={(value_) => {\n                this.setState({ openPanel: value_ });\n              }}\n            />\n          </PanelBody>\n\n          {this.state.openPanel == \"layout\" ? (\n            <>\n              <PanelBody\n                title={__(\"Layouts\", \"unlimited-blocks\")}\n                initialOpen={true}\n              >\n                <p>\n                  <strong>{__(\"Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  label={__(\"Column Width (%)\", \"unlimited-blocks\")}\n                  value={\n                    this.state.cloneWidth\n                      ? this.state.cloneWidth\n                      : this.props.cloneWidth\n                  }\n                  min={10}\n                  max={100}\n                  onChange={(e) => {\n                    let checkWidth = this.props.changeWidthColumn(e);\n                    if (checkWidth == true) {\n                      this.setState({ cloneWidth: e });\n                    }\n                  }}\n                />\n                {/* verticle alignment  */}\n                <p>\n                  <strong>\n                    {__(\"Verticle Alignment\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <BasicToggleNav\n                  wrapperClass=\"secondary-nav\"\n                  value={\n                    attributes.verticleAlign\n                      ? attributes.verticleAlign\n                      : \"unset\"\n                  }\n                  navItem={[\n                    {\n                      name: \"unset\",\n                      title: \"Top\",\n                    },\n                    {\n                      name: \"center\",\n                      title: \"Center\",\n                    },\n                    {\n                      name: \"flex-end\",\n                      title: \"Bottom\",\n                    },\n                  ]}\n                  clickme={(value_) => {\n                    setAttributes({ verticleAlign: value_ });\n                  }}\n                />\n                {/* verticle alignment  */}\n              </PanelBody>\n              <PanelBody\n                title={__(\"Spacing\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <p>\n                  <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n                </p>\n                <Dimension\n                  value={{\n                    top: styles.paddingTop,\n                    right: styles.paddingRight,\n                    bottom: styles.paddingBottom,\n                    left: styles.paddingLeft,\n                  }}\n                  isLink={styles.paddingLink}\n                  changeme={(val_) => {\n                    let saveObj = {\n                      paddingTop: val_.top,\n                      paddingRight: val_.right,\n                      paddingBottom: val_.bottom,\n                      paddingLeft: val_.left,\n                    };\n                    if (\"isLink\" in val_) {\n                      saveObj.paddingLink = val_.isLink;\n                    }\n                    this.updateStyle(true, true, saveObj);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Margin\", \"unlimited-blocks\")}</strong>\n                </p>\n                <Dimension\n                  value={{\n                    top: styles.marginTop,\n                    right: styles.marginRight,\n                    bottom: styles.marginBottom,\n                    left: styles.marginLeft,\n                  }}\n                  isLink={styles.marginLink}\n                  changeme={(val_) => {\n                    let saveObj = {\n                      marginTop: val_.top,\n                      marginRight: val_.right,\n                      marginBottom: val_.bottom,\n                      marginLeft: val_.left,\n                    };\n                    if (\"isLink\" in val_) {\n                      saveObj.marginLink = val_.isLink;\n                    }\n                    this.updateStyle(true, true, saveObj);\n                  }}\n                />\n              </PanelBody>\n              <PanelBody\n                title={__(\"Animations\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <Animation\n                  value={attributes.additionalClassNames}\n                  change={(animate) => {\n                    setAttributes({ additionalClassNames: animate });\n                  }}\n                />\n              </PanelBody>\n            </>\n          ) : (\n            <>\n              <PanelBody title={__(\"Border & Box Shadow\")} initialOpen={false}>\n                {/* -----------------box shadow----------------- */}\n                <BasicToggleNav\n                  wrapperClass=\"secondary-nav\"\n                  value={this.state.chooseBorderORShadow}\n                  navItem={[\n                    {\n                      name: \"border\",\n                      title: \"Border\",\n                    },\n                    {\n                      name: \"boxshadow\",\n                      title: \"Box Shadow\",\n                    },\n                  ]}\n                  clickme={(value_) => {\n                    this.setState({ chooseBorderORShadow: value_ });\n                  }}\n                />\n                {this.state.chooseBorderORShadow == \"boxshadow\" ? (\n                  <>\n                    <ToggleControl\n                      label={\n                        styles.shadowEnable\n                          ? __(\"Disable\", \"unlimited-blocks\")\n                          : __(\"Enable\", \"unlimited-blocks\")\n                      }\n                      checked={styles.shadowEnable}\n                      onChange={(e) => this.updateStyle(\"shadowEnable\", e)}\n                    />\n                    {styles.shadowEnable && (\n                      <>\n                        <div className=\"range-and-title-inline\">\n                          <p className=\"title-inline\">\n                            <strong>{__(\"X\", \"unlimited-blocks\")}</strong>\n                          </p>\n                          <RangeControl\n                            value={styles.shadowOffsetX}\n                            min={0}\n                            max={20}\n                            onChange={(e) => {\n                              this.updateStyle(\"shadowOffsetX\", e);\n                            }}\n                          />\n                        </div>\n                        <div className=\"range-and-title-inline\">\n                          <p className=\"title-inline\">\n                            <strong>{__(\"Y\", \"unlimited-blocks\")}</strong>\n                          </p>\n                          <RangeControl\n                            value={styles.shadowOffsetY}\n                            min={0}\n                            max={20}\n                            onChange={(e) => {\n                              this.updateStyle(\"shadowOffsetY\", e);\n                            }}\n                          />\n                        </div>\n                        <div className=\"range-and-title-inline\">\n                          <p className=\"title-inline\">\n                            <strong>{__(\"Blur\", \"unlimited-blocks\")}</strong>\n                          </p>\n                          <RangeControl\n                            value={styles.shadowBlur}\n                            min={0}\n                            max={20}\n                            onChange={(e) => {\n                              this.updateStyle(\"shadowBlur\", e);\n                            }}\n                          />\n                        </div>\n                        <div className=\"range-and-title-inline\">\n                          <p className=\"title-inline\">\n                            <strong>{__(\"Spread\", \"unlimited-blocks\")}</strong>\n                          </p>\n                          <RangeControl\n                            value={styles.shadowSpread}\n                            min={0}\n                            max={20}\n                            onChange={(e) => {\n                              this.updateStyle(\"shadowSpread\", e);\n                            }}\n                          />\n                        </div>\n                        <p>\n                          <strong>\n                            {__(\"Shadow Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={styles.shadowColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateStyle(\"shadowColor\", color);\n                          }}\n                        />\n                      </>\n                    )}\n                    {/* -----------------box shadow----------------- */}\n                  </>\n                ) : (\n                  <>\n                    <ToggleControl\n                      label={\n                        styles.borderEnable\n                          ? __(\"Disable\", \"unlimited-blocks\")\n                          : __(\"Enable\", \"unlimited-blocks\")\n                      }\n                      checked={styles.borderEnable}\n                      onChange={(e) => this.updateStyle(\"borderEnable\", e)}\n                    />\n                    {styles.borderEnable && (\n                      <div className=\"icon-border-setting\">\n                        <div className=\"ubl-multiple-select\">\n                          <SelectControl\n                            label={__(\"Border Style\", \"unlimited-blocks\")}\n                            value={styles.borderStyle}\n                            onChange={(choosen) => {\n                              this.updateStyle(\"borderStyle\", choosen);\n                            }}\n                            options={[\n                              {\n                                value: \"solid\",\n                                label: __(\"Solid\", \"unlimited-blocks\"),\n                              },\n                              {\n                                value: \"dotted\",\n                                label: __(\"Dotted\", \"unlimited-blocks\"),\n                              },\n                              {\n                                value: \"dashed\",\n                                label: __(\"Dashed\", \"unlimited-blocks\"),\n                              },\n                            ]}\n                          />\n                        </div>\n                        <RangeControl\n                          label={__(\"Border Radius\", \"unlimited-blocks\")}\n                          value={styles.borderRadius}\n                          min={0}\n                          max={50}\n                          onChange={(e) => {\n                            this.updateStyle(\"borderRadius\", e);\n                          }}\n                        />\n                        <RangeControl\n                          label={__(\"Border Width\", \"unlimited-blocks\")}\n                          value={styles.borderWidth}\n                          min={0}\n                          max={100}\n                          onChange={(e) => this.updateStyle(\"borderWidth\", e)}\n                        />\n                        <ColorPalette\n                          label={__(\"Border Color\", \"unlimited-blocks\")}\n                          value={styles.borderColor}\n                          onChange={(color) =>\n                            this.updateStyle(\"borderColor\", color)\n                          }\n                        />\n                      </div>\n                    )}\n                  </>\n                )}\n              </PanelBody>\n              <PanelBody\n                title={__(\"Background\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <div className=\"ubl-multiple-select\">\n                  <SelectControl\n                    value={styles.backgroundType}\n                    onChange={(choosen) => {\n                      this.updateStyle(\"backgroundType\", choosen);\n                    }}\n                    options={[\n                      {\n                        value: \"none\",\n                        label: __(\"None\", \"unlimited-blocks\"),\n                      },\n                      {\n                        value: \"color\",\n                        label: __(\"Color\", \"unlimited-blocks\"),\n                      },\n                      // { value: \"color\", label: __(\"Color\", \"unlimited-blocks\") },\n                      {\n                        value: \"image\",\n                        label: __(\"Image\", \"unlimited-blocks\"),\n                      },\n                    ]}\n                  />\n                </div>\n                {styles.backgroundType == \"image\" && (\n                  <>\n                    <p>\n                      <strong>\n                        {__(\"Background image\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <MediaUpload\n                      allowedType=\"image\"\n                      onSelect={(newImage) => {\n                        this.updateStyle(\n                          \"backgroundImage\",\n                          newImage.sizes.full.url\n                        );\n                      }}\n                      value={styles.backgroundImage}\n                      render={({ open }) => (\n                        <div\n                          onClick={open}\n                          className={`ubl-block-image-uploader ${\n                            \"\" == styles.backgroundImage && \"blank\"\n                          }`}\n                        >\n                          <div>\n                            <i className=\"fas fa-plus\"></i>\n                          </div>\n                          <img src={styles.backgroundImage} />\n                        </div>\n                      )}\n                    />\n                    {styles.backgroundImage != \"\" && (\n                      <div className=\"flex-section\">\n                        <p>{__(\"Background Size\", \"unlimited-blocks\")}</p>\n                        <select\n                          value={styles.backgroundImageSize}\n                          onChange={(e) => {\n                            this.updateStyle(\n                              \"backgroundImageSize\",\n                              e.target.value\n                            );\n                          }}\n                        >\n                          <option value=\"auto\">\n                            {__(\"Auto\", \"unlimited-blocks\")}\n                          </option>\n                          <option value=\"cover\">\n                            {__(\"Cover\", \"unlimited-blocks\")}\n                          </option>\n                          <option value=\"contain\">\n                            {__(\"Contain\", \"unlimited-blocks\")}\n                          </option>\n                        </select>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                {(styles.backgroundType == \"color\" ||\n                  styles.backgroundType == \"image\") && (\n                  <>\n                    <p>\n                      <strong>\n                        {styles.backgroundType == \"image\" &&\n                        styles.backgroundImage != \"\"\n                          ? __(\"Overlay Color\", \"unlimited-blocks\")\n                          : __(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <BasicToggleNav\n                      wrapperClass=\"secondary-nav\"\n                      value={styles.backgroundColorType}\n                      navItem={[\n                        {\n                          name: \"color\",\n                          title: \"Solid\",\n                        },\n                        {\n                          name: \"gradient\",\n                          title: \"Gradient\",\n                        },\n                      ]}\n                      clickme={(value_) => {\n                        this.updateStyle(\"backgroundColorType\", value_);\n                      }}\n                    />\n                    {\"color\" == styles.backgroundColorType ? (\n                      <ColorPicker\n                        color={styles.backgroundColor}\n                        onChangeComplete={(colorBg) => {\n                          let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                          this.updateStyle(\"backgroundColor\", color);\n                        }}\n                      />\n                    ) : (\n                      <GradientPicker\n                        value={styles.backgroundImageGradient}\n                        gradients={UBLGraDientColors}\n                        onChange={(newGradient) => {\n                          this.updateStyle(\n                            \"backgroundImageGradient\",\n                            newGradient\n                          );\n                        }}\n                      />\n                    )}\n                    <RangeControl\n                      label={__(\"Opacity\", \"unlimited-blocks\")}\n                      value={styles.backgroundOpacity}\n                      min={0}\n                      max={1}\n                      step={0.1}\n                      onChange={(e) => {\n                        this.updateStyle(\"backgroundOpacity\", e);\n                      }}\n                    />\n                  </>\n                )}\n              </PanelBody>\n            </>\n          )}\n        </InspectorControls>\n\n        <ResizableBox\n          className=\"ubl-blocks-custom-resizeable\"\n          handleWrapperClass=\"ubl-blocks-cw-column-handle-wrapper\"\n          enable={{\n            top: false,\n            right: true,\n            bottom: false,\n            left: false,\n            topRight: false,\n            bottomRight: false,\n            bottomLeft: false,\n            topLeft: false,\n          }}\n          onResizeStop={() => {\n            this.setState({ resizeWidth: false });\n          }}\n          onResizeStart={() => {\n            // toggleSelection(false);\n            let getElement = document.getElementById(attributes.blockId);\n            if (getElement) {\n              let wrapper = getElement.closest(\n                \".block-editor-block-list__layout\"\n              );\n              if (wrapper) {\n                let elementWidth = getElement.getBoundingClientRect().width;\n                let elementWrapperWidth = wrapper.getBoundingClientRect().width;\n                this.setState({\n                  resizeWidth: elementWidth,\n                  resizeContainerWidth: elementWrapperWidth,\n                });\n              }\n\n              // console.log(\"getElement width onResizeStart ->\", elementWidth);\n              // resizeContainerWidth\n            }\n          }}\n          onResize={(_event, _direction, elt, arg_) => {\n            // console.log(\"state width->\", this.state.resizeWidth);\n            // console.log(\n            //   \"state wrapper width->\",\n            //   this.state.resizeContainerWidth\n            // );\n            if (this.state.resizeWidth && this.state.resizeContainerWidth) {\n              let nowWidth = this.state.resizeWidth + arg_.width;\n              let calculateWidth =\n                (100 * nowWidth) / this.state.resizeContainerWidth;\n              // console.log(\"calculateWidth width->\", calculateWidth);\n              let gotWidth = parseInt(calculateWidth);\n              // console.log(\"gotWidth width->\", gotWidth);\n              let checkWidth = this.props.changeWidthColumn(gotWidth);\n              if (checkWidth == true) {\n                this.setState({ cloneWidth: gotWidth });\n              }\n            }\n          }}\n        >\n          {/* ////// */}\n          <div\n            id={attributes.blockId}\n            className=\"ubl-blocks-cw-column\"\n            style={verticleStyle}\n          >\n            <div className={WrapperClass} style={wrapperStyles}>\n              <div\n                className=\"ubl-blocks-cw-column-overlay\"\n                style={overlLayColor}\n              ></div>\n              <div\n                className={`ubl-blocks-cw-column-content ${\n                  this.props.ul_has_children ? \"ul_has_column_children\" : \"\"\n                }`}\n              >\n                <InnerBlocks\n                  templateLock={false}\n                  templateInsertUpdatesSelection={false}\n                  renderAppender={InnerBlocks.ButtonBlockAppender}\n                />\n              </div>\n            </div>\n          </div>\n          {this.props.ul_column_length < 5 &&\n            this.props.ul_column_index != this.props.ul_column_length && (\n              <button\n                onClick={() => {\n                  this.props.addBlockNextBlock();\n                }}\n                className=\"ul-add-new-column-btn\"\n              >\n                <span className=\"dashicons dashicons-plus-alt2\"></span>\n              </button>\n            )}\n        </ResizableBox>\n      </>\n    );\n  }\n}\n\nexport default compose(\n  withSelect((select, ownProps) => {\n    // console.log(\"block column block class name inside select  \", ownProps);\n    const { clientId } = ownProps;\n    const { getBlockRootClientId, getBlock } = select(blockEditorStore);\n    const rootId = getBlockRootClientId(clientId);\n    let getRootBlock = getBlock(rootId);\n    // console.log(\"getRootBlock from column select-> \", getRootBlock);\n    // check column has children\n    let currentColumnChildren = getBlock(clientId).innerBlocks.length;\n    currentColumnChildren = currentColumnChildren ? true : false;\n    // check column has children\n    let rootBlockWrapperAttr = getRootBlock.attributes;\n    let lengthInnerBlock = getRootBlock.innerBlocks.length;\n    let WrapperColumns = rootBlockWrapperAttr.columns;\n    let StyleColumn = rootBlockWrapperAttr.listStyle.columns;\n    let StyleColumnL = Object.keys(StyleColumn).length;\n    if (\n      lengthInnerBlock == WrapperColumns &&\n      lengthInnerBlock == StyleColumnL\n    ) {\n      let getIndexOfColumn =\n        getRootBlock.innerBlocks.findIndex(checkIndexOfcolumn); // current column client id\n      let setCloneWidth = StyleColumn[getIndexOfColumn];\n\n      //get index of currentColumn\n      function checkIndexOfcolumn(columns) {\n        return clientId == columns.clientId;\n      }\n      //get index of currentColumn\n      return {\n        cloneWidth: setCloneWidth,\n        ul_column_index: getIndexOfColumn,\n        ul_column_length: StyleColumnL - 1,\n        ul_has_children: currentColumnChildren,\n      };\n    }\n  }),\n  withDispatch((dispatch, ownProps, registry) => {\n    const { clientId, ul_column_index, ul_column_length } = ownProps;\n    const { getBlockRootClientId, getBlock } =\n      registry.select(blockEditorStore);\n    const rootWrapperID = getBlockRootClientId(clientId);\n    const getRootBlock = getBlock(rootWrapperID);\n\n    // ** current column change width\n    const { updateBlockAttributes, insertBlock } =\n      dispatch(\"core/block-editor\");\n    const rootBlockWrapperAttr = { ...getRootBlock.attributes };\n    let getListStyle = rootBlockWrapperAttr.listStyle.columns;\n    const changeWidthAndPlaceStyle = (width) => {\n      let cloneColumnWidths = { ...getListStyle };\n      let ApplyWidth = { ...getListStyle };\n      let changeWidth = true;\n      if (ul_column_index == ul_column_length) {\n        let getPrevIndex = ul_column_index - 1;\n        let getComplexWidth =\n          cloneColumnWidths[ul_column_index] + cloneColumnWidths[getPrevIndex];\n        let prev_item_width = getComplexWidth - width;\n\n        if (prev_item_width <= 10) {\n          changeWidth = false;\n        }\n\n        ApplyWidth[getPrevIndex] = prev_item_width;\n      } else if (ul_column_index < ul_column_length) {\n        let getNextIndex = ul_column_index + 1;\n        let getComplexWidth =\n          cloneColumnWidths[ul_column_index] + cloneColumnWidths[getNextIndex];\n        let next_item_width = getComplexWidth - width;\n        ApplyWidth[getNextIndex] = next_item_width;\n        if (next_item_width <= 10) {\n          changeWidth = false;\n        }\n      }\n      ApplyWidth[ul_column_index] = width;\n      let columnsStyle = { columns: ApplyWidth };\n      if (changeWidth) {\n        updateBlockAttributes(rootWrapperID, {\n          listStyle: columnsStyle,\n        });\n      }\n      return changeWidth;\n    };\n    // ** current column change width\n\n    /**\n     * add more column\n     */\n    // console.log(\"getRootBlock from column dispatch-> \", getRootBlock);\n    const blockName = \"unlimited-blocks/ubl-column-block-column\";\n    const insertedBlock = wp.blocks.createBlock(blockName);\n    const columnAddIndex = ul_column_index + 1;\n    const addBlockNextBlock = () => {\n      insertBlock(insertedBlock, columnAddIndex, rootWrapperID);\n      let NowColumnCount = rootBlockWrapperAttr.columns + 1;\n      // change column length\n      updateBlockAttributes(rootWrapperID, {\n        columns: NowColumnCount,\n      });\n    };\n\n    return {\n      changeWidthColumn: changeWidthAndPlaceStyle,\n      addBlockNextBlock: addBlockNextBlock,\n    };\n  })\n)(Edit);\n","/**\n * BLOCK: Genesis Blocks Advanced Columns InnerBlocks.\n */\n\n/**\n * Internal dependencies.\n */\nimport Edit from \"./edit\";\nimport \"./styles/editor.scss\";\nimport { InnerBlocks } from \"@wordpress/block-editor\";\nimport { setAnimationClass } from \"../block-assets/utility-components/animations/index\";\n/**\n * WordPress dependencies.\n */\nimport { __ } from \"@wordpress/i18n\";\nconst { registerBlockType } = wp.blocks;\n/**\n *\n * Register advanced columns block.\n *\n */\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { column_blocks_column } = blocksDetail;\nconst AttrS = {\n  styles: {\n    type: \"object\",\n    default: {\n      // background\n      // image/color/none/gradient\n      backgroundType: \"\",\n      // color/gradient\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"cover\",\n      backgroundImageGradient:\n        \"radial-gradient(rgba(6,147,227,1) 38%,rgb(155,81,224) 80%)\",\n      backgroundOpacity: 1,\n      // border\n      borderEnable: false,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      borderColor: \"#f8c045\",\n      borderRadius: \"\",\n      // box-shadowpP\n      shadowEnable: false,\n      shadowOffsetX: 1,\n      shadowOffsetY: 0,\n      shadowBlur: 2,\n      shadowSpread: 2,\n      shadowColor: \"#f8c045\",\n      // margin\n      marginLink: true,\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n      // padding\n      paddingLink: true,\n      paddingTop: 12,\n      paddingBottom: 12,\n      paddingLeft: 12,\n      paddingRight: 12,\n    },\n  },\n  blockId: { type: \"string\", default: \"\" },\n  // width: {\n  //   type: \"number\",\n  //   default: 0,\n  // },\n  verticleAlign: {\n    type: \"string\",\n    default: \"\",\n  },\n  responsiveWidth: {\n    type: \"object\",\n    default: {\n      orgWidth: 0,\n      // maxWidth: 0,\n    },\n  },\n  additionalClassNames: {\n    type: \"object\",\n    default: {},\n  },\n};\nregisterBlockType(\"unlimited-blocks/ubl-column-block-column\", {\n  title: column_blocks_column.title,\n  description: column_blocks_column.description,\n  icon: column_blocks_column.icon,\n  keywords: column_blocks_column.keywords,\n  category: \"unlimited-blocks-category\",\n  parent: [\"unlimited-blocks/ubl-column-block-wrapper\"],\n  attributes: AttrS,\n  /* Render the block in the editor. */\n  edit: (props) => {\n    if (props.attributes.blockId == \"\")\n      props.setAttributes({ blockId: \"ubl-blocks-\" + props.clientId });\n    return <Edit {...props} />;\n  },\n\n  /* Save the block markup. */\n  save: (props) => {\n    const { attributes } = props;\n    const { styles } = attributes;\n    let blockId = attributes.blockId;\n    // style 1\n    let verticleStyle = \"\";\n    if (attributes.verticleAlign) {\n      verticleStyle = {\n        // height: 100 + \"%\",\n        display: \"flex\",\n        \"align-items\": attributes.verticleAlign,\n      };\n    }\n    // column responsive width\n    let ublStyler1 = {\n      id: blockId,\n      put_res_class: 1,\n      style: verticleStyle,\n      responsiveWidth: attributes.responsiveWidth,\n    };\n    ublStyler1 = JSON.stringify(ublStyler1);\n    // style 2\n    // wrapper style\n    let wrapperStyles = {\n      \"margin-top\": styles.marginTop,\n      \"margin-right\": styles.marginRight,\n      \"margin-bottom\": styles.marginBottom,\n      \"margin-left\": styles.marginLeft,\n      \"padding-top\": styles.paddingTop,\n      \"padding-right\": styles.paddingRight,\n      \"padding-bottom\": styles.paddingBottom,\n      \"padding-left\": styles.paddingLeft,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"background-image\": `url(${styles.backgroundImage})`,\n          \"background-size\": styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"box-shadow\": BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderEnable) {\n      let borderStyle = `${styles.borderWidth}px ${styles.borderStyle} ${styles.borderColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          border: borderStyle,\n          \"border-radius\": styles.borderRadius,\n        },\n      };\n    }\n    let ublStyler2 = {\n      id: blockId + \"column-wrap\",\n      put_res_class: 0,\n      style: wrapperStyles,\n    };\n    ublStyler2 = JSON.stringify(ublStyler2);\n    // style 2\n    //overlay color\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n    }\n    // wrapper class\n    let WrapperClass = `ubl-blocks-cw-column-wrap ${blockId}column-wrap`;\n    WrapperClass = setAnimationClass(\n      attributes.additionalClassNames,\n      WrapperClass\n    );\n    // wrapper class\n    return (\n      <div\n        className={`ubl-blocks-cw-column ${blockId}`}\n        ubl-blocks-styler={ublStyler1}\n      >\n        <div className={WrapperClass} ubl-blocks-styler={ublStyler2}>\n          <div\n            className=\"ubl-blocks-cw-column-overlay\"\n            style={overlLayColor}\n          ></div>\n          <div className=\"ubl-blocks-cw-column-content\">\n            <InnerBlocks.Content />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import memoize from \"memize\";\n/**\n * WordPress dependencies.\n */\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  InspectorControls,\n  BlockControls,\n  BlockAlignmentToolbar,\n  InnerBlocks,\n  ColorPalette,\n  store as blockEditorStore,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  Placeholder,\n  ButtonGroup,\n  Button,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n} from \"@wordpress/components\";\n// import { UBLGraDientColors } from \"./../block-assets/post-functions\";\nimport BasicToggleNav from \"../block-assets/utility-components/BasicToggleNav\";\nimport Dimension from \"../block-assets/utility-components/dimension\";\nimport {\n  Animation,\n  setAnimationClass,\n} from \"../block-assets/utility-components/animations/index\";\nimport BackgroundType from \"../block-assets/utility-components/backgroundType/backgroundType\";\nimport { compose } from \"redux\";\nconst columnOptions = [\n  {\n    class_: \"100\",\n    width: { 0: 100 },\n    columns: 1,\n  },\n  {\n    class_: \"1-2\",\n    width: { 0: 50, 1: 50 },\n    columns: 2,\n  },\n  {\n    class_: \"30-70\",\n    width: { 0: 30, 1: 70 },\n    columns: 2,\n  },\n  {\n    class_: \"70-30\",\n    width: { 0: 70, 1: 30 },\n    columns: 2,\n  },\n  {\n    class_: \"1-3\",\n    width: { 0: 33.333, 1: 33.333, 2: 33.333 },\n    columns: 3,\n  },\n  {\n    class_: \"25-25-50\",\n    width: { 0: 25, 1: 25, 2: 50 },\n    columns: 3,\n  },\n  {\n    class_: \"50-25-25\",\n    width: { 0: 50, 1: 25, 2: 25 },\n    columns: 3,\n  },\n  {\n    class_: \"25-50-25\",\n    width: { 0: 25, 1: 50, 2: 25 },\n    columns: 3,\n  },\n  // {\n  //   class_: \"1-4\",\n  //   width: { 0: 25, 1: 25, 2: 25, 3: 25 },\n  //   columns: 4,\n  // },\n  // {\n  //   class_: \"1-5\",\n  //   width: { 0: 20, 1: 20, 2: 20, 3: 20 },\n  //   columns: 5,\n  // },\n];\nconst ALLOWED_BLOCKS = [\"unlimited-blocks/ubl-column-block-column\"];\n/* Get the column template. */\n\n// for()\n\nconst getLayoutTemplate = memoize((columns) => {\n  const times_ = [];\n  for (let countcolumns = 0; countcolumns < columns; countcolumns++) {\n    times_.push([\"unlimited-blocks/ubl-column-block-column\"]);\n  }\n  return times_;\n});\n\n// console.log(\"getLayoutTemplate\", getLayoutTemplate);\n\nclass Edit extends Component {\n  constructor(props) {\n    super(...arguments);\n    this.state = {\n      chooseBorderORShadow: \"border\",\n      openPanel: \"layout\",\n      changeWidthPreventForFirstTime: \"\",\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"prev props\", prevProps);\n    // console.log(\"current props\", this.props);\n\n    if (prevProps.attributes.columns != this.props.attributes.columns) {\n      // console.log(\"yes change is 1\");\n      let currentColumn = parseInt(this.props.attributes.columns);\n      let columnsWidth = 100 / currentColumn;\n      let SetObject = {};\n      for (let initWidth = 0; initWidth < currentColumn; initWidth++) {\n        // const element = array[index_];\n        SetObject[initWidth] = columnsWidth;\n      }\n      let setObjectColumn = { columns: SetObject };\n      this.props.setAttributes({ listStyle: setObjectColumn });\n      // console.log(\"setObjectColumn->\", setObjectColumn);\n      // this.setupWidthOnchangeWidth(setObjectColumn);\n\n      this.setState({ changeWidthPreventForFirstTime: 1 });\n    } else if (this.props.wrapper_childrens !== prevProps.wrapper_childrens) {\n      // console.log(\"yes change is 2\");\n\n      if (\n        prevProps.wrapper_childrens.length &&\n        prevProps.wrapper_childrens.length > this.props.wrapper_childrens.length\n      ) {\n        // console.log(\"yes change is 22\");\n        let currentColumn = parseInt(this.props.attributes.columns);\n        let columnsWidth = 100 / currentColumn;\n        let SetObject = {};\n        for (let initWidth = 0; initWidth < currentColumn; initWidth++) {\n          // const element = array[index_];\n          SetObject[initWidth] = columnsWidth;\n        }\n        let setObjectColumn = { columns: SetObject };\n        this.props.setAttributes({ listStyle: setObjectColumn });\n\n        if (\n          this.props.wrapper_childrens.length != this.props.attributes.columns\n        ) {\n          this.props.setAttributes({\n            columns: this.props.wrapper_childrens.length,\n          });\n        }\n        this.setupWidthOnchangeWidth(setObjectColumn);\n      } else {\n        this.setupWidthOnchangeWidth();\n      }\n    } else if (\n      this.props.attributes.listStyle.columns !=\n      prevProps.attributes.listStyle.columns\n    ) {\n      this.setupWidthOnchangeWidth();\n    }\n  }\n\n  setupWidthOnchangeWidth(listColumn = false) {\n    const { attributes, wrapper_childrens } = this.props;\n    let getListStyle = !listColumn ? attributes.listStyle.columns : listColumn;\n    // console.log(\"--getListStyle\", getListStyle);\n    // console.log(\"--wrapper_childrens\", wrapper_childrens);\n    // ---------\n    if (\n      getListStyle &&\n      wrapper_childrens.length &&\n      Object.keys(getListStyle).length == wrapper_childrens.length\n    ) {\n      for (let getOrderChildren in getListStyle) {\n        let getIdOfColumn = wrapper_childrens[getOrderChildren].clientId;\n        let getIdOfColumnWidth = getListStyle[getOrderChildren];\n        if (getIdOfColumn) {\n          let IdOfColumn = \"block-\" + getIdOfColumn;\n          let foundColumn = document.getElementById(IdOfColumn);\n          if (foundColumn) {\n            foundColumn.style.width = getIdOfColumnWidth + \"%\";\n          }\n        }\n      }\n    }\n    // ---------\n  }\n  componentDidMount() {\n    this.setupWidthOnchangeWidth();\n  }\n  updateStyle = (key_, value, multiple = false) => {\n    const { attributes, setAttributes } = this.props;\n    let getStyle = { ...attributes.styles };\n    if (multiple) {\n      getStyle = { ...getStyle, ...multiple };\n    } else {\n      getStyle[key_] = value;\n    }\n    setAttributes({ styles: getStyle });\n  };\n  buttonPercent(percent) {\n    let Per = Object.keys(percent).map((key_) => (\n      <span>{parseInt(percent[key_])}</span>\n    ));\n    return Per;\n  }\n  render() {\n    // prevv ------------------=+++++++++++++============\n\n    // console.log(\"wrapper props by render ->\", this.props);\n\n    // initialize style for column\n    const { attributes, setAttributes, clientId } = this.props;\n    // set block id\n    if (attributes.blockId == \"\")\n      setAttributes({ blockId: \"ubl-blocks-\" + clientId });\n\n    const { blockId, styles, contentWidth } = attributes;\n    // let dataListStyle_ = null;\n    // let initWidthJson_ = this.state.initWidthJson;\n    // if (initWidthJson_) {\n    //   // set column width\n    //   dataListStyle_ = JSON.stringify(this.state.initWidthJson);\n    // }\n    let wrapperStyles = {\n      margin: `${styles.marginTop}px ${styles.marginRight}px ${styles.marginBottom}px ${styles.marginLeft}px`,\n      padding: `${styles.paddingTop}px ${styles.paddingRight}px ${styles.paddingBottom}px ${styles.paddingLeft}px`,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          backgroundImage: `url(${styles.backgroundImage})`,\n          backgroundSize: styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          boxShadow: BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderEnable) {\n      let borderStyle = `${styles.borderWidth}px ${styles.borderStyle} ${styles.borderColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          border: borderStyle,\n          borderRadius: styles.borderRadius + \"px\",\n        },\n      };\n    }\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n      if (\"image\" == styles.backgroundType) {\n        overlLayColor = {\n          ...overlLayColor,\n          ...{ opacity: styles.backgroundOpacity },\n        };\n      }\n    }\n    /**\n     * content width\n     */\n    let contentWidthApply = null;\n    if (contentWidth.enable) {\n      contentWidthApply = {};\n      if (contentWidth.parameter == \"px\") {\n        contentWidthApply.maxWidth = \"100%\";\n        contentWidthApply.width = contentWidth.widthPx + \"px\";\n      } else {\n        contentWidthApply.width = contentWidth.width + \"%\";\n      }\n    }\n    /**\n     * wrapper class\n     *\n     **/\n    let WrapperClass = \"ubl-blocks-column-wrapper-2\";\n    WrapperClass = setAnimationClass(\n      attributes.additionalClassNames,\n      WrapperClass\n    );\n    /* Show the layout placeholder. */\n    if (attributes.columns == 0) {\n      return [\n        <BlockControls key=\"controls\">\n          <BlockAlignmentToolbar\n            value={attributes.align}\n            onChange={(align) => setAttributes({ align })}\n            controls={[\"wide\", \"full\"]}\n          />\n        </BlockControls>,\n        <Placeholder\n          key=\"placeholder\"\n          icon=\"editor-table\"\n          label={__(\"Advance Column Layout\", \"unlimited-blocks\")}\n          className={\"ubl-column-placeholder\"}\n        >\n          <ButtonGroup\n            aria-label={__(\"Select Row Columns\", \"unlimited-blocks\")}\n            className=\"ubl-blocks-columns-group\"\n          >\n            {columnOptions.map((columnOpt) => {\n              let { columns, class_, width } = columnOpt;\n              return (\n                <div className=\"ubl-blocks-column-btn-container\">\n                  <Button\n                    className={`ubl-clmn-btn-${class_}`}\n                    onClick={() => {\n                      if (\"width\" in columnOpt) {\n                        let updateListStyle = { columns: columnOpt.width };\n                        setAttributes({\n                          columns: columns,\n                          listStyle: updateListStyle,\n                        });\n                      } else {\n                        setAttributes({ columns: columns });\n                      }\n                    }}\n                  >\n                    <div>\n                      {[...Array(columns)].map((vall, keyy) => (\n                        <span className={`span-${keyy}`}></span>\n                      ))}\n                    </div>\n                  </Button>\n                  <span className=\"column-percent\">\n                    {this.buttonPercent(width)}\n                  </span>\n                </div>\n              );\n            })}\n          </ButtonGroup>\n        </Placeholder>,\n      ];\n    }\n\n    return (\n      <>\n        <BlockControls key=\"controls\">\n          <BlockAlignmentToolbar\n            value={attributes.align}\n            onChange={(align) => setAttributes({ align })}\n            controls={[\"center\", \"wide\", \"full\"]}\n          />\n        </BlockControls>\n        <InspectorControls key=\"inspector\">\n          {attributes.columns > 0 && (\n            <>\n              <PanelBody initialOpen={true}>\n                <BasicToggleNav\n                  value={this.state.openPanel}\n                  navItem={[\n                    {\n                      name: \"layout\",\n                      title: \"Layout\",\n                      icon: \"dashicons dashicons-editor-table\",\n                    },\n                    {\n                      name: \"style\",\n                      title: \"Style\",\n                      icon: \"dashicons dashicons-admin-customizer\",\n                    },\n                  ]}\n                  clickme={(value_) => {\n                    this.setState({ openPanel: value_ });\n                  }}\n                />\n              </PanelBody>\n              {this.state.openPanel == \"layout\" ? (\n                <>\n                  <PanelBody\n                    title={__(\"Column & Layout\", \"unlimited-blocks\")}\n                    initialOpen={true}\n                  >\n                    {/* testing ------------------------------------- */}\n                    <RangeControl\n                      label={__(\"Columns\", \"unlimited-blocks\")}\n                      // help={}\n                      value={attributes.columns}\n                      onChange={(value) => {\n                        let prevColumn = this.props.attributes.columns;\n                        this.props.updateColumn(prevColumn, value);\n                        this.props.setAttributes({ columns: value });\n                      }}\n                      min={1}\n                      max={6}\n                      step={1}\n                    />\n                    {/* contentWidth */}\n                    <p>\n                      <strong>{__(\"Inner Width\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ToggleControl\n                      label={\n                        contentWidth.enable\n                          ? __(\"Custom Width\", \"unlimited-blocks\")\n                          : __(\"Full Width\", \"unlimited-blocks\")\n                      }\n                      checked={contentWidth.enable}\n                      onChange={(e) => {\n                        let setWidth = { ...contentWidth };\n                        setWidth[\"enable\"] = e;\n                        this.props.setAttributes({ contentWidth: setWidth });\n                      }}\n                    />\n                    {contentWidth.enable && (\n                      <>\n                        <label className=\"normal-label with-radio\">\n                          {__(\"Width\", \"unlimited-blocks\")}\n                          <div className=\"parameter-toggle\">\n                            <span\n                              className={\n                                contentWidth.parameter == \"%\"\n                                  ? \"selected\"\n                                  : null\n                              }\n                              onClick={() => {\n                                let setWidth = { ...contentWidth };\n                                setWidth[\"parameter\"] = \"%\";\n                                this.props.setAttributes({\n                                  contentWidth: setWidth,\n                                });\n                              }}\n                            >\n                              %\n                            </span>\n                            <span\n                              className={\n                                contentWidth.parameter == \"px\"\n                                  ? \"selected\"\n                                  : null\n                              }\n                              onClick={() => {\n                                let setWidth = { ...contentWidth };\n                                setWidth[\"parameter\"] = \"px\";\n                                this.props.setAttributes({\n                                  contentWidth: setWidth,\n                                });\n                              }}\n                            >\n                              px\n                            </span>\n                          </div>\n                        </label>\n                        <RangeControl\n                          value={\n                            contentWidth.parameter == \"%\"\n                              ? contentWidth.width\n                              : contentWidth.widthPx\n                          }\n                          onChange={(value) => {\n                            let setWidth = { ...contentWidth };\n                            if (contentWidth.parameter == \"%\") {\n                              setWidth[\"width\"] = value;\n                            } else {\n                              setWidth[\"widthPx\"] = value;\n                            }\n\n                            this.props.setAttributes({\n                              contentWidth: setWidth,\n                            });\n                          }}\n                          min={contentWidth.parameter == \"%\" ? 1 : 200}\n                          max={contentWidth.parameter == \"%\" ? 100 : 1600}\n                        />\n                      </>\n                    )}\n                  </PanelBody>\n                  <PanelBody\n                    title={__(\"Spacing\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <p>\n                      <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <Dimension\n                      value={{\n                        top: styles.paddingTop,\n                        right: styles.paddingRight,\n                        bottom: styles.paddingBottom,\n                        left: styles.paddingLeft,\n                      }}\n                      isLink={styles.paddingLink}\n                      changeme={(val_) => {\n                        let saveObj = {\n                          paddingTop: val_.top,\n                          paddingRight: val_.right,\n                          paddingBottom: val_.bottom,\n                          paddingLeft: val_.left,\n                        };\n                        if (\"isLink\" in val_) {\n                          saveObj.paddingLink = val_.isLink;\n                        }\n                        this.updateStyle(true, true, saveObj);\n                      }}\n                    />\n                    {/* -----------------------margin--------------- */}\n                    <p>\n                      <strong>{__(\"Margin\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <Dimension\n                      value={{\n                        top: styles.marginTop,\n                        right: styles.marginRight,\n                        bottom: styles.marginBottom,\n                        left: styles.marginLeft,\n                      }}\n                      isLink={styles.marginLink}\n                      changeme={(val_) => {\n                        let saveObj = {\n                          marginTop: val_.top,\n                          marginRight: val_.right,\n                          marginBottom: val_.bottom,\n                          marginLeft: val_.left,\n                        };\n                        if (\"isLink\" in val_) {\n                          saveObj.marginLink = val_.isLink;\n                        }\n                        this.updateStyle(true, true, saveObj);\n                      }}\n                    />\n                  </PanelBody>\n                </>\n              ) : (\n                <>\n                  <PanelBody\n                    title={__(\"Background\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <BackgroundType\n                      value={{\n                        backgroundType: styles.backgroundType,\n                        backgroundImage: styles.backgroundImage,\n                        backgroundImageSize: styles.backgroundImageSize,\n                        backgroundColorType: styles.backgroundColorType,\n                        backgroundColor: styles.backgroundColor,\n                        backgroundImageGradient: styles.backgroundImageGradient,\n                      }}\n                      changeme={(getProperty) => {\n                        console.log(\"getProperty\", getProperty);\n                        this.updateStyle(true, true, getProperty);\n                      }}\n                    />\n\n                    {/* <div className=\"ubl-multiple-select\">\n                      <SelectControl\n                        value={styles.backgroundType}\n                        onChange={(choosen) => {\n                          this.updateStyle(\"backgroundType\", choosen);\n                        }}\n                        options={[\n                          {\n                            value: \"none\",\n                            label: __(\"None\", \"unlimited-blocks\"),\n                          },\n                          {\n                            value: \"color\",\n                            label: __(\"Color\", \"unlimited-blocks\"),\n                          },\n                          {\n                            value: \"image\",\n                            label: __(\"Image\", \"unlimited-blocks\"),\n                          },\n                        ]}\n                      />\n                    </div> */}\n                    {/* {styles.backgroundType == \"image\" && (\n                      <>\n                        <p>\n                          <strong>\n                            {__(\"Background image\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <MediaUpload\n                          allowedType=\"image\"\n                          onSelect={(newImage) => {\n                            this.updateStyle(\n                              \"backgroundImage\",\n                              newImage.sizes.full.url\n                            );\n                          }}\n                          value={styles.backgroundImage}\n                          render={({ open }) => (\n                            <div\n                              onClick={open}\n                              className={`ubl-block-image-uploader ${\n                                \"\" == styles.backgroundImage && \"blank\"\n                              }`}\n                            >\n                              <div>\n                                <i className=\"fas fa-plus\"></i>\n                              </div>\n                              <img src={styles.backgroundImage} />\n                            </div>\n                          )}\n                        />\n                        {styles.backgroundImage != \"\" && (\n                          <div className=\"flex-section\">\n                            <p>{__(\"Background Size\", \"unlimited-blocks\")}</p>\n                            <select\n                              value={styles.backgroundImageSize}\n                              onChange={(e) => {\n                                this.updateStyle(\n                                  \"backgroundImageSize\",\n                                  e.target.value\n                                );\n                              }}\n                            >\n                              <option value=\"auto\">\n                                {__(\"Auto\", \"unlimited-blocks\")}\n                              </option>\n                              <option value=\"cover\">\n                                {__(\"Cover\", \"unlimited-blocks\")}\n                              </option>\n                              <option value=\"contain\">\n                                {__(\"Contain\", \"unlimited-blocks\")}\n                              </option>\n                            </select>\n                          </div>\n                        )}\n                      </>\n                    )} */}\n\n                    {/* {(styles.backgroundType == \"color\" ||\n                      styles.backgroundType == \"image\") && (\n                      <>\n                        <p>\n                          <strong>\n                            {styles.backgroundType == \"image\" &&\n                            styles.backgroundImage != \"\"\n                              ? __(\"Overlay Color\", \"unlimited-blocks\")\n                              : __(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n\n                        <div class=\"ubl-switcher-button-section\">\n                          <span\n                            onClick={() =>\n                              this.updateStyle(\"backgroundColorType\", \"color\")\n                            }\n                            className={\n                              styles.backgroundColorType == \"color\"\n                                ? \"selected\"\n                                : \"\"\n                            }\n                          >\n                            {__(\"Solid\", \"unlimited-blocks\")}\n                          </span>\n                          <span\n                            onClick={() =>\n                              this.updateStyle(\n                                \"backgroundColorType\",\n                                \"gradient\"\n                              )\n                            }\n                            className={\n                              styles.backgroundColorType == \"gradient\"\n                                ? \"selected\"\n                                : \"\"\n                            }\n                          >\n                            {__(\"Gradient\", \"unlimited-blocks\")}\n                          </span>\n                        </div>\n\n                        {\"color\" == styles.backgroundColorType ? (\n                          <ColorPicker\n                            color={styles.backgroundColor}\n                            onChangeComplete={(colorBg) => {\n                              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                              this.updateStyle(\"backgroundColor\", color);\n                            }}\n                          />\n                        ) : (\n                          <GradientPicker\n                            disableCustomGradients={false}\n                            value={styles.backgroundImageGradient}\n                            gradients={UBLGraDientColors}\n                            onChange={(newGradient) => {\n                              this.updateStyle(\n                                \"backgroundImageGradient\",\n                                newGradient\n                              );\n                            }}\n                          />\n                        )}\n                        <RangeControl\n                          label={__(\"Opacity\", \"unlimited-blocks\")}\n                          value={styles.backgroundOpacity}\n                          min={0}\n                          max={1}\n                          step={0.1}\n                          onChange={(e) => {\n                            this.updateStyle(\"backgroundOpacity\", e);\n                          }}\n                        />\n                      </>\n                    )} */}\n                  </PanelBody>\n\n                  <PanelBody\n                    title={__(\"Border and Box Shadow\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <div class=\"ubl-switcher-button-section\">\n                      <span\n                        onClick={() =>\n                          this.setState({ chooseBorderORShadow: \"border\" })\n                        }\n                        className={\n                          this.state.chooseBorderORShadow == \"border\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Border\", \"unlimited-blocks\")}\n                      </span>\n                      <span\n                        onClick={() =>\n                          this.setState({ chooseBorderORShadow: \"boxshadow\" })\n                        }\n                        className={\n                          this.state.chooseBorderORShadow == \"boxshadow\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Box Shadow\", \"unlimited-blocks\")}\n                      </span>\n                    </div>\n                    {this.state.chooseBorderORShadow == \"boxshadow\" ? (\n                      <>\n                        <ToggleControl\n                          label={\n                            styles.shadowEnable\n                              ? __(\"Enable\", \"unlimited-blocks\")\n                              : __(\"Disable\", \"unlimited-blocks\")\n                          }\n                          checked={styles.shadowEnable}\n                          onChange={(e) => this.updateStyle(\"shadowEnable\", e)}\n                        />\n                        {styles.shadowEnable && (\n                          <>\n                            <div className=\"range-and-title-inline\">\n                              <p className=\"title-inline\">\n                                <strong>{__(\"X\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <RangeControl\n                                value={styles.shadowOffsetX}\n                                min={0}\n                                max={20}\n                                onChange={(e) => {\n                                  this.updateStyle(\"shadowOffsetX\", e);\n                                }}\n                              />\n                            </div>\n                            <div className=\"range-and-title-inline\">\n                              <p className=\"title-inline\">\n                                <strong>{__(\"Y\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <RangeControl\n                                value={styles.shadowOffsetY}\n                                min={0}\n                                max={20}\n                                onChange={(e) => {\n                                  this.updateStyle(\"shadowOffsetY\", e);\n                                }}\n                              />\n                            </div>\n                            <div className=\"range-and-title-inline\">\n                              <p className=\"title-inline\">\n                                <strong>\n                                  {__(\"Blur\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <RangeControl\n                                value={styles.shadowBlur}\n                                min={0}\n                                max={20}\n                                onChange={(e) => {\n                                  this.updateStyle(\"shadowBlur\", e);\n                                }}\n                              />\n                            </div>\n                            <div className=\"range-and-title-inline\">\n                              <p className=\"title-inline\">\n                                <strong>\n                                  {__(\"Spread\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <RangeControl\n                                value={styles.shadowSpread}\n                                min={0}\n                                max={20}\n                                onChange={(e) => {\n                                  this.updateStyle(\"shadowSpread\", e);\n                                }}\n                              />\n                            </div>\n                            <p>\n                              <strong>\n                                {__(\"Shadow Color\", \"unlimited-blocks\")}\n                              </strong>\n                            </p>\n                            <ColorPicker\n                              color={styles.shadowColor}\n                              onChangeComplete={(colorBg) => {\n                                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                                this.updateStyle(\"shadowColor\", color);\n                              }}\n                            />\n                          </>\n                        )}\n                        {/* -----------------box shadow----------------- */}\n                      </>\n                    ) : (\n                      <>\n                        <ToggleControl\n                          label={\n                            styles.borderEnable\n                              ? __(\"Disable\", \"unlimited-blocks\")\n                              : __(\"Enable\", \"unlimited-blocks\")\n                          }\n                          checked={styles.borderEnable}\n                          onChange={(e) => this.updateStyle(\"borderEnable\", e)}\n                        />\n                        {styles.borderEnable && (\n                          <div className=\"icon-border-setting\">\n                            <div className=\"ubl-multiple-select\">\n                              <SelectControl\n                                label={__(\"Border Style\", \"unlimited-blocks\")}\n                                value={styles.borderStyle}\n                                onChange={(choosen) => {\n                                  this.updateStyle(\"borderStyle\", choosen);\n                                }}\n                                options={[\n                                  {\n                                    value: \"solid\",\n                                    label: __(\"Solid\", \"unlimited-blocks\"),\n                                  },\n                                  {\n                                    value: \"dotted\",\n                                    label: __(\"Dotted\", \"unlimited-blocks\"),\n                                  },\n                                  {\n                                    value: \"dashed\",\n                                    label: __(\"Dashed\", \"unlimited-blocks\"),\n                                  },\n                                ]}\n                              />\n                            </div>\n                            <RangeControl\n                              label={__(\"Border Radius\", \"unlimited-blocks\")}\n                              value={styles.borderRadius}\n                              min={0}\n                              max={50}\n                              onChange={(e) => {\n                                this.updateStyle(\"borderRadius\", e);\n                              }}\n                            />\n                            <RangeControl\n                              label={__(\"Border Width\", \"unlimited-blocks\")}\n                              value={styles.borderWidth}\n                              min={0}\n                              max={100}\n                              onChange={(e) =>\n                                this.updateStyle(\"borderWidth\", e)\n                              }\n                            />\n                            <ColorPalette\n                              label={__(\"Border Color\", \"unlimited-blocks\")}\n                              value={styles.borderColor}\n                              onChange={(color) =>\n                                this.updateStyle(\"borderColor\", color)\n                              }\n                            />\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </PanelBody>\n                </>\n              )}\n            </>\n          )}\n          <PanelBody\n            title={__(\"Animations\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <Animation\n              value={attributes.additionalClassNames}\n              change={(animate) => {\n                // console.log(\"animation\", animate);\n                setAttributes({ additionalClassNames: animate });\n              }}\n            />\n          </PanelBody>\n        </InspectorControls>\n\n        <div\n          className=\"ubl-blocks-column-wrapper\"\n          id={blockId}\n          // dataListStyle={dataListStyle_}\n        >\n          <div className={WrapperClass} style={wrapperStyles}>\n            <div\n              className=\"ubl-blocks-column-wrapper-2-overlay\"\n              style={overlLayColor}\n            ></div>\n            <div className=\"ubl-blocks-column-wrapper-2-svg\"></div>\n            <div\n              className=\"ubl-blocks-column-wrapper-2-content\"\n              style={contentWidthApply}\n            >\n              <InnerBlocks\n                template={getLayoutTemplate(attributes.columns)}\n                // templateLock={false}\n                // templateLock={`all`}\n                orientation=\"horizontal\"\n                allowedBlocks={ALLOWED_BLOCKS}\n                renderAppender={false}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nexport default compose(\n  withSelect((select, ownProps) => {\n    const { clientId } = ownProps;\n    const { getBlock } = select(blockEditorStore);\n    let getRootBlock = getBlock(clientId);\n\n    // ownProps\n\n    return { wrapper_childrens: getRootBlock.innerBlocks };\n  }),\n  withDispatch((dispatch, ownProps, registry) => {\n    const { getBlocks } = registry.select(blockEditorStore);\n    const { clientId } = ownProps;\n    let innerBlocks = getBlocks(clientId);\n    const { replaceInnerBlocks } = dispatch(blockEditorStore);\n    // update column without index\n    const updateColumn = (prevColumn, newColumns) => {\n      const adding = newColumns > prevColumn;\n      if (adding) {\n        let columnBlock = wp.blocks.createBlock(\n          \"unlimited-blocks/ubl-column-block-column\"\n        );\n        innerBlocks = [...innerBlocks, ...[columnBlock]];\n      } else {\n        // innerBlocks = dropRight([...innerBlocks], 1);\n        innerBlocks = [...innerBlocks].slice(0, -1);\n      }\n      replaceInnerBlocks(clientId, innerBlocks);\n    };\n    // update column without index\n    return {\n      updateColumn: updateColumn,\n    };\n  })\n)(Edit);\n","import \"./style/editor.scss\";\nimport Edit from \"./edit\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nconst { InnerBlocks } = wp.blockEditor;\nimport { setAnimationClass } from \"../block-assets/utility-components/animations/index\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrS = {\n  align: { type: \"string\", default: \"wide\" },\n  columns: {\n    type: \"number\",\n    default: 0,\n  },\n  blockId: {\n    type: \"string\",\n    default: \"\",\n  },\n  listStyle: {\n    type: \"object\",\n    default: {\n      columns: false,\n    },\n  },\n  contentWidth: {\n    type: \"object\",\n    default: {\n      enable: false,\n      width: 100,\n      parameter: \"%\",\n      widthPx: 600,\n    },\n  },\n  // styles added\n  styles: {\n    type: \"object\",\n    default: {\n      // background\n      // image/color/none/gradient\n      backgroundType: \"\",\n      // color/gradient\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"cover\",\n      backgroundImageGradient:\n        \"radial-gradient(rgba(6,147,227,1) 38%,rgb(155,81,224) 80%)\",\n      backgroundOpacity: 1,\n      // border\n      borderEnable: false,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      borderColor: \"#f8c045\",\n      borderRadius: \"\",\n      // box-shadow\n      shadowEnable: false,\n      shadowOffsetX: 1,\n      shadowOffsetY: 0,\n      shadowBlur: 2,\n      shadowSpread: 2,\n      shadowColor: \"#f8c045\",\n      // margin\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n      marginLink: true,\n      // padding\n      paddingTop: 12,\n      paddingBottom: 12,\n      paddingLeft: 12,\n      paddingRight: 12,\n      paddingLink: true,\n    },\n  },\n  additionalClassNames: {\n    type: \"object\",\n    default: {},\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { column_wrapper } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-column-block-wrapper\", {\n  title: column_wrapper.title,\n  description: column_wrapper.description,\n  icon: column_wrapper.icon,\n  keywords: column_wrapper.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrS,\n  example: () => {},\n  getEditWrapperProps: (attributes) => {\n    const { align, columns } = attributes;\n    if (\n      (\"left\" === align ||\n        \"right\" === align ||\n        \"full\" === align ||\n        \"wide\" === align) &&\n      columns > 0\n    ) {\n      return { \"data-align\": align };\n    }\n  },\n  edit: Edit,\n  save: (props) => {\n    const { attributes } = props;\n    const { listStyle, blockId, styles, align, contentWidth } = attributes;\n    let jsonSettingData = attributes.listStyle;\n    jsonSettingData = JSON.stringify(jsonSettingData);\n    let columnWrapperStyle = {};\n    if (align == \"wide\") {\n      columnWrapperStyle[\"max-width\"] = \"1000px\";\n    } else if (align == \"full\") {\n      columnWrapperStyle[\"max-width\"] = \"100%\";\n    } else if (align == \"center\") {\n      columnWrapperStyle[\"max-width\"] = \"650px\";\n    }\n    let ublStyler = {\n      id: blockId,\n      put_res_class: 1,\n      style: columnWrapperStyle,\n    };\n    ublStyler = JSON.stringify(ublStyler);\n    // ----------------===========-------------------\n    let wrapperStyles = {\n      \"margin-top\": styles.marginTop,\n      \"margin-right\": styles.marginRight,\n      \"margin-bottom\": styles.marginBottom,\n      \"margin-left\": styles.marginLeft,\n      \"padding-top\": styles.paddingTop,\n      \"padding-right\": styles.paddingRight,\n      \"padding-bottom\": styles.paddingBottom,\n      \"padding-left\": styles.paddingLeft,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"background-image\": `url(${styles.backgroundImage})`,\n          \"background-size\": styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"box-shadow\": BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderEnable) {\n      let borderStyle = `${styles.borderWidth}px ${styles.borderStyle} ${styles.borderColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          border: borderStyle,\n          \"border-radius\": styles.borderRadius + \"px\",\n        },\n      };\n    }\n    let ublStyler1 = {\n      id: blockId + \"wrap2-\",\n      // put_res_class: 1,\n      style: wrapperStyles,\n    };\n    ublStyler1 = JSON.stringify(ublStyler1);\n\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = \"\";\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { \"background-image\": styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { \"background-color\": styles.backgroundColor };\n      }\n      if (\"image\" == styles.backgroundType) {\n        overlLayColor = {\n          ...overlLayColor,\n          ...{ opacity: styles.backgroundOpacity },\n        };\n      }\n    }\n    let ublStyler2 = {\n      id: blockId + \"overlay-\",\n      style: overlLayColor,\n    };\n    ublStyler2 = JSON.stringify(ublStyler2);\n    // ----------------===========-------------------\n    // content style\n    let contentWidthApply = null;\n    if (contentWidth.enable) {\n      if (contentWidth.parameter == \"%\") {\n        contentWidthApply = { width: contentWidth.width + \"%\" };\n      } else {\n        contentWidthApply = {\n          width: contentWidth.widthPx + \"px\",\n          \"max-width\": \"100%\",\n        };\n      }\n    }\n    let WrapperClass = `ubl-blocks-column-wrapper-2 ${blockId + \"wrap2-\"}`;\n    WrapperClass = setAnimationClass(\n      attributes.additionalClassNames,\n      WrapperClass\n    );\n\n    let mainWrapperClass = [\n      \"align\" + align,\n      \"ubl-blocks-column-wrapper\",\n      blockId,\n    ];\n    mainWrapperClass = mainWrapperClass.join(\" \");\n    return (\n      <div\n        id={blockId}\n        className={mainWrapperClass}\n        ubl-blocks-styler={ublStyler}\n        data-ubl-column-width={jsonSettingData}\n      >\n        <div className={WrapperClass} ubl-blocks-styler={ublStyler1}>\n          <div\n            className={`ubl-blocks-column-wrapper-2-overlay ${\n              blockId + \"overlay-\"\n            }`}\n            ubl-blocks-styler={ublStyler2}\n          ></div>\n          <div className=\"ubl-blocks-column-wrapper-2-svg\"></div>\n          <div\n            className=\"ubl-blocks-column-wrapper-2-content\"\n            style={contentWidthApply}\n          >\n            <InnerBlocks.Content />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  AlignmentToolbar,\n  BlockControls,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  SelectControl,\n  __experimentalGradientPicker as GradientPicker,\n  // Toolbar,\n  // ToolbarItem,\n  // Button,\n  // ResizableBox,\n  // ResponsiveWrapper\n} from \"@wordpress/components\";\nimport fontFamily from \"../block-assets/font-family\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\n\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { icon_block } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/icon-block\", {\n  title: icon_block.title,\n  description: icon_block.description,\n  icon: icon_block.icon,\n  keywords: icon_block.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: {\n    iconClass: {\n      type: \"string\",\n      default: \"fab fa-wordpress-simple\",\n    },\n    iconColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconBgColor: {\n      type: \"object\",\n      default: {\n        type: \"color\",\n        color: \"#EEF6F9\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n    },\n    titleColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconFontsize: {\n      type: \"number\",\n      default: 55,\n    },\n    titleFontsize: {\n      type: \"number\",\n      default: 24,\n    },\n    titleTxt: {\n      type: \"string\",\n      default: __(\"Icon Title\", \"unlimited-blocks\"),\n    },\n    titleArrenge: {\n      type: \"string\",\n      default: \"column\",\n    },\n    itemAlign: {\n      type: \"text\",\n      default: \"center\",\n    },\n    titleMarginTop: {\n      type: \"number\",\n      defalut: 18,\n    },\n    titleMarginRight: {\n      type: \"number\",\n      default: 0,\n    },\n    titleMarginBottom: {\n      type: \"number\",\n      default: 0,\n    },\n    titleMarginLeft: {\n      type: \"number\",\n      default: 11,\n    },\n    titleOnOff: {\n      type: \"boolean\",\n      default: true,\n    },\n    iconPaddingTop: {\n      type: \"number\",\n      default: 16,\n    },\n    iconPaddingRight: {\n      type: \"number\",\n      default: 20,\n    },\n    titleTag: {\n      type: \"string\",\n      default: \"p\",\n    },\n    titleFF: {\n      type: \"string\",\n      default: \"Ubuntu Mono\",\n    },\n    iconBorder: {\n      type: \"boolean\",\n      default: false,\n    },\n    iconBorderWidth: {\n      type: \"number\",\n      default: 2,\n    },\n    iconBorderRadius: {\n      type: \"number\",\n      default: 50,\n    },\n    iconBorderColor: {\n      type: \"string\",\n      default: \"#ffa600\",\n    },\n    iconSpace: {\n      type: \"number\",\n      default: 79,\n    },\n    containerBorder: {\n      type: \"object\",\n      default: {\n        enable: true,\n        type: \"solid\",\n        color: \"yellow\",\n        width: 1,\n        radius: 0,\n      },\n    },\n  },\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFF,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      itemAlign,\n      titleOnOff,\n      iconPaddingTop,\n      iconPaddingRight,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n      containerBorder,\n    } = attributes;\n\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    // icon container style backgroundColor\n    let containerStyleBgColor = {\n      \"flex-direction\": titleArrenge,\n      paddingTop: iconPaddingTop + \"px\",\n      paddingRight: iconPaddingRight + \"px\",\n      paddingBottom: iconPaddingTop + \"px\",\n      paddingLeft: iconPaddingRight + \"px\",\n    };\n    //icon container border\n    if (containerBorder.enable) {\n      containerStyleBgColor[\n        \"border\"\n      ] = `${containerBorder.width}px ${containerBorder.type} ${containerBorder.color}`;\n      containerStyleBgColor[\"border-radius\"] = containerBorder.radius + \"px\";\n    }\n    // bg color solid or gradient\n    let bgColorOrGRadient = {};\n    if (iconBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: iconBgColor.color };\n    } else {\n      bgColorOrGRadient = { backgroundImage: iconBgColor.gradient };\n    }\n    containerStyleBgColor = {\n      ...containerStyleBgColor,\n      ...bgColorOrGRadient,\n    };\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Icon Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Choose Icon\", \"unlimited-blocks\")}</strong>\n            </p>\n\n            <div\n              ref={iconReff}\n              className={`wpgt-radio-wrap ${\n                activeIconContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                className=\"selected-icon\"\n                onClick={(e) => {\n                  // let set__container = !activeIconContainer;\n                  activeIconContainerSet(true);\n                }}\n              >\n                <i className={iconClass}></i>\n                <div className=\"search-container\">\n                  <i className=\"fas fa-search\"></i>\n                  <input\n                    type=\"text\"\n                    onChange={(e) => {\n                      let value_ = e.target.value;\n                      if (value_ != \"\") {\n                        let newAr = icons_.filter(\n                          (checkStr) => checkStr.search(value_) != -1\n                        );\n                        if (newAr.length) {\n                          setIconList(newAr);\n                        }\n                      } else {\n                        setIconList(icons_);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n              <div\n                className=\"wpgt-radio-container\"\n                onChange={(e) => {\n                  setAttributes({ iconClass: e.target.value });\n                }}\n              >\n                {iconList.map((iconValue) => {\n                  return (\n                    <div className=\"wpgt-radio-wrapper\">\n                      <input\n                        id={\"wpgt-Radio-\" + iconValue}\n                        type=\"radio\"\n                        name=\"wpgt-choose-icon\"\n                        className=\"radio-input\"\n                        value={iconValue}\n                      />\n                      <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                        <i className={iconValue}></i>\n                      </label>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <p>\n              <strong>{__(\"Icon Position\", \"unlimited-blocks\")}</strong>\n            </p>\n            <SelectControl\n              value={titleArrenge} // e.g: value = [ 'a', 'c' ]\n              onChange={(e) => {\n                setAttributes({\n                  titleArrenge: e,\n                  titleMarginTop: 0,\n                  titleMarginRight: 0,\n                  titleMarginBottom: 0,\n                  titleMarginLeft: 0,\n                });\n              }}\n              options={[\n                { value: null, label: \"Select a User\", disabled: true },\n                { value: \"unset\", label: \"Left\" },\n                { value: \"row-reverse\", label: \"Right\" },\n                { value: \"column\", label: \"Top\" },\n                { value: \"column-reverse\", label: \"Bottom\" },\n              ]}\n            />\n            <p>\n              <strong>\n                {__(\"Space Between Icon and Title\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            {titleArrenge == \"column\" && (\n              <RangeControl\n                label={__(\"Top\", \"unlimited-blocks\")}\n                value={titleMarginTop}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginTop: e })}\n              />\n            )}\n            {titleArrenge == \"row-reverse\" && (\n              <RangeControl\n                label={__(\"Right\", \"unlimited-blocks\")}\n                value={titleMarginRight}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginRight: e })}\n              />\n            )}\n            {titleArrenge == \"column-reverse\" && (\n              <RangeControl\n                label={__(\"Bottom\", \"unlimited-blocks\")}\n                value={titleMarginBottom}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginBottom: e })}\n              />\n            )}\n            {titleArrenge == \"unset\" && (\n              <RangeControl\n                label={__(\"Left\", \"unlimited-blocks\")}\n                value={titleMarginLeft}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginLeft: e })}\n              />\n            )}\n\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={iconFontsize}\n              min={0}\n              max={100}\n              onChange={(e) => setAttributes({ iconFontsize: e })}\n            />\n            <p>\n              <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                iconBorder\n                  ? __(\"Disable\", \"unlimited-blocks\")\n                  : __(\"Enable\", \"unlimited-blocks\")\n              }\n              checked={iconBorder}\n              onChange={(e) => setAttributes({ iconBorder: e })}\n            />\n            {iconBorder && (\n              <div className=\"icon-border-setting\">\n                <RangeControl\n                  label={__(\"Border Width\", \"unlimited-blocks\")}\n                  value={iconBorderWidth}\n                  min={0}\n                  max={100}\n                  onChange={(e) => setAttributes({ iconBorderWidth: e })}\n                />\n                <RangeControl\n                  label={__(\"Border Radius\", \"unlimited-blocks\")}\n                  value={iconBorderRadius}\n                  min={0}\n                  max={50}\n                  onChange={(e) => setAttributes({ iconBorderRadius: e })}\n                />\n                <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n                <ColorPalette\n                  onChange={(color) =>\n                    setAttributes({ iconBorderColor: color })\n                  }\n                />\n                <RangeControl\n                  label={__(\"Icon Space\", \"unlimited-blocks\")}\n                  value={iconSpace}\n                  min={0}\n                  max={200}\n                  onChange={(e) => setAttributes({ iconSpace: e })}\n                />\n              </div>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Title Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                titleOnOff\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={titleOnOff}\n              onChange={(e) => setAttributes({ titleOnOff: e })}\n            />\n            <p>\n              <strong>{__(\"Choose Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <SelectControl\n              value={titleTag} // e.g: value = [ 'a', 'c' ]\n              onChange={(e) => setAttributes({ titleTag: e })}\n              options={[\n                {\n                  value: null,\n                  label: __(\"Choose Tag\", \"unlimited-blocks\"),\n                  disabled: true,\n                },\n                { value: \"h1\", label: \"h1\" },\n                { value: \"h2\", label: \"h2\" },\n                { value: \"h3\", label: \"h3\" },\n                { value: \"h4\", label: \"h4\" },\n                { value: \"h5\", label: \"h5\" },\n                { value: \"h6\", label: \"h6\" },\n                { value: \"p\", label: \"p\" },\n              ]}\n            />\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={titleFontsize}\n              min={0}\n              max={100}\n              onChange={(e) => setAttributes({ titleFontsize: e })}\n            />\n            {/* font family */}\n            <div className=\"THK-font-family-wrapper\">\n              <p>\n                <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div\n                ref={familyRef2}\n                className={`font-family-drop-down ${\n                  activeFamilyContainer2 ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  onClick={() => {\n                    let applyActive = !activeFamilyContainer2;\n                    activeFamilyDrop2(applyActive);\n                  }}\n                  className=\"font-family-show\"\n                >\n                  <span style={{ fontFamily: titleFF }}>\n                    {titleFF\n                      ? titleFF\n                      : __(\"Choose Family\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <div className=\"family-items\">\n                  {fontFamily.map((family, key_) => {\n                    return (\n                      <span\n                        onClick={() => setAttributes({ titleFF: family })}\n                        style={{ fontFamily: family }}\n                      >\n                        {family}\n                      </span>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n            {/* font family */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Color Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n                className={iconBgColor.type == \"color\" ? \"selected\" : \"\"}\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n                className={iconBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == iconBgColor.type ? (\n              <ColorPicker\n                color={iconBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"color\"] = color;\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={iconBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n              />\n            )}\n            {/* bg color  */}\n\n            <p>\n              <strong>{__(\"Icon Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              onChange={(color) => setAttributes({ iconColor: color })}\n            />\n            <p>\n              <strong>{__(\"Title Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette onChange={(e) => setAttributes({ titleColor: e })} />\n          </PanelBody>\n\n          <PanelBody\n            title={__(\"Container Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              label={__(\"Top & Bottom\", \"unlimited-blocks\")}\n              value={iconPaddingTop}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ iconPaddingTop: e })}\n            />\n            <RangeControl\n              label={__(\"Left & Right\", \"unlimited-blocks\")}\n              value={iconPaddingRight}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ iconPaddingRight: e })}\n            />\n            <p>\n              <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                containerBorder.enable\n                  ? __(\"Disable\", \"unlimited-blocks\")\n                  : __(\"Enable\", \"unlimited-blocks\")\n              }\n              checked={containerBorder.enable}\n              onChange={(e) => {\n                let settingBrder = { ...containerBorder };\n                settingBrder[\"enable\"] = e;\n                setAttributes({ containerBorder: settingBrder });\n              }}\n            />\n            {containerBorder.enable && (\n              <div className=\"icon-border-setting\">\n                <div className=\"ubl-multiple-select\">\n                  <SelectControl\n                    label={__(\"Border Style\", \"unlimited-blocks\")}\n                    value={containerBorder.type}\n                    onChange={(choosen) => {\n                      let settingBrder = { ...containerBorder };\n                      settingBrder[\"type\"] = choosen;\n                      setAttributes({ containerBorder: settingBrder });\n                    }}\n                    options={[\n                      {\n                        value: \"solid\",\n                        label: __(\"Solid\", \"unlimited-blocks\"),\n                      },\n                      {\n                        value: \"dotted\",\n                        label: __(\"Dotted\", \"unlimited-blocks\"),\n                      },\n                      {\n                        value: \"dashed\",\n                        label: __(\"Dashed\", \"unlimited-blocks\"),\n                      },\n                    ]}\n                  />\n                </div>\n                <RangeControl\n                  label={__(\"Border Radius\", \"unlimited-blocks\")}\n                  value={containerBorder.redius}\n                  min={0}\n                  max={50}\n                  onChange={(e) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"radius\"] = e;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n                <RangeControl\n                  label={__(\"Border Width\", \"unlimited-blocks\")}\n                  value={containerBorder.width}\n                  min={0}\n                  max={100}\n                  onChange={(e) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"width\"] = e;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n                <ColorPalette\n                  label={__(\"Border Color\", \"unlimited-blocks\")}\n                  value={containerBorder.color}\n                  onChange={(color) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"color\"] = color;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n              </div>\n            )}\n          </PanelBody>\n        </InspectorControls>\n        <>\n          <BlockControls>\n            <AlignmentToolbar\n              value={itemAlign}\n              onChange={(e) => {\n                let side =\n                  e == \"left\" ? \"left\" : e == \"right\" ? \"flex-end\" : \"center\";\n                setAttributes({ itemAlign: side });\n              }}\n            />\n            {/* <Toolbar label=\"Options\">\n              <ToolbarItem as={Button}>I am a toolbar button</ToolbarItem>\n              <ToolbarItem as=\"button\">I am another toolbar button</ToolbarItem>\n            </Toolbar> */}\n          </BlockControls>\n          <div\n            className=\"themehunk-icon-block\"\n            style={{\n              \"justify-content\": itemAlign,\n            }}\n          >\n            <div style={containerStyleBgColor}>\n              <div className=\"icon-container\" style={borderStyle}>\n                <i\n                  style={{\n                    color: iconColor,\n                    fontSize: iconFontsize + \"px\",\n                  }}\n                  className={iconClass}\n                ></i>\n              </div>\n              {titleOnOff && (\n                <div className=\"text-container\">\n                  <RichText\n                    key=\"editable\"\n                    tagName={titleTag}\n                    placeholder=\"Icon Title\"\n                    allowedFormats={[]}\n                    value={titleTxt}\n                    onChange={(e) => setAttributes({ titleTxt: e })}\n                    style={{\n                      color: titleColor,\n                      fontSize: titleFontsize + \"px\",\n                      marginTop: titleMarginTop + \"px\",\n                      marginRight: titleMarginRight + \"px\",\n                      marginBottom: titleMarginBottom + \"px\",\n                      marginLeft: titleMarginLeft + \"px\",\n                      fontFamily: titleFF,\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      </>\n    );\n  },\n  save: ({ attributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      titleFF,\n      itemAlign,\n      titleOnOff,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n      iconPaddingTop,\n      iconPaddingRight,\n      containerBorder,\n    } = attributes;\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n    // icon container style backgroundColor\n    let containerStyleBgColor = {\n      \"flex-direction\": titleArrenge,\n      paddingTop: iconPaddingTop + \"px\",\n      paddingRight: iconPaddingRight + \"px\",\n      paddingBottom: iconPaddingTop + \"px\",\n      paddingLeft: iconPaddingRight + \"px\",\n    };\n    //icon container border\n    if (containerBorder.enable) {\n      containerStyleBgColor[\n        \"border\"\n      ] = `${containerBorder.width}px ${containerBorder.type} ${containerBorder.color}`;\n      containerStyleBgColor[\"border-radius\"] = containerBorder.radius + \"px\";\n    }\n    // bg color solid or gradient\n    let bgColorOrGRadient = {};\n    if (iconBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: iconBgColor.color };\n    } else {\n      bgColorOrGRadient = { backgroundImage: iconBgColor.gradient };\n    }\n    containerStyleBgColor = {\n      ...containerStyleBgColor,\n      ...bgColorOrGRadient,\n    };\n    return (\n      <div\n        className=\"themehunk-icon-block\"\n        style={{\n          \"justify-content\": itemAlign,\n        }}\n      >\n        <div style={containerStyleBgColor}>\n          <div className=\"icon-container\" style={borderStyle}>\n            <i\n              style={{\n                color: iconColor,\n                fontSize: iconFontsize + \"px\",\n              }}\n              className={iconClass}\n            ></i>\n          </div>\n          {titleOnOff && (\n            <div className=\"text-container\">\n              <RichText.Content\n                tagName={titleTag}\n                value={titleTxt}\n                style={{\n                  color: titleColor,\n                  fontSize: titleFontsize + \"px\",\n                  marginTop: titleMarginTop + \"px\",\n                  marginRight: titleMarginRight + \"px\",\n                  marginBottom: titleMarginBottom + \"px\",\n                  marginLeft: titleMarginLeft + \"px\",\n                  fontFamily: titleFF,\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      thumbnail: \"primary\",\n      blockTitle: \"title\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          {post.feature_image && post.feature_image != \"\" && thumbnail_.enable && (\n            <div className=\"featured-image\">\n              <img\n                style={{\n                  borderRadius: thumbnail_.borderRadius + \"px\",\n                }}\n                src={post.feature_image}\n              />\n            </div>\n          )}\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n  navCategory = (cateTrue, title_) => {\n    let category_ = this.state.category;\n    let makingCate = [];\n    if ((category_ && category_.length) || title_.enable) {\n      // under line\n      let mUnderLine = this.props.attributes.meta_style[0];\n      let mUnderLineSt = mUnderLine.underLine\n        ? { borderColor: mUnderLine.underLineColor }\n        : null;\n      // choosen category only show in nav\n      if (cateTrue.enable && category_ && category_.length) {\n        if (this.props.attributes.postCategories.length) {\n          this.props.attributes.postCategories.map((choosenCate) => {\n            category_.map((existCate) => {\n              if (existCate.slug == choosenCate) {\n                makingCate.push(existCate);\n                return;\n              }\n            });\n          });\n        } else {\n          makingCate = category_;\n        }\n      }\n      return (\n        <div className=\"navigation_\" style={mUnderLineSt}>\n          {title_.enable && (\n            <div className=\"nav-heading\">\n              <RichText\n                allowedFormats={[]}\n                key=\"editable\"\n                onChange={(e) =>\n                  this.updateObj(\n                    \"title\",\n                    \"value\",\n                    this.props.attributes.title,\n                    e\n                  )\n                }\n                className=\"post-heading\"\n                tagName=\"h4\"\n                value={title_.value}\n                style={{\n                  backgroundColor: title_.bgColor,\n                  color: title_.color,\n                  fontSize: title_.fontSize + \"px\",\n                }}\n              />\n            </div>\n          )}\n          {cateTrue.enable && makingCate.length != 0 && (\n            <>\n              <div class=\"nav-linear-items\">\n                <ul>\n                  <li class=\"cat-item cat-item-all\">\n                    <a\n                      style={{\n                        fontSize: cateTrue.fontSize + \"px\",\n                        color: cateTrue.color,\n                        backgroundColor: cateTrue.backgroundColor,\n                      }}\n                      href=\"#\"\n                    >\n                      {__(\"all\", \"unlimited-blocks\")}\n                    </a>\n                  </li>\n                  {makingCate.map((cateV, cKey) => {\n                    return (\n                      cKey <= 3 && (\n                        <li class=\"cat-item\">\n                          <a\n                            style={{\n                              fontSize: cateTrue.fontSize + \"px\",\n                              color: cateTrue.color,\n                              backgroundColor: cateTrue.backgroundColor,\n                            }}\n                            href=\"#\"\n                          >\n                            {cateV.name}\n                          </a>\n                        </li>\n                      )\n                    );\n                  })}\n                </ul>\n              </div>\n              {makingCate.length >= 5 && (\n                <div class=\"nav-drop-items\">\n                  <span\n                    style={{\n                      fontSize: cateTrue.fontSize + \"px\",\n                      color: cateTrue.color,\n                      backgroundColor: cateTrue.backgroundColor,\n                    }}\n                    class=\"more-opener\"\n                  >\n                    {__(\"More\", \"unlimited-blocks\")}\n                    <i class=\"fas fa-chevron-down\"></i>\n                  </span>\n                  <ul>\n                    {makingCate.map((cateV, cKey) => {\n                      return (\n                        cKey >= 4 && (\n                          <li class=\"cat-item\">\n                            <a\n                              style={{\n                                fontSize: cateTrue.fontSize + \"px\",\n                                color: cateTrue.color,\n                                backgroundColor: cateTrue.backgroundColor,\n                              }}\n                              href=\"#\"\n                            >\n                              {cateV.name}\n                            </a>\n                          </li>\n                        )\n                      );\n                    })}\n                  </ul>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      );\n    }\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    // console.log(\"category props->\", this.props);\n    const { posts, category, totalPost } = this.state;\n    // console.log(\"state props posts->\", this.state);\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      heading2,\n      excerpt2,\n      author2,\n      date2,\n      showCate2,\n      postCategories,\n      meta_style,\n      meta_style2,\n      thumbnail2,\n      title,\n      categorynav,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let thumbnail2_ = thumbnail2[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody title=\"Block Title / Navigation\" initialOpen={false}>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ blockTitle: \"title\" })}\n                className={this.state.blockTitle == \"title\" ? \"selected\" : \"\"}\n              >\n                {__(\"Title\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ blockTitle: \"nav\" })}\n                className={this.state.blockTitle == \"nav\" ? \"selected\" : \"\"}\n              >\n                {__(\"Navigation\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.blockTitle == \"title\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    title_.enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={title_.enable}\n                  onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n                />\n                {title_.enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={title_.fontSize}\n                      min={5}\n                      max={50}\n                      onChange={(e) => {\n                        this.updateObj(\"title\", \"fontSize\", title, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={title_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"title\", \"color\", title, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={title_.bgColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\"title\", \"bgColor\", title, color);\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    categorynav[0].enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={categorynav[0].enable}\n                  onChange={(e) =>\n                    this.updateObj(\"categorynav\", \"enable\", categorynav, e)\n                  }\n                />\n                {categorynav[0].enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={categorynav[0].fontSize}\n                      min={5}\n                      max={50}\n                      onChange={(e) => {\n                        this.updateObj(\n                          \"categorynav\",\n                          \"fontSize\",\n                          categorynav,\n                          e\n                        );\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={categorynav[0].color}\n                      onChange={(color) =>\n                        this.updateObj(\n                          \"categorynav\",\n                          \"color\",\n                          categorynav,\n                          color\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={categorynav[0].bgColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"categorynav\",\n                          \"backgroundColor\",\n                          categorynav,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* under line */}\n            {(title_.enable || categorynav[0].enable) && (\n              <>\n                <p>\n                  <strong>{__(\"Under Line\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={meta_style_.underLine ? \"Show\" : \"Hide\"}\n                  checked={meta_style_.underLine}\n                  onChange={(e) =>\n                    this.updateObj(\"meta_style\", \"underLine\", meta_style, e)\n                  }\n                />\n                {meta_style_.underLine && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={meta_style_.underLineColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"meta_style\",\n                          \"underLineColor\",\n                          meta_style,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>\n                {__(\"Number of Post Display\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n            <p>\n              <strong>{__(\"Layout Position\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"meta_style\",\n                    \"layoutPosition\",\n                    meta_style,\n                    \"left\"\n                  )\n                }\n                className={\n                  meta_style_.layoutPosition == \"left\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Left\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"meta_style\",\n                    \"layoutPosition\",\n                    meta_style,\n                    \"right\"\n                  )\n                }\n                className={\n                  meta_style_.layoutPosition == \"right\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Right\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p>\n              <strong>\n                {__(\"Block Background Color\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ heading: \"primary\" })}\n                className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ heading: \"secondary\" })}\n                className={this.state.heading == \"secondary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ excerpt: \"primary\" })}\n                className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ excerpt: \"secondary\" })}\n                className={this.state.excerpt == \"secondary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={excerpt_.enable ? \"Show\" : \"Hide\"}\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>\n                        {__(\"Number of words\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>\n                        {__(\"Number of words\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                thumbnail_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={thumbnail_.enable}\n              onChange={(e) =>\n                this.updateObj(\"thumbnail\", \"enable\", thumbnail, e)\n              }\n            />\n            {thumbnail_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Meta\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ metaChoose: \"primary\" })}\n                className={this.state.metaChoose == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                className={\n                  this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Color\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Color\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <p>\n                <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n              </p>\n              <RangeControl\n                value={meta_style_.npBgfontSize}\n                min={1}\n                max={30}\n                onChange={(e) => {\n                  this.updateObj(\"meta_style\", \"npBgfontSize\", meta_style, e);\n                }}\n              />\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={meta_style_.npColor}\n                onChange={(color) =>\n                  this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                }\n              />\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPicker\n                color={meta_style_.npBgColor}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  this.updateObj(\"meta_style\", \"npBgColor\", meta_style, color);\n                }}\n              />\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-two-post-wrapper\" style={bgColorOrGRadient}>\n            {this.navCategory(categorynav[0], title_)}\n            <div\n              className={`ubl-post-two-column column-layout-${meta_style_.layoutPosition}`}\n            >\n              <div className=\"column-one\">\n                {this.returnHtml(\n                  posts[0],\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_\n                )}\n              </div>\n              <div className=\"column-two\">\n                {posts.length > 1 &&\n                  posts.map((post, index__) => {\n                    return (\n                      index__ != 0 &&\n                      this.returnHtml(\n                        post,\n                        heading2_,\n                        author2_,\n                        date2_,\n                        meta_style2_,\n                        thumbnail_,\n                        showCate2_,\n                        excerpt2_,\n                        false\n                      )\n                    );\n                  })}\n              </div>\n            </div>\n            {posts && posts.length > 0 && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_category_layout } = blocksDetail;\nconst attrSave = {};\nregisterBlockType(\"unlimited-blocks/ubl-post-tc\", {\n  title: post_category_layout.title,\n  description: post_category_layout.description,\n  icon: post_category_layout.icon,\n  keywords: post_category_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let { thumbnail } = this.props.attributes;\n    let sendData = {};\n    if (thumbnail[0].typeShow == \"1\") {\n      sendData[\"featured_image\"] = 1;\n    }\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      numberOfColumn,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Column\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfColumn}\n              min={2}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfColumn: e });\n              }}\n            />\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={24}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, {\n                  numberOfPosts: e,\n                  featured_image: this.props.attributes.thumbnail[0].typeShow,\n                });\n              }}\n            />\n            <ToggleControl\n              label={__(\"Left Border\", \"unlimited-blocks\")}\n              checked={meta_style_.left_border}\n              onChange={(e) =>\n                this.updateObj(\"meta_style\", \"left_border\", meta_style, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Block Background Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <select\n              value={thumbnail_.typeShow}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                this.updateObj(\"thumbnail\", \"typeShow\", thumbnail, value_);\n                filterPostInit(this, {\n                  featured_image: value_,\n                });\n              }}\n            >\n              <option value=\"all\">{__(\"All Post\", \"unlimited-blocks\")}</option>\n              <option value=\"1\">\n                {__(\"Only Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n            </select>\n\n            {(thumbnail_.typeShow == \"all\" || thumbnail_.typeShow == \"1\") && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: this.props.attributes.thumbnail[0]\n                        .typeShow,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {totalPost && totalPost > posts.length && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Pagination Number\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      meta_style_.npPagination\n                        ? __(\"Pagination On\", \"unlimited-blocks\")\n                        : __(\"Next Previous On\", \"unlimited-blocks\")\n                    }\n                    checked={meta_style_.npPagination}\n                    onChange={(e) =>\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npPagination\",\n                        meta_style,\n                        e\n                      )\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-block-post\" style={bgColorOrGRadient}>\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-${numberOfColumn} ${\n                meta_style_.left_border && \"left-border\"\n              }`}\n            >\n              {posts.map((post) => {\n                let postAuthor =\n                  author_ && author_.enable ? post.author : false;\n                return thumbnail_.typeShow == \"1\" &&\n                  post.feature_image != \"\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      <div className=\"featured-image\">\n                        <img\n                          style={{\n                            borderRadius: thumbnail_.borderRadius + \"px\",\n                          }}\n                          src={post.feature_image}\n                        />\n                      </div>\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize + \"px\",\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize + \"px\",\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{\n                              color: excerpt_.color,\n                              fontSize: excerpt_.fontSize + \"px\",\n                            }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : thumbnail_.typeShow != \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      {post.feature_image &&\n                        post.feature_image != \"\" &&\n                        thumbnail_.typeShow == \"all\" && (\n                          <div className=\"featured-image\">\n                            <img\n                              style={{\n                                borderRadius: thumbnail_.borderRadius + \"px\",\n                              }}\n                              src={post.feature_image}\n                            />\n                          </div>\n                        )}\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize,\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{ color: excerpt_.color }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : (\n                  \"\"\n                );\n              })}\n            </div>\n            {meta_style_.npEnable && totalPost && totalPost > posts.length ? (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                {meta_style_.npPagination && (\n                  <section className=\"paginationNumbers\">\n                    {[1, 2, 3].map((pagiV) => {\n                      return (\n                        <div\n                          className=\"ubl-image-section-np  pagination\"\n                          style={{\n                            fontSize: meta_style_.npBgfontSize,\n                            color: meta_style_.npColor,\n                            backgroundColor: meta_style_.npBgColor,\n                          }}\n                        >\n                          {pagiV}\n                        </div>\n                      );\n                    })}\n                    <div class=\"dots pagination\">\n                      <span>...</span>\n                    </div>\n                    <div\n                      className=\"ubl-image-section-np  pagination\"\n                      style={{\n                        fontSize: meta_style_.npBgfontSize,\n                        color: meta_style_.npColor,\n                        backgroundColor: meta_style_.npBgColor,\n                      }}\n                    >\n                      4\n                    </div>\n                  </section>\n                )}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\n\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_grid_layouts } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-grid\", {\n  title: post_grid_layouts.title,\n  description: post_grid_layouts.description,\n  icon: post_grid_layouts.icon,\n  keywords: post_grid_layouts.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let layout_ = layout[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // if number of post sum\n    if (\n      (numberOfPosts == 3 || numberOfPosts == 5 || layout_.type == 3) &&\n      (this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\")\n    ) {\n      this.setState({\n        metaChoose: \"primary\",\n        excerpt: \"primary\",\n        heading: \"primary\",\n      });\n    }\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>{__(\"Choose Layout\", \"unlimited-blocks\")}</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {layout_.type == 3 && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post ubl-post-five-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`parent-column-two column-count  post-five-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 2 ? (\n                <>\n                  <div>\n                    <div className=\"column-count column-count-2\">\n                      {posts.map((post, in_) => {\n                        return (\n                          in_ < 4 &&\n                          this.returnHtml(\n                            post,\n                            heading2_,\n                            author2_,\n                            date2_,\n                            meta_style2_,\n                            showCate2_,\n                            excerpt2_,\n                            showTag2_,\n                            layout_\n                          )\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"column-count column-count-1\">\n                      {posts.length > 4 &&\n                        this.returnHtml(\n                          posts[4],\n                          heading_,\n                          author_,\n                          date_,\n                          meta_style_,\n                          showCate_,\n                          excerpt_,\n                          showTag_,\n                          layout_\n                        )}\n                    </div>\n                  </div>\n                </>\n              ) : layout_.type == 3 ? (\n                posts.map((post, in_) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : (\n                <>\n                  <div>\n                    <div className=\"column-count column-count-1\">\n                      {this.returnHtml(\n                        posts[0],\n                        heading_,\n                        author_,\n                        date_,\n                        meta_style_,\n                        showCate_,\n                        excerpt_,\n                        showTag_,\n                        layout_\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"column-count column-count-2\">\n                      {posts.map((post, in_) => {\n                        return (\n                          in_ != 0 &&\n                          this.returnHtml(\n                            post,\n                            heading2_,\n                            author2_,\n                            date2_,\n                            meta_style2_,\n                            showCate2_,\n                            excerpt2_,\n                            showTag2_,\n                            layout_\n                          )\n                        );\n                      })}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_five_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-five-post\", {\n  title: post_image_layout_five_post.title,\n  description: post_image_layout_five_post.description,\n  icon: post_image_layout_five_post.icon,\n  keywords: post_image_layout_five_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    let layout_ = layout[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // if number of post sum\n    if (layout_.type == 3 || layout_.type == 4) {\n      if (\n        this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\"\n      ) {\n        this.setState({\n          metaChoose: \"primary\",\n          excerpt: \"primary\",\n          heading: \"primary\",\n        });\n      }\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>Font Weight</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>Choose Layout</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n                <option value=\"4\">{__(\"Layout Four\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {(layout_.type == 3 || layout_.type == 4) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* <ColorPicker\n              color={layout_.overlayColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateObj(\"layout\", \"overlayColor\", layout, color);\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post ubl-post-four-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-2 post-four-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 3 || layout_.type == 4 ? (\n                posts.map((post) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : layout_.type == 2 ? (\n                <>\n                  <div className=\"column-one\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading2_,\n                      author2_,\n                      date2_,\n                      meta_style2_,\n                      showCate2_,\n                      excerpt2_,\n                      showTag2_,\n                      layout_\n                    )}\n                    <div>\n                      {posts.length >= 2 &&\n                        posts.map((post, in_) => {\n                          return (\n                            in_ != 0 &&\n                            in_ <= 2 &&\n                            this.returnHtml(\n                              post,\n                              heading2_,\n                              author2_,\n                              date2_,\n                              meta_style2_,\n                              showCate2_,\n                              excerpt2_,\n                              showTag2_,\n                              layout_\n                            )\n                          );\n                        })}\n                    </div>\n                  </div>\n                  <div className=\"column-two\">\n                    {posts.length > 2 &&\n                      this.returnHtml(\n                        posts[3],\n                        heading_,\n                        author_,\n                        date_,\n                        meta_style_,\n                        showCate_,\n                        excerpt_,\n                        showTag_,\n                        layout_\n                      )}\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"column-one\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading_,\n                      author_,\n                      date_,\n                      meta_style_,\n                      showCate_,\n                      excerpt_,\n                      showTag_,\n                      layout_\n                    )}\n                  </div>\n                  <div className=\"column-two\">\n                    {posts.length >= 1 &&\n                      this.returnHtml(\n                        posts[1],\n                        heading2_,\n                        author2_,\n                        date2_,\n                        meta_style2_,\n                        showCate2_,\n                        excerpt2_,\n                        showTag2_,\n                        layout_\n                      )}\n                    <div>\n                      {posts.length >= 2 &&\n                        posts.map((post, in_) => {\n                          return (\n                            in_ >= 2 &&\n                            this.returnHtml(\n                              post,\n                              heading2_,\n                              author2_,\n                              date2_,\n                              meta_style2_,\n                              showCate2_,\n                              excerpt2_,\n                              showTag2_,\n                              layout_\n                            )\n                          );\n                        })}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_four_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-four-post\", {\n  title: post_image_layout_four_post.title,\n  description: post_image_layout_four_post.description,\n  icon: post_image_layout_four_post.icon,\n  keywords: post_image_layout_four_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // metaChoose: \"primary\",\n      // excerpt: \"primary\",\n      // heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      // meta_style2,\n      title,\n      // secondary\n      // heading2,\n      // excerpt2,\n      // showCate2,\n      // showTag2,\n      // date2,\n      // author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    // let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {/* <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n              }}\n            />\n          </PanelBody> */}\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this,{\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div className={`column-count column-count-3`}>\n              {posts.map((post) => {\n                return this.returnHtml(\n                  post,\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  {__(\"...Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport { __ } from \"@wordpress/i18n\";\nimport Edit from \"./edit\";\nconst attrSave = {};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_six_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-six-post\", {\n  title: post_image_layout_six_post.title,\n  description: post_image_layout_six_post.description,\n  icon: post_image_layout_six_post.icon,\n  keywords: post_image_layout_six_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  keywords: [\"post\"],\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    let layout_ = layout[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // if number of post sum\n    if (layout_.type == 3) {\n      if (\n        this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\"\n      ) {\n        this.setState({\n          metaChoose: \"primary\",\n          excerpt: \"primary\",\n          heading: \"primary\",\n        });\n      }\n    }\n    // if number of post sum\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>Choose Layout</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {layout_.type == 3 && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n\n            <div\n              className={`parent-column-two count-3 post-three-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 3 ? (\n                posts.map((post, in_) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : (\n                <>\n                  {layout_.type == \"2\" ? (\n                    <>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {posts.map((post, in_) => {\n                            return (\n                              in_ < 2 &&\n                              this.returnHtml(\n                                post,\n                                heading2_,\n                                author2_,\n                                date2_,\n                                meta_style2_,\n                                showCate2_,\n                                excerpt2_,\n                                showTag2_,\n                                layout_\n                              )\n                            );\n                          })}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {this.returnHtml(\n                            posts[2],\n                            heading_,\n                            author_,\n                            date_,\n                            meta_style_,\n                            showCate_,\n                            excerpt_,\n                            showTag_,\n                            layout_\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {this.returnHtml(\n                            posts[0],\n                            heading_,\n                            author_,\n                            date_,\n                            meta_style_,\n                            showCate_,\n                            excerpt_,\n                            showTag_,\n                            layout_\n                          )}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {posts.map((post, in_) => {\n                            return (\n                              in_ != 0 &&\n                              this.returnHtml(\n                                post,\n                                heading2_,\n                                author2_,\n                                date2_,\n                                meta_style2_,\n                                showCate2_,\n                                excerpt2_,\n                                showTag2_,\n                                layout_\n                              )\n                            );\n                          })}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_three_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-three-post\", {\n  title: post_image_layout_three_post.title,\n  description: post_image_layout_three_post.description,\n  icon: post_image_layout_three_post.icon,\n  keywords: post_image_layout_three_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n      layout,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    let layout_ = layout[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-left\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-left\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Left\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-center\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-center\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Center\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-right\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-right\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Right\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                }\n                className={layout_.contentAlign == \"center\" ? \"selected\" : \"\"}\n              >\n                {__(\"Center\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div className=\"column-count column-count-2\">\n              {posts.map((post) => {\n                return this.returnHtml(\n                  post,\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_,\n                  layout_\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    let contentStyle =\n      layout_.contentAlign == \"bottom-left\"\n        ? { alignItems: \"normal\" }\n        : layout_.contentAlign == \"bottom-center\"\n        ? { alignItems: \"center\" }\n        : layout_.contentAlign == \"bottom-right\"\n        ? { alignItems: \"flex-end\" }\n        : { alignItems: \"center\", justifyContent: \"center\" };\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\" style={contentStyle}>\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  {__(\"...Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrSave = {};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_two_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-two-post\", {\n  title: post_image_layout_two_post.title,\n  description: post_image_layout_two_post.description,\n  icon: post_image_layout_two_post.icon,\n  keywords: post_image_layout_two_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // if number of post sum\n    if (\n      (numberOfPosts == 3 || numberOfPosts == 5) &&\n      (this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\")\n    ) {\n      this.setState({\n        metaChoose: \"primary\",\n        excerpt: \"primary\",\n        heading: \"primary\",\n      });\n    }\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n            {/* category */}\n            {/* primery and secondary */}\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            {(posts.length == 1 ||\n              posts.length == 2 ||\n              posts.length == 4 ||\n              posts.length == 6) && (\n              <div\n                className={`column-count column-count-${\n                  posts.length == 2 || posts.length == 4\n                    ? 2\n                    : posts.length == 6\n                    ? 3\n                    : 1\n                }`}\n              >\n                {posts.map((post) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_\n                  );\n                })}\n              </div>\n            )}\n            {(posts.length == 3 || posts.length == 5) && (\n              <div\n                className={`parent-column-two count-${\n                  posts.length == 3 ? 3 : 5\n                }`}\n              >\n                <div>\n                  <div className=\"column-count column-count-1\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading_,\n                      author_,\n                      date_,\n                      meta_style_,\n                      showCate_,\n                      excerpt_,\n                      showTag_\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <div\n                    className={`column-count column-count-${\n                      posts.length == 3 ? 1 : 2\n                    }`}\n                  >\n                    {posts.map((post, in_) => {\n                      return (\n                        in_ != 0 &&\n                        this.returnHtml(\n                          post,\n                          heading2_,\n                          author2_,\n                          date2_,\n                          meta_style2_,\n                          showCate2_,\n                          excerpt2_,\n                          showTag2_\n                        )\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section\", {\n  title: post_image_layout.title,\n  description: post_image_layout.description,\n  icon: post_image_layout.icon,\n  keywords: post_image_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let { thumbnail } = this.props.attributes;\n    let sendData = {};\n    if (thumbnail[0].typeShow == \"1\") {\n      sendData[\"featured_image\"] = 1;\n    }\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      // columnLayout,\n      dimension,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // block width\n    let blockStyle = {};\n    if (dimension[0].width) {\n      blockStyle = {\n        ...blockStyle,\n        ...{ maxWidth: dimension[0].custom_width + \"px\" },\n      };\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n    blockStyle = { ...blockStyle, ...bgColorOrGRadient };\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title=\"Post Layout\" initialOpen={false}>\n            <p>\n              <strong>{__(\"Block Width\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                dimension[0].width\n                  ? __(\"Custom Width\", \"unlimited-blocks\")\n                  : __(\"Auto Width\", \"unlimited-blocks\")\n              }\n              checked={dimension[0].width}\n              onChange={(e) =>\n                this.updateObj(\"dimension\", \"width\", dimension, e)\n              }\n            />\n            {dimension[0].width && (\n              <>\n                <p>\n                  <strong>{__(\"Max Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={dimension[0].custom_width}\n                  min={180}\n                  max={1000}\n                  onChange={(e) => {\n                    this.updateObj(\"dimension\", \"custom_width\", dimension, e);\n                  }}\n                />\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"left\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    meta_style_.imageAlign == \"left\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"center\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    meta_style_.imageAlign == \"center\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"right\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    meta_style_.imageAlign == \"right\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, {\n                  numberOfPosts: e,\n                  featured_image: this.props.attributes.thumbnail[0].typeShow,\n                });\n              }}\n            />\n            <p>\n              <strong>Block Background Color</strong>\n            </p>\n            {/* <ColorPicker\n              color={meta_style_.blockBgColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateObj(\"meta_style\", \"blockBgColor\", meta_style, color);\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <select\n              value={thumbnail_.typeShow}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                this.updateObj(\"thumbnail\", \"typeShow\", thumbnail, value_);\n                filterPostInit(this, { featured_image: value_ });\n              }}\n            >\n              <option value=\"all\">{__(\"All Post\", \"unlimited-blocks\")}</option>\n              <option value=\"1\">\n                {__(\"Only Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n              <option value=\"2\">\n                {__(\"Without Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n            </select>\n\n            {(thumbnail_.typeShow == \"all\" || thumbnail_.typeShow == \"1\") && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: this.props.attributes.thumbnail[0]\n                        .typeShow,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {totalPost && totalPost > posts.length && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Pagination Number\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      meta_style_.npPagination\n                        ? __(\"Pagination On\", \"unlimited-blocks\")\n                        : __(\"Next Previous On\", \"unlimited-blocks\")\n                    }\n                    checked={meta_style_.npPagination}\n                    onChange={(e) =>\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npPagination\",\n                        meta_style,\n                        e\n                      )\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-block-post list-layout\" style={blockStyle}>\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-1 image-align-${meta_style_.imageAlign}`}\n            >\n              {posts.map((post) => {\n                let postAuthor =\n                  author_ && author_.enable ? post.author : false;\n                return thumbnail_.typeShow == \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      <div className=\"featured-image\">\n                        <img\n                          style={{\n                            borderRadius: thumbnail_.borderRadius + \"px\",\n                          }}\n                          src={post.feature_image}\n                        />\n                      </div>\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize + \"px\",\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize + \"px\",\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{\n                              color: excerpt_.color,\n                              fontSize: excerpt_.fontSize + \"px\",\n                            }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : thumbnail_.typeShow != \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      {post.feature_image && thumbnail_.typeShow == \"all\" && (\n                        <div className=\"featured-image\">\n                          <img\n                            style={{\n                              borderRadius: thumbnail_.borderRadius + \"px\",\n                            }}\n                            src={post.feature_image}\n                          />\n                        </div>\n                      )}\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize,\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{ color: excerpt_.color }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : (\n                  \"\"\n                );\n              })}\n            </div>\n            {meta_style_.npEnable && totalPost && totalPost > posts.length ? (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                {meta_style_.npPagination && (\n                  <section className=\"paginationNumbers\">\n                    {[1, 2, 3].map((pagiV) => {\n                      return (\n                        <div\n                          className=\"ubl-image-section-np  pagination\"\n                          style={{\n                            fontSize: meta_style_.npBgfontSize,\n                            color: meta_style_.npColor,\n                            backgroundColor: meta_style_.npBgColor,\n                          }}\n                        >\n                          {pagiV}\n                        </div>\n                      );\n                    })}\n                    <div class=\"dots pagination\">\n                      <span>...</span>\n                    </div>\n                    <div\n                      className=\"ubl-image-section-np  pagination\"\n                      style={{\n                        fontSize: meta_style_.npBgfontSize,\n                        color: meta_style_.npColor,\n                        backgroundColor: meta_style_.npBgColor,\n                      }}\n                    >\n                      4\n                    </div>\n                  </section>\n                )}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_list_layout } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-list\", {\n  title: post_list_layout.title,\n  description: post_list_layout.description,\n  icon: post_list_layout.icon,\n  keywords: post_list_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","// extracted by mini-css-extract-plugin","// import \"./parent\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport { __ } from \"@wordpress/i18n\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  SelectControl,\n  __experimentalInputControl as InputControl,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport icons_ from \"../block-assets/icons\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nconst attrS = {\n  headingTxt: {\n    type: \"string\",\n    default: __(\"Basic\", \"unlimited-blocks\"),\n  },\n  headingTag: {\n    type: \"string\",\n    default: \"h3\",\n  },\n  headingFontSize: {\n    type: \"number\",\n    default: 29,\n  },\n  headingColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  headingFF: {\n    type: \"string\",\n  },\n  headingDescription: {\n    type: \"string\",\n    default: \"Short Description\",\n  },\n  headerBackground: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#5f5f5f\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  descriptionColor: {\n    type: \"string\",\n    default: \"grey\",\n  },\n  descriptionFontSize: {\n    type: \"number\",\n  },\n  descriptionFF: {\n    type: \"string\",\n  },\n  middleSection: {\n    type: \"object\",\n    default: {\n      iconCommonStyle: {\n        fontSize: 16,\n      },\n      textCommonStyle: {\n        fontSize: 16,\n        color: \"white\",\n        textAlign: \"center\",\n        fontFamily: \"\",\n        margin: \"\",\n        backgroundColor: {\n          type: \"color\",\n          color: \"#2B2B2B\",\n          gradient:\n            \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n        },\n        underLine: {\n          enable: true,\n          height: 3,\n          width: 60,\n          topBottomSpace: 10,\n          color: \"grey\",\n        },\n      },\n      sections: [\n        {\n          icon: \"far fa-envelope\",\n          text: \"Email Marketing\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Email Builder\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Client Testing\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"2 User Free\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Multiple Email Support\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n      ],\n    },\n  },\n  currencyC: { type: \"string\", default: \"$\" },\n  // currencyColor: { type: \"string\" },\n  currencyFs: { type: \"number\", default: 16 },\n  priceMonth: {\n    type: \"string\",\n    default: \"99\",\n  },\n  currencyFormate: {\n    type: \"number\",\n    default: 1,\n  },\n  currencyFontWeight: { type: \"string\" },\n  priceMonthPrice: {\n    type: \"string\",\n    default: \"/ month\",\n  },\n  priceMonthPriceFs: {\n    type: \"number\",\n    default: 20,\n  },\n  priceMonthPriceColor: {\n    type: \"string\",\n    default: \"#c2c4c4\",\n  },\n  pricePosition: {\n    type: \"string\",\n    default: \"top\",\n  },\n  priceFontSize: {\n    type: \"number\",\n    default: 50,\n  },\n  priceColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  priceBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#5f5f5f\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  priceFF: {\n    type: \"string\",\n  },\n  priceInline: { type: \"boolean\", default: true },\n  pricePadding: { type: \"number\", default: 0 },\n  priceBorder: { type: \"boolean\", default: false },\n  priceBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  priceBorderRadius: {\n    type: \"number\",\n    default: 50,\n  },\n  priceBorderColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  priceSpace: {\n    type: \"number\",\n    default: 150,\n  },\n  linkContent: {\n    type: \"object\",\n    default: {\n      text: __(\"ORDER NOW\", \"unlimited-blocks\"),\n      color: \"\",\n      fontSize: 16,\n      fontWeight: 400,\n      spaceV: 50,\n      spaceH: 45,\n      border: {\n        enable: false,\n        width: 1,\n        color: \"\",\n        radius: 2,\n      },\n      backgroundColor: {\n        type: \"color\",\n        color: \"#f1b426\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n      linkUrl: {\n        keepUrl: true,\n        link: \"#\",\n        target: false,\n      },\n    },\n  },\n  shortDescription: {\n    type: \"object\",\n    default: {\n      text: __(\"Terms & Conditions\", \"unlimited-blocks\"),\n      color: \"white\",\n      fontSize: 12,\n      fontFamily: \"\",\n      topBottomSpace: 18,\n    },\n  },\n  footerBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#2B2B2B\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n  },\n  containerBorderRadius: {\n    type: \"number\",\n  },\n  containerBorderColor: {\n    type: \"string\",\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { pricing_table } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/pricing-table-table\", {\n  title: pricing_table.title,\n  description: pricing_table.description,\n  icon: pricing_table.icon,\n  keywords: pricing_table.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrS,\n  example: () => {},\n  edit: (props) => {\n    // console.log(\"props\", props);\n\n    const { attributes, setAttributes } = props;\n    const {\n      headerBackground,\n      headingTxt,\n      headingTag,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleSection,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      currencyFs,\n      currencyFormate,\n      linkContent,\n      shortDescription,\n      footerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = attributes;\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    let priceStyle = {\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n    // pricing bg color\n    if (priceBgColor.type == \"color\") {\n      priceStyle[\"backgroundColor\"] = priceBgColor.color;\n    } else if (priceBgColor.type == \"gradient\") {\n      priceStyle[\"backgroundImage\"] = priceBgColor.gradient;\n    }\n\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n\n    let link_style = {\n      color: linkContent.color,\n      fontSize: linkContent.fontSize + \"px\",\n      width: linkContent.spaceH + \"%\",\n      minHeight: linkContent.spaceV + \"px\",\n      fontWeight: linkContent.fontWeight,\n    };\n    link_style = linkContent.border.enable\n      ? {\n          ...{\n            borderWidth: linkContent.border.width + \"px\",\n            borderRadius: linkContent.border.radius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkContent.border.color,\n          },\n          ...link_style,\n        }\n      : link_style;\n    //link bg style\n    if (linkContent.backgroundColor.type == \"color\") {\n      link_style[\"backgroundColor\"] = linkContent.backgroundColor.color;\n    } else if (linkContent.backgroundColor.type == \"gradient\") {\n      link_style[\"backgroundImage\"] = linkContent.backgroundColor.gradient;\n    }\n\n    //header bg style\n    let headerBgStyle = null;\n    if (headerBackground.type == \"color\") {\n      headerBgStyle = { backgroundColor: headerBackground.color };\n    } else if (headerBackground.type == \"gradient\") {\n      headerBgStyle = { backgroundImage: headerBackground.gradient };\n    }\n    //middle\n    let middleBgColorStyle = null;\n    if (middleSection.textCommonStyle.backgroundColor.type == \"color\") {\n      middleBgColorStyle = {\n        backgroundColor: middleSection.textCommonStyle.backgroundColor.color,\n      };\n    } else if (\n      middleSection.textCommonStyle.backgroundColor.type == \"gradient\"\n    ) {\n      middleBgColorStyle = {\n        backgroundImage: middleSection.textCommonStyle.backgroundColor.gradient,\n      };\n    }\n    // footer style\n    let footerBgColorStyle = null;\n    if (footerBgColor.type == \"color\") {\n      footerBgColorStyle = { backgroundColor: footerBgColor.color };\n    } else if (footerBgColor.type == \"gradient\") {\n      footerBgColorStyle = { backgroundImage: footerBgColor.gradient };\n    }\n    // one\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    const [headerSection, setheaderSection] = useState(\"content\");\n    const [pricingSection, setpricingSection] = useState(\"content\");\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    const [commonDropDown, setcommonDropDown] = useState(false);\n    const [selectedMiddleSection, setselectedMiddleSection] = useState(false);\n    const [middleSecNav, setmiddleSecNav] = useState(\"content\");\n    const [middleSecOpen, setmiddleSecOpen] = useState(false);\n    const [footerButtonSec, setfooterButtonSec] = useState(\"content\");\n    // const [footerButtonSec,setfooterButtonSec] = useState('');\n\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    // two\n\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    const updateSlides = (index, value, for_, global_ = false) => {\n      let slides_ = attributes.middleSection;\n      let newSlide = { ...slides_ };\n      if (!global_) {\n        newSlide[\"sections\"][index][for_] = value;\n      } else {\n        newSlide[index][for_] = value;\n      }\n      setAttributes({ middleSection: newSlide });\n    };\n    const removeDescription = (slideINdex) => {\n      let slides_ = { ...props.attributes.middleSection };\n      let removeItem = slideINdex;\n      let afterRemove = [\n        ...slides_.sections.slice(0, removeItem),\n        ...slides_.sections.slice(removeItem + 1),\n      ];\n      slides_[\"sections\"] = afterRemove;\n      setAttributes({ middleSection: slides_ });\n    };\n\n    const addDescription = () => {\n      let DefaultItem = {\n        icon: \"far fa-envelope\",\n        text: \"Add Some Text\",\n        iconStyle: { color: \"rgb(6, 147, 227)\" },\n      };\n      let slides_ = { ...props.attributes.middleSection };\n      slides_.sections.push(DefaultItem);\n      setAttributes({ middleSection: slides_ });\n    };\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Header Section\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* content or styles  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setheaderSection(\"content\");\n              }}\n              className={headerSection == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setheaderSection(\"style\");\n              }}\n              className={headerSection == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or styles  */}\n          {headerSection == \"content\" ? (\n            <>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Heading Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={headingTxt}\n                  onChange={(e) => {\n                    setAttributes({ headingTxt: e });\n                  }}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Heading Tag\", \"unlimited-blocks\")}\n                </label>\n                <SelectControl\n                  value={headingTag}\n                  onChange={(e) => setAttributes({ headingTag: e })}\n                  options={[\n                    {\n                      value: null,\n                      label: __(\"Choose Tag\", \"unlimited-blocks\"),\n                      disabled: true,\n                    },\n                    { value: \"h1\", label: \"h1\" },\n                    { value: \"h2\", label: \"h2\" },\n                    { value: \"h3\", label: \"h3\" },\n                    { value: \"h4\", label: \"h4\" },\n                    { value: \"h5\", label: \"h5\" },\n                    { value: \"h6\", label: \"h6\" },\n                    { value: \"p\", label: \"p\" },\n                  ]}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Description Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={headingDescription}\n                  onChange={(e) => {\n                    setAttributes({ headingDescription: e });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                  className={headerBackground.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                  className={\n                    headerBackground.type == \"gradient\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == headerBackground.type ? (\n                <ColorPicker\n                  color={headerBackground.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={headerBackground.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              {/* heading style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"heading-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"heading-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"heading-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Heading Styles\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: headingFF }}>\n                          {headingFF ? headingFF : \"Choose Family\"}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() =>\n                                setAttributes({ headingFF: family })\n                              }\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={headingColor}\n                    onChange={(color) => setAttributes({ headingColor: color })}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={headingFontSize}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ headingFontSize: e })}\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* heading style  */}\n              {/* description style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"description-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"description-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"description-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Description Styles\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <p>\n                      <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <div\n                      ref={familyRef2}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer2 ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer2;\n                          activeFamilyDrop2(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: descriptionFF }}>\n                          {descriptionFF ? descriptionFF : \"Choose Family\"}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() =>\n                                setAttributes({ descriptionFF: family })\n                              }\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={descriptionFontSize}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ descriptionFontSize: e })}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={descriptionColor}\n                    onChange={(color) =>\n                      setAttributes({ descriptionColor: color })\n                    }\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* description style  */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody title={\"Price\"} initialOpen={false}>\n          {/* content or styles  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setpricingSection(\"content\");\n              }}\n              className={pricingSection == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setpricingSection(\"style\");\n              }}\n              className={pricingSection == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or styles  */}\n          {pricingSection == \"content\" ? (\n            <>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Currency\", \"unlimited-blocks\")}</p>\n                <select\n                  value={currencyC}\n                  onChange={(e) => {\n                    setAttributes({ currencyC: e.target.value });\n                  }}\n                >\n                  {[\n                    [\"$\", \"Dollar\"],\n                    [\"€\", \"Euro\"],\n                    [\"฿\", \"Baht\"],\n                    [\"₣\", \"Franc\"],\n                    [\"ƒ\", \"Guilder\"],\n                    [\"kr\", \"Krona\"],\n                    [\"₤\", \"Lira\"],\n                    [\"₹\", \"Rupee (Indian)\"],\n                    [\"₧\", \"Peseta\"],\n                    [\"₱\", \"Peso\"],\n                    [\"£\", \"Pound Sterling\"],\n                    [\"R$\", \"Real\"],\n                    [\"₽\", \"Ruble\"],\n                    [\"₨\", \"Rupee\"],\n                    [\"₪\", \"Shekel\"],\n                    [\"¥\", \"Yen/Yuan\"],\n                    [\"₩\", \"Won\"],\n                    [\"\", \"Custom\"],\n                  ].map((v) => (\n                    <option value={v[0]}>{v[0] + \" \" + v[1]}</option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Price\", \"unlimited-blocks\")}</p>\n                <input\n                  type=\"number\"\n                  value={priceMonth}\n                  onChange={(e) => {\n                    setAttributes({ priceMonth: e.target.value });\n                  }}\n                />\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Formate\", \"unlimited-blocks\")}</p>\n                <select\n                  value={currencyFormate}\n                  onChange={(e) => {\n                    let raised = e.target.value == \"1\" ? true : false;\n                    setAttributes({ currencyFormate: e.target.value });\n                    if (e.target.value == \"1\") setAttributes({ currencyFs: 8 });\n                  }}\n                >\n                  <option value=\"0\">{__(\"Normal\", \"unlimited-blocks\")}</option>\n                  <option value=\"1\">{__(\"Rasied\", \"unlimited-blocks\")}</option>\n                </select>\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Period\", \"unlimited-blocks\")}</p>\n                <input\n                  type=\"text\"\n                  value={priceMonthPrice}\n                  onChange={(e) => {\n                    setAttributes({ priceMonthPrice: e.target.value });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              {/* common setting  */}\n              <label className=\"normal-label\">\n                {__(\"Background Color\", \"unlimited-blocks\")}\n              </label>\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                  className={priceBgColor.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                  className={priceBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == priceBgColor.type ? (\n                <ColorPicker\n                  color={priceBgColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={priceBgColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Position\", \"unlimited-blocks\")}\n                </label>\n                <SelectControl\n                  value={pricePosition}\n                  onChange={(e) => setAttributes({ pricePosition: e })}\n                  options={[\n                    {\n                      value: null,\n                      label: __(\"Choose Position\", \"unlimited-blocks\"),\n                      disabled: true,\n                    },\n                    { value: \"top\", label: \"Top\" },\n                    { value: \"middle\", label: \"Middle\" },\n                    { value: \"bottom\", label: \"Bottom\" },\n                  ]}\n                />\n              </div>\n              {/* layout style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"layout-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"layout-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"layout-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Layout\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n\n                  <div className=\"ubl-panel-custom\">\n                    <label className=\"normal-label\">\n                      {__(\"Layout\", \"unlimited-blocks\")}\n                    </label>\n                    <SelectControl\n                      value={priceInline ? \"box\" : \"round\"}\n                      onChange={(e) => {\n                        // console.log(\"ee\", e);\n                        let setPrice = e == \"round\" ? false : true;\n                        setAttributes({ priceInline: setPrice });\n                        if (!setPrice) {\n                          setAttributes({ priceBorderRadius: 50 });\n                        }\n                      }}\n                      options={[\n                        {\n                          value: null,\n                          label: __(\"Choose Layout\", \"unlimited-blocks\"),\n                          disabled: true,\n                        },\n                        { value: \"box\", label: \"Boxed\" },\n                        { value: \"round\", label: \"Rounded\" },\n                      ]}\n                    />\n                  </div>\n                  {!priceInline && (\n                    <RangeControl\n                      label={__(\"Price Space\", \"unlimited-blocks\")}\n                      value={priceSpace}\n                      min={0}\n                      max={250}\n                      onChange={(e) => setAttributes({ priceSpace: e })}\n                    />\n                  )}\n                  {priceInline && (\n                    <>\n                      <RangeControl\n                        label={__(\"Top/Bottom\", \"unlimited-blocks\")}\n                        value={priceSpaceV}\n                        min={0}\n                        max={200}\n                        onChange={(e) => setAttributes({ priceSpaceV: e })}\n                      />\n                      <RangeControl\n                        label={__(\"Left/Right\", \"unlimited-blocks\")}\n                        value={priceSpaceH}\n                        min={0}\n                        max={200}\n                        onChange={(e) => setAttributes({ priceSpaceH: e })}\n                      />\n                    </>\n                  )}\n                  <p>\n                    <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      priceBorder\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={priceBorder}\n                    onChange={(e) => setAttributes({ priceBorder: e })}\n                  />\n                  {priceBorder && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={priceBorderWidth}\n                        min={0}\n                        max={20}\n                        onChange={(e) => setAttributes({ priceBorderWidth: e })}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={priceBorderRadius}\n                        min={0}\n                        max={50}\n                        onChange={(e) =>\n                          setAttributes({ priceBorderRadius: e })\n                        }\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={priceBorderColor}\n                        onChange={(color) =>\n                          setAttributes({ priceBorderColor: color })\n                        }\n                      />\n                    </div>\n                  )}\n                  {/* element  */}\n                </div>\n              </div>\n              {/* layout style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"pricing-common-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"pricing-common-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"pricing-common-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Price Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        ref={familyRef}\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: priceFF }}>\n                          {priceFF\n                            ? priceFF\n                            : __(\"Choose Family\", \"unlimited-blocks\")}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() => setAttributes({ priceFF: family })}\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n                  {/* font weight */}\n                  <div className=\"flex-section sec-50-40\">\n                    <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={currencyFontWeight}\n                      onChange={(e) => {\n                        setAttributes({ currencyFontWeight: e.target.value });\n                      }}\n                    >\n                      <option value=\"400\">400</option>\n                      <option value=\"500\">500</option>\n                      <option value=\"700\">700</option>\n                      <option value=\"900\">900</option>\n                      <option value=\"bold\">Bold</option>\n                      <option value=\"bolder\">Bolder</option>\n                    </select>\n                  </div>\n                  {/* font weight */}\n                  <p>\n                    <strong>{__(\"Price\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={priceColor}\n                    onChange={(color) => setAttributes({ priceColor: color })}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={priceFontSize}\n                    min={0}\n                    max={100}\n                    onChange={(e) => setAttributes({ priceFontSize: e })}\n                  />\n                  {/* currency  */}\n                  <p>\n                    <strong>{__(\"Currency\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={currencyFs}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ currencyFs: e })}\n                  />\n                  <p>\n                    <strong>{__(\"Text\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={priceMonthPriceColor}\n                    onChange={(color) =>\n                      setAttributes({ priceMonthPriceColor: color })\n                    }\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={priceMonthPriceFs}\n                    min={0}\n                    max={100}\n                    onChange={(e) => setAttributes({ priceMonthPriceFs: e })}\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* common setting  */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody title={\"List Section\"} initialOpen={false}>\n          {/* top nav  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => setmiddleSecNav(\"content\")}\n              className={middleSecNav == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => setmiddleSecNav(\"style\")}\n              className={middleSecNav == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* top nav  */}\n\n          {middleSecNav == \"content\" ? (\n            <>\n              {/* ------------------------------ */}\n              <div className=\"slides-option\">\n                {middleSection.sections.map((section, index_) => {\n                  return (\n                    <div\n                      className={`slide-panel-single ${\n                        index_ == selectedMiddleSection && middleSecOpen\n                          ? \"active\"\n                          : \"\"\n                      }`}\n                    >\n                      <div\n                        className=\"slide-nav\"\n                        onClick={() => {\n                          if (\n                            index_ == selectedMiddleSection &&\n                            middleSecOpen\n                          ) {\n                            setmiddleSecOpen(false);\n                          } else {\n                            setselectedMiddleSection(index_);\n                            setmiddleSecOpen(true);\n                          }\n                        }}\n                      >\n                        <span>\n                          {section.text.length >= 21\n                            ? section.text.slice(0, 20) + \"...\"\n                            : section.text}\n                        </span>\n                        {index_ + 1 !== middleSection.sections.length &&\n                        middleSection.sections.length > 1 ? (\n                          <div className=\"controlls\">\n                            <span onClick={() => removeDescription(index_)}>\n                              <i className=\"fas fa-trash-alt\"></i>\n                            </span>\n                          </div>\n                        ) : (\n                          \"\"\n                        )}\n                        <div className=\"caret\">\n                          <i className=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        {/* element  */}\n                        {/* for icon  */}\n                        {index_ == selectedMiddleSection && middleSecOpen ? (\n                          <>\n                            <div className=\"ubl-panel-custom\">\n                              <p>\n                                <strong>\n                                  {__(\"Text\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <InputControl\n                                value={section.text}\n                                onChange={(e) => {\n                                  updateSlides(index_, e, \"text\");\n                                }}\n                              />\n                            </div>\n                            <p>\n                              <strong>\n                                {__(\"Choose Icon\", \"unlimited-blocks\")}\n                              </strong>\n                            </p>\n\n                            <div\n                              ref={iconReff}\n                              className={`wpgt-radio-wrap ${\n                                activeIconContainer ? \"active\" : \"\"\n                              }`}\n                            >\n                              <div\n                                className=\"selected-icon\"\n                                onClick={(e) => {\n                                  activeIconContainerSet(true);\n                                }}\n                              >\n                                <i className={section.icon}></i>\n                                <div className=\"search-container\">\n                                  <i className=\"fas fa-search\"></i>\n                                  <input\n                                    type=\"text\"\n                                    onChange={(e) => {\n                                      let value_ = e.target.value;\n                                      if (value_ != \"\") {\n                                        let newAr = icons_.filter(\n                                          (checkStr) =>\n                                            checkStr.search(value_) != -1\n                                        );\n                                        if (newAr.length) {\n                                          setIconList(newAr);\n                                        }\n                                      } else {\n                                        setIconList(icons_);\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              </div>\n                              <div\n                                className=\"wpgt-radio-container\"\n                                onChange={(e) => {\n                                  updateSlides(index_, e.target.value, \"icon\");\n                                }}\n                              >\n                                {iconList.map((iconValue) => {\n                                  let string_ = `wpgt-Radio-${\n                                    iconValue + index_\n                                  }`;\n                                  let uinqIdWrap = string_.replace(\" \", \"--\");\n                                  return (\n                                    <div className=\"wpgt-radio-wrapper\">\n                                      <input\n                                        id={uinqIdWrap}\n                                        type=\"radio\"\n                                        name={`wpgt-choose-icon-${index_}`}\n                                        className=\"radio-input\"\n                                        value={iconValue}\n                                      />\n                                      <label htmlFor={uinqIdWrap}>\n                                        <i className={iconValue}></i>\n                                      </label>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          </>\n                        ) : (\n                          \"\"\n                        )}\n                        {/* for icon  */}\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={section.iconStyle.color}\n                          onChange={(color) => {\n                            let color_ = { ...section.iconStyle };\n                            color_[\"color\"] = color;\n                            updateSlides(index_, color_, \"iconStyle\");\n                          }}\n                        />\n                        {/* element  */}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"add-new-slide\">\n                <span onClick={() => addDescription()}>\n                  <i class=\"fas fa-plus\"></i>\n                  {__(\"Add New\", \"unlimited-blocks\")}\n                </span>\n              </div>\n\n              {/* ------------------------------ */}\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n\n              <div class=\"ubl-switcher-button-section sub\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"type\"] = \"color\";\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                  className={\n                    middleSection.textCommonStyle.backgroundColor.type ==\n                    \"color\"\n                      ? \"selected\"\n                      : \"\"\n                  }\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                  className={\n                    middleSection.textCommonStyle.backgroundColor.type ==\n                    \"gradient\"\n                      ? \"selected\"\n                      : \"\"\n                  }\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == middleSection.textCommonStyle.backgroundColor.type ? (\n                <ColorPicker\n                  color={middleSection.textCommonStyle.backgroundColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"color\"] = color;\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={middleSection.textCommonStyle.backgroundColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              {/* text allign  */}\n              <p>\n                <strong>{__(\"Text Align\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div className=\"ubl-alignment\">\n                <div>\n                  <span\n                    onClick={() => {\n                      updateSlides(\n                        \"textCommonStyle\",\n                        \"left\",\n                        \"textAlign\",\n                        true\n                      );\n                    }}\n                    className={`dashicons dashicons-editor-alignleft ${\n                      middleSection.textCommonStyle.textAlign == \"left\"\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                  ></span>\n                </div>\n                <div>\n                  <span\n                    onClick={() => {\n                      updateSlides(\n                        \"textCommonStyle\",\n                        \"center\",\n                        \"textAlign\",\n                        true\n                      );\n                    }}\n                    className={`dashicons dashicons-editor-aligncenter ${\n                      middleSection.textCommonStyle.textAlign == \"center\"\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                  ></span>\n                </div>\n              </div>\n              {/* text allign  */}\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <p>\n                  <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    ref={familyRef}\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span\n                      style={{\n                        fontFamily: middleSection.textCommonStyle.fontFamily,\n                      }}\n                    >\n                      {middleSection.textCommonStyle.fontFamily\n                        ? middleSection.textCommonStyle.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            updateSlides(\n                              \"textCommonStyle\",\n                              family,\n                              \"fontFamily\",\n                              true\n                            );\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Text Font Size\", \"unlimited-blocks\")}\n                value={middleSection.textCommonStyle.fontSize}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"textCommonStyle\", e, \"fontSize\", true);\n                }}\n              />\n              <RangeControl\n                label={__(\"Icon Font Size\", \"unlimited-blocks\")}\n                value={middleSection.iconCommonStyle.fontSize}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"iconCommonStyle\", e, \"fontSize\", true);\n                }}\n              />\n              <RangeControl\n                label={__(\"Space Between Text\", \"unlimited-blocks\")}\n                value={middleSection.textCommonStyle.margin}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"textCommonStyle\", e, \"margin\", true);\n                }}\n              />\n\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={middleSection.textCommonStyle.color}\n                onChange={(color) => {\n                  updateSlides(\"textCommonStyle\", color, \"color\", true);\n                }}\n              />\n              <p>\n                <strong>{__(\"Underline\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ToggleControl\n                label={\n                  middleSection.textCommonStyle.underLine.enable\n                    ? __(\"Disable\", \"unlimited-blocks\")\n                    : __(\"Enable\", \"unlimited-blocks\")\n                }\n                checked={middleSection.textCommonStyle.underLine.enable}\n                onChange={(e) => {\n                  let middleSection_ = { ...middleSection };\n                  middleSection_.textCommonStyle.underLine.enable = e;\n                  setAttributes({ middleSection: middleSection_ });\n                }}\n              />\n              {middleSection.textCommonStyle.underLine.enable && (\n                <>\n                  <RangeControl\n                    label={__(\"Height\", \"unlimited-blocks\")}\n                    value={middleSection.textCommonStyle.underLine.height}\n                    min={0}\n                    max={20}\n                    onChange={(e) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.height = e;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={middleSection.textCommonStyle.underLine.width}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.width = e;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={middleSection.textCommonStyle.underLine.color}\n                    onChange={(color) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.color = color;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Button Section\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* button section  */}\n          <div class=\"ubl-switcher-button-section sub\">\n            <span\n              onClick={() => setfooterButtonSec(\"content\")}\n              className={footerButtonSec == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => setfooterButtonSec(\"style\")}\n              className={footerButtonSec == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n\n          {footerButtonSec == \"content\" ? (\n            <>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Button Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={linkContent.text}\n                  onChange={(e) => {\n                    let link = { ...linkContent };\n                    link[\"text\"] = e;\n                    setAttributes({ linkContent: link });\n                  }}\n                />\n              </div>\n              <p>\n                <strong>{__(\"Button Link\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div className=\"ubl-blocks-linkbtn\">\n                <LinkControl\n                  value={{\n                    url: linkContent.linkUrl.link,\n                    opensInNewTab: linkContent.linkUrl.target,\n                  }}\n                  onChange={(vall) => {\n                    let link = { ...linkContent };\n                    if (\"url\" in vall) {\n                      link.linkUrl.link = vall.url;\n                    }\n                    if (\"opensInNewTab\" in vall) {\n                      link.linkUrl.target = vall.opensInNewTab;\n                    }\n                    setAttributes({ linkContent: link });\n                  }}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Short Description\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={shortDescription.text}\n                  onChange={(e) => {\n                    let shortDesc = { ...shortDescription };\n                    shortDesc[\"text\"] = e;\n                    setAttributes({ shortDescription: shortDesc });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div class=\"ubl-switcher-button-section sub\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                  className={footerBgColor.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                  className={footerBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == footerBgColor.type ? (\n                <ColorPicker\n                  color={footerBgColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={footerBgColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"footer-button-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"footer-button-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"footer-button-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Button Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={linkContent.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link[\"fontSize\"] = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={linkContent.color}\n                    onChange={(color) => {\n                      let link = { ...linkContent };\n                      link[\"color\"] = color;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  {/* font weight */}\n                  <div className=\"flex-section\">\n                    <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={linkContent.fontWeight}\n                      onChange={(e) => {\n                        let link = { ...linkContent };\n                        link[\"fontWeight\"] = e.target.value;\n                        setAttributes({ linkContent: link });\n                      }}\n                    >\n                      <option value=\"400\">400</option>\n                      <option value=\"500\">500</option>\n                      <option value=\"700\">700</option>\n                      <option value=\"900\">900</option>\n                      <option value=\"bold\">Bold</option>\n                      <option value=\"bolder\">Bolder</option>\n                    </select>\n                  </div>\n                  {/* font weight */}\n                  <p>\n                    <strong>\n                      {__(\"Background Color\", \"unlimited-blocks\")}\n                    </strong>\n                  </p>\n\n                  <div class=\"ubl-switcher-button-section sub\">\n                    <span\n                      onClick={() => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"type\"] = \"color\";\n                        setAttributes({ linkContent: link });\n                      }}\n                      className={\n                        linkContent.backgroundColor.type == \"color\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Solid\", \"unlimited-blocks\")}\n                    </span>\n                    <span\n                      onClick={() => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"type\"] = \"gradient\";\n                        setAttributes({ linkContent: link });\n                      }}\n                      className={\n                        linkContent.backgroundColor.type == \"gradient\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Gradient\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n\n                  {\"color\" == linkContent.backgroundColor.type ? (\n                    <ColorPicker\n                      color={linkContent.backgroundColor.color}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"color\"] = color;\n                        setAttributes({ linkContent: link });\n                      }}\n                    />\n                  ) : (\n                    <GradientPicker\n                      disableCustomGradients={false}\n                      value={linkContent.backgroundColor.gradient}\n                      gradients={UBLGraDientColors}\n                      onChange={(newGradient) => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"gradient\"] = newGradient;\n                        setAttributes({ linkContent: link });\n                      }}\n                    />\n                  )}\n\n                  {/* bg color  */}\n                  <RangeControl\n                    label={__(\"Padding Top & Bottom\", \"unlimited-blocks\")}\n                    value={linkContent.spaceV}\n                    min={0}\n                    max={300}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.spaceV = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Padding Left & Right\", \"unlimited-blocks\")}\n                    value={linkContent.spaceH}\n                    min={5}\n                    max={100}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.spaceH = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                  </p>\n\n                  <ToggleControl\n                    label={\n                      linkContent.border.enable\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={linkContent.border.enable}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.border.enable = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  {linkContent.border.enable && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={linkContent.border.width}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let link = { ...linkContent };\n                          link.border.width = e;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={linkContent.border.radius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let link = { ...linkContent };\n                          link.border.radius = e;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={linkContent.border.color}\n                        onChange={(color) => {\n                          let link = { ...linkContent };\n                          link.border.color = color;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                    </div>\n                  )}\n                  {/* element  */}\n                </div>\n              </div>\n              {/* button section  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"footer-description-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"footer-description-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"footer-description-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Description Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        ref={familyRef}\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span\n                          style={{ fontFamily: shortDescription.fontFamily }}\n                        >\n                          {shortDescription.fontFamily\n                            ? shortDescription.fontFamily\n                            : __(\"Choose Family\", \"unlimited-blocks\")}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() => {\n                                let descrip = { ...shortDescription };\n                                descrip.fontFamily = family;\n                                setAttributes({ shortDescription: descrip });\n                              }}\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={shortDescription.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.fontSize = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={shortDescription.color}\n                    onChange={(color) => {\n                      let descrip = { ...shortDescription };\n                      descrip.color = color;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={shortDescription.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.fontSize = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Top & Bottom Spacing\", \"unlimited-blocks\")}\n                    value={shortDescription.topBottomSpace}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.topBottomSpace = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n\n                  {/* element  */}\n                </div>\n              </div>\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Container Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"unlimited-blocks\")\n                : __(\"Enable\", \"unlimited-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"unlimited-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"unlimited-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n              <ColorPalette\n                value={containerBorderColor}\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div className=\"pricing-table-top\" style={headerBgStyle}>\n          <RichText\n            allowedFormats={[]}\n            key=\"editable\"\n            tagName={headingTag}\n            placeholder={__(\"Pricing Table\", \"unlimited-blocks\")}\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n            onChange={(e) => setAttributes({ headingTxt: e })}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText\n            allowedFormats={[]}\n            key=\"editable\"\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n            onChange={(e) => setAttributes({ headingDescription: e })}\n          />\n        </div>\n        <div className=\"pricing-table-middle\" style={middleBgColorStyle}>\n          {pricePosition == \"middle\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"middle-sections\">\n            {middleSection.sections.map((section, index_) => {\n              return (\n                <>\n                  <div\n                    className={\n                      index_ == selectedMiddleSection ? \"selected\" : null\n                    }\n                    onClick={() => setselectedMiddleSection(index_)}\n                    style={{\n                      fontSize: middleSection.textCommonStyle.fontSize,\n                      color: middleSection.textCommonStyle.color,\n                      fontFamily: middleSection.textCommonStyle.fontFamily,\n                      margin: `${middleSection.textCommonStyle.margin}px 0`,\n                      justifyContent: middleSection.textCommonStyle.textAlign,\n                    }}\n                  >\n                    <div className=\"icon\">\n                      <i\n                        className={section.icon}\n                        style={{\n                          ...section.iconStyle,\n                          ...{\n                            fontSize:\n                              middleSection.iconCommonStyle.fontSize + \"px\",\n                          },\n                        }}\n                      ></i>\n                    </div>\n                    <div className=\"text\">\n                      <RichText\n                        allowedFormats={[]}\n                        key=\"editable\"\n                        tagName=\"span\"\n                        placeholder={__(\"Add Some Text\", \"unlimited-blocks\")}\n                        value={section.text}\n                        onChange={(e) => {\n                          updateSlides(index_, e, \"text\");\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {middleSection.textCommonStyle.underLine.enable && (\n                    <div\n                      className=\"underline\"\n                      style={{\n                        ...{\n                          height:\n                            middleSection.textCommonStyle.underLine.height +\n                            \"px\",\n                          width:\n                            middleSection.textCommonStyle.underLine.width + \"%\",\n                          backgroundColor:\n                            middleSection.textCommonStyle.underLine.color,\n                        },\n                        ...{\n                          margin:\n                            middleSection.textCommonStyle.textAlign == \"center\"\n                              ? \"auto\"\n                              : null,\n                        },\n                      }}\n                    ></div>\n                  )}\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"pricing-table-bottom\" style={footerBgColorStyle}>\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <RichText\n              allowedFormats={[]}\n              key=\"editable\"\n              tagName=\"p\"\n              placeholder={__(\"Click Me\", \"unlimited-blocks\")}\n              value={linkContent.text}\n              onChange={(e) => {\n                let link = { ...linkContent };\n                link[\"text\"] = e;\n                setAttributes({ linkContent: link });\n              }}\n              style={link_style}\n            />\n          </div>\n\n          <RichText\n            allowedFormats={[]}\n            className=\"bottom-text\"\n            key=\"editable\"\n            tagName=\"p\"\n            placeholder={__(\"Price\", \"unlimited-blocks\")}\n            value={shortDescription.text}\n            onChange={(e) => {\n              let shortDesc = { ...shortDescription };\n              shortDesc[\"text\"] = e;\n              setAttributes({ shortDescription: shortDesc });\n            }}\n            style={{\n              color: shortDescription.color,\n              fontSize: shortDescription.fontSize + \"px\",\n              fontFamily: shortDescription.fontFamily,\n              margin: `${shortDescription.topBottomSpace}px 0`,\n            }}\n          />\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const {\n      headerBackground,\n      headingTxt,\n      headingTag,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleSection,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      // currencyColor,\n      currencyFs,\n      currencyFormate,\n      linkContent,\n      shortDescription,\n      footerBgColor,\n      // container\n      // containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = props.attributes;\n\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    // price style\n    let priceStyle = {\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n    // pricing bg color\n    if (priceBgColor.type == \"color\") {\n      priceStyle[\"backgroundColor\"] = priceBgColor.color;\n    } else if (priceBgColor.type == \"gradient\") {\n      priceStyle[\"backgroundImage\"] = priceBgColor.gradient;\n    }\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n    let link_style = {\n      color: linkContent.color,\n      fontSize: linkContent.fontSize + \"px\",\n      width: linkContent.spaceH + \"%\",\n      minHeight: linkContent.spaceV + \"px\",\n    };\n    link_style = linkContent.border.enable\n      ? {\n          ...{\n            borderWidth: linkContent.border.width + \"px\",\n            borderRadius: linkContent.border.radius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkContent.border.color,\n          },\n          ...link_style,\n        }\n      : link_style;\n    //link bg style\n    if (linkContent.backgroundColor.type == \"color\") {\n      link_style[\"backgroundColor\"] = linkContent.backgroundColor.color;\n    } else if (linkContent.backgroundColor.type == \"gradient\") {\n      link_style[\"backgroundImage\"] = linkContent.backgroundColor.gradient;\n    }\n    //header bg style\n    let headerBgStyle = null;\n    if (headerBackground.type == \"color\") {\n      headerBgStyle = { backgroundColor: headerBackground.color };\n    } else if (headerBackground.type == \"gradient\") {\n      headerBgStyle = { backgroundImage: headerBackground.gradient };\n    }\n    //middle\n    let middleBgColorStyle = null;\n    if (middleSection.textCommonStyle.backgroundColor.type == \"color\") {\n      middleBgColorStyle = {\n        backgroundColor: middleSection.textCommonStyle.backgroundColor.color,\n      };\n    } else if (\n      middleSection.textCommonStyle.backgroundColor.type == \"gradient\"\n    ) {\n      middleBgColorStyle = {\n        backgroundImage: middleSection.textCommonStyle.backgroundColor.gradient,\n      };\n    }\n    // footer style\n    let footerBgColorStyle = null;\n    if (footerBgColor.type == \"color\") {\n      footerBgColorStyle = { backgroundColor: footerBgColor.color };\n    } else if (footerBgColor.type == \"gradient\") {\n      footerBgColorStyle = { backgroundImage: footerBgColor.gradient };\n    }\n    return (\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div className=\"pricing-table-top\" style={headerBgStyle}>\n          <RichText.Content\n            tagName={headingTag}\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText.Content\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n          />\n        </div>\n        <div className=\"pricing-table-middle\" style={middleBgColorStyle}>\n          {pricePosition == \"middle\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"middle-sections\">\n            {middleSection.sections.map((section, index_) => {\n              return (\n                <>\n                  <div\n                    style={{\n                      fontSize: middleSection.textCommonStyle.fontSize,\n                      color: middleSection.textCommonStyle.color,\n                      fontFamily: middleSection.textCommonStyle.fontFamily,\n                      margin: `${middleSection.textCommonStyle.margin}px 0`,\n                      justifyContent: middleSection.textCommonStyle.textAlign,\n                    }}\n                  >\n                    <div className=\"icon\">\n                      <i\n                        className={section.icon}\n                        style={{\n                          ...section.iconStyle,\n                          ...{\n                            fontSize:\n                              middleSection.iconCommonStyle.fontSize + \"px\",\n                          },\n                        }}\n                      ></i>\n                    </div>\n                    <div className=\"text\">\n                      <RichText.Content tagName=\"span\" value={section.text} />\n                    </div>\n                  </div>\n                  {middleSection.textCommonStyle.underLine.enable && (\n                    <div\n                      className=\"underline\"\n                      style={{\n                        ...{\n                          height:\n                            middleSection.textCommonStyle.underLine.height +\n                            \"px\",\n                          width:\n                            middleSection.textCommonStyle.underLine.width + \"%\",\n                          backgroundColor:\n                            middleSection.textCommonStyle.underLine.color,\n                        },\n                        ...{\n                          margin:\n                            middleSection.textCommonStyle.textAlign == \"center\"\n                              ? \"auto\"\n                              : null,\n                        },\n                      }}\n                    ></div>\n                  )}\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"pricing-table-bottom\" style={footerBgColorStyle}>\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <a\n              target={linkContent.linkUrl.target ? \"_blank\" : null}\n              rel={linkContent.linkUrl.target ? \"noopener noreferrer\" : null}\n              href={linkContent.linkUrl.link}\n            >\n              <RichText.Content\n                tagName=\"p\"\n                value={linkContent.text}\n                style={link_style}\n              />\n            </a>\n          </div>\n          <RichText.Content\n            className=\"bottom-text\"\n            tagName=\"p\"\n            value={shortDescription.text}\n            style={{\n              color: shortDescription.color,\n              fontSize: shortDescription.fontSize + \"px\",\n              fontFamily: shortDescription.fontFamily,\n              margin: `${shortDescription.topBottomSpace}px 0`,\n            }}\n          />\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\n// import fontFamily from \"../block-assets/font-family\";\n// import icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  InspectorControls,\n  ColorPalette,\n  RichText,\n} from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl, ToggleControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  circleRadius: { type: \"number\", default: 80 },\n  strokeWidth: { type: \"number\", default: 15 },\n  strokeColor: { type: \"string\", default: \"blue\" },\n  strokeBgColor: { type: \"string\", default: \"grey\" },\n  fillBgColor: { type: \"string\", default: \"pink\" },\n  animationDelay: { type: \"number\", default: 10 },\n  lineCap: { type: \"boolean\", default: false },\n  alignment: { type: \"string\", default: \"center\" },\n  text: { type: \"number\", default: 50 },\n  textFs: { type: \"number\", default: 18 },\n  textColor: { type: \"string\", default: \"black\" },\n  percentTitleE: { type: \"boolean\", default: true },\n  percentTitle: { type: \"string\", default: __(\"Add Title\", \"unlimited-blocks\") },\n  percentTitleFs: { type: \"number\" },\n  percentTitleColor: { type: \"string\" },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { progress_bar_pie } = blocksDetail;\n  \nregisterBlockType(\"unlimited-blocks/progress-bar-pie\", {\n  title: progress_bar_pie.title,\n  description: progress_bar_pie.description,\n  icon: progress_bar_pie.icon,\n  keywords: progress_bar_pie.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrs_,\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      lineCap,\n      animationDelay,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Circle Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Percent\", \"unlimited-blocks\")}\n            value={text}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ text: e })}\n          />\n          <RangeControl\n            label={__(\"Width\", \"unlimited-blocks\")}\n            value={circleRadius}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ circleRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Stroke Width\", \"unlimited-blocks\")}\n            value={strokeWidth}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ strokeWidth: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"unlimited-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Edges Type\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              lineCap\n                ? __(\"Flat\", \"unlimited-blocks\")\n                : __(\"Circular\", \"unlimited-blocks\")\n            }\n            checked={lineCap}\n            onChange={(e) => setAttributes({ lineCap: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeColor}\n            onChange={(color) => setAttributes({ strokeColor: color })}\n          />\n          <p>\n            <strong>{__(\"Stroke Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeBgColor}\n            onChange={(color) => setAttributes({ strokeBgColor: color })}\n          />\n          <p>\n            <strong>{__(\"Fill Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={fillBgColor}\n            onChange={(color) => setAttributes({ fillBgColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Text Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Title Setting\", \"unlimited-blocks\")}</p>\n          <ToggleControl\n            label={\n              percentTitleE\n                ? __(\"Hide\", \"unlimited-blocks\")\n                : __(\"Show\", \"unlimited-blocks\")\n            }\n            checked={percentTitleE}\n            onChange={(e) => setAttributes({ percentTitleE: e })}\n          />\n          {percentTitleE && (\n            <>\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={percentTitleFs}\n                min={1}\n                max={50}\n                onChange={(e) => setAttributes({ percentTitleFs: e })}\n              />\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={percentTitleColor}\n                onChange={(color) =>\n                  setAttributes({ percentTitleColor: color })\n                }\n              />\n            </>\n          )}\n          <p className=\"block-inside\">{__(\"Percent Setting\", \"unlimited-blocks\")}</p>\n          <RangeControl\n            label={__(\"Font Size\", \"unlimited-blocks\")}\n            value={textFs}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ textFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={textColor}\n            onChange={(color) => setAttributes({ textColor: color })}\n          />\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"ubl-block-pie-circle\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText\n                  allowedFormats={[]}\n                  className=\"title_\"\n                  key=\"editable\"\n                  tagName=\"span\"\n                  placeholder={__(\"Add Title\", \"unlimited-blocks\")}\n                  value={percentTitle}\n                  onChange={(e) => setAttributes({ percentTitle: e })}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              >\n                {text}%\n              </span>\n            </div>\n            <svg height={HW} width={HW}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                stroke-width={strokeWidth}\n                fill=\"none\"\n                stroke={strokeColor}\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n                stroke-dasharray={`${\n                  text * ((Math.PI * (circleRadius * 2)) / 100)\n                } ${Math.PI * (circleRadius * 2)}`}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      animationDelay,\n      lineCap,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let circleData = {\n      radius: circleRadius,\n      strokeWidth: strokeWidth,\n      strokeColor: strokeColor,\n      strokeBgColor: strokeBgColor,\n      lineCap: lineCap,\n      animationDelay: animationDelay,\n      text: text,\n    };\n    circleData = JSON.stringify(circleData);\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return (\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"ubl-block-pie-circle front_\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText.Content\n                  className=\"title_\"\n                  tagName=\"span\"\n                  value={percentTitle}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              ></span>\n            </div>\n\n            <svg height={HW} width={HW} data={circleData}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                className=\"percent-apply\"\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                fill=\"none\"\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  blockUniqueId: { type: \"number\", default: false },\n  percentTitle: { type: \"string\", default: __(\"Percent title\", \"unlimited-blocks\") },\n  titleFs: { type: \"number\" },\n  titleFf: { type: \"string\" },\n  titleIn: { type: \"boolean\", default: false },\n  titleColor: { type: \"string\" },\n  progressHeight: { type: \"number\", default: 12 },\n  percent: { type: \"number\", default: 40 },\n  animationDelay: { type: \"number\", default: 10 },\n  percentColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"rgb(255, 36, 0)\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  percentBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"yellow\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  borderRadius: { type: \"number\" },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { linear_progress } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/progress-block\", {\n  title: linear_progress.title,\n  description: linear_progress.description,\n  icon: linear_progress.icon,\n  keywords: linear_progress.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrs_,\n  example: () => {},\n  edit: (props) => {\n    const { attributes, setAttributes } = props;\n    const {\n      percent,\n      progressHeight,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      animationDelay,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n      blockUniqueId,\n    } = attributes;\n    // bg container\n    let percentBgColorStyle = {\n      height: progressHeight + \"px\",\n      borderRadius: borderRadius + \"px\",\n    };\n    if (percentBgColor.type == \"color\") {\n      percentBgColorStyle[\"backgroundColor\"] = percentBgColor.color;\n    } else if (percentBgColor.type == \"gradient\") {\n      percentBgColorStyle[\"backgroundImage\"] = percentBgColor.gradient;\n    }\n    // bg percent\n    let percentStyle = {\n      width: percent + \"%\",\n    };\n    if (percentColor.type == \"color\") {\n      percentStyle[\"backgroundColor\"] = percentColor.color;\n    } else if (percentColor.type == \"gradient\") {\n      percentStyle[\"backgroundImage\"] = percentColor.gradient;\n    }\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Title Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              titleIn\n                ? __(\"Outside\", \"unlimited-blocks\")\n                : __(\"Inside\", \"unlimited-blocks\")\n            }\n            checked={titleIn}\n            onChange={(e) => setAttributes({ titleIn: e })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"unlimited-blocks\")}\n            value={titleFs}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ titleFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={titleColor}\n            onChange={(color) => setAttributes({ titleColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Progress Bar Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Height\", \"unlimited-blocks\")}\n            value={progressHeight}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ progressHeight: e })}\n          />\n          <RangeControl\n            label={__(\"Percent\", \"unlimited-blocks\")}\n            value={percent}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ percent: e })}\n          />\n\n          <RangeControl\n            label={__(\"Border Radius\", \"unlimited-blocks\")}\n            value={borderRadius}\n            min={1}\n            max={60}\n            onChange={(e) => setAttributes({ borderRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"unlimited-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          {/* <ColorPalette\n            value={percentColor}\n            onChange={(color) => setAttributes({ percentColor: color })}\n          /> */}\n          {/* bg color  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ percentColor: getBgcolor });\n              }}\n              className={percentColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ percentColor: getBgcolor });\n              }}\n              className={percentColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == percentColor.type ? (\n            <ColorPicker\n              color={percentColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ percentColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={percentColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ percentColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n          <p>\n            <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          {/* <ColorPalette\n            value={percentBgColor}\n            onChange={(color) => setAttributes({ percentBgColor: color })}\n          /> */}\n          {/* bg color  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n              className={percentBgColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n              className={percentBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == percentBgColor.type ? (\n            <ColorPicker\n              color={percentBgColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={percentBgColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper\">\n        <div className=\"ubl-linear-progress-bar\">\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText\n              allowedFormats={[]}\n              value={percentTitle}\n              tagName=\"p\"\n              onChange={(e) => setAttributes({ percentTitle: e })}\n            />\n            {!titleIn && <span className=\"percent_\">{percent}%</span>}\n          </div>\n          <div style={percentBgColorStyle} className=\"line_\">\n            <div style={percentStyle} className=\"line-inner_\">\n              {titleIn && <span className=\"percent_\">{percent}%</span>}\n            </div>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      progressHeight,\n      percent,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n      animationDelay,\n    } = attributes;\n    // bg container\n    let percentBgColorStyle = {\n      height: progressHeight + \"px\",\n      borderRadius: borderRadius + \"px\",\n    };\n    if (percentBgColor.type == \"color\") {\n      percentBgColorStyle[\"backgroundColor\"] = percentBgColor.color;\n    } else if (percentBgColor.type == \"gradient\") {\n      percentBgColorStyle[\"backgroundImage\"] = percentBgColor.gradient;\n    }\n    // bg percent\n    let percentStyle = {};\n    if (percentColor.type == \"color\") {\n      percentStyle[\"backgroundColor\"] = percentColor.color;\n    } else if (percentColor.type == \"gradient\") {\n      percentStyle[\"backgroundImage\"] = percentColor.gradient;\n    }\n    return (\n      <div className=\"thk-progress-bar-wrapper\">\n        <div\n          className=\"ubl-linear-progress-bar front_\"\n          percent={percent}\n          delay={animationDelay}\n        >\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText.Content value={percentTitle} tagName=\"p\" />\n            {!titleIn && <span className=\"percent_\"></span>}\n          </div>\n          <div style={percentBgColorStyle} className=\"line_\">\n            <div style={percentStyle} className=\"line-inner_\">\n              {titleIn && <span className=\"percent_\"></span>}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","// import \"./parent\";\nimport icons_ from \"../block-assets/icons\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\n\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst attrSave = {\n  image: {\n    type: \"string\",\n    default: \"icon\",\n  },\n  imageStyle: {\n    type: \"object\",\n    default: {\n      padding: 0,\n      width: 30,\n      border: false,\n      borderRadius: 0,\n      borderType: \"solid\",\n      borderColor: \"yellow\",\n      borderWidth: 1,\n      imgUrl: plugin_url.url + \"assets/img/image2.jpg\",\n      imageLink: {\n        keepUrl: false,\n        link: \"#\",\n        target: false,\n      },\n    },\n  },\n  title: {\n    type: \"object\",\n    default: {\n      value: __(\"Add Title\", \"unlimited-blocks\"),\n      url: { keepUrl: false, url: \"\", target: \"\" },\n      style: {\n        fontSize: 21,\n        color: \"#ffa600\",\n        fontFamily: \"\",\n        fontWeight: 600,\n      },\n    },\n  },\n  description: {\n    type: \"object\",\n    default: {\n      value: __(\"Add Service Description\", \"unlimited-blocks\"),\n      style: { fontSize: 21, color: \"\", fontFamily: \"\" },\n    },\n  },\n  containerBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#EEF6F9\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  containerBorderRadius: {\n    type: \"number\",\n    default: 3,\n  },\n  containerBorderColor: {\n    type: \"string\",\n    default: \"black\",\n  },\n  //   icon\n  iconClass: {\n    type: \"string\",\n    default: \"fas fa-coffee\",\n  },\n  //////----------------\n  iconStyle: {\n    type: \"object\",\n    default: {\n      fontSize: 40,\n      color: \"#ffa600\",\n      width: 79,\n      backgroundColor: {\n        type: \"color\",\n        color: \"#EEF6F9\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n    },\n  },\n  iconBorder: {\n    type: \"object\",\n    default: {\n      border: true,\n      color: \"#ffa600\",\n      width: 2,\n      radius: 50,\n    },\n  },\n  imageBorder: {\n    type: \"object\",\n    default: {\n      border: true,\n      color: \"#ffa600\",\n      width: 2,\n      radius: 5,\n    },\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { service_section } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/icon-image-content\", {\n  title: service_section.title,\n  description: service_section.description,\n  icon: service_section.icon,\n  keywords: service_section.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {},\n  attributes: attrSave,\n  example: () => {},\n  edit: (props) => {\n    // console.log(\"props\", props);\n    const { attributes, setAttributes } = props;\n    const {\n      image,\n      imageStyle,\n      title,\n      description,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      //icon\n      iconStyle,\n      iconBorder,\n      //icon\n      iconClass,\n    } = attributes;\n\n    //icon border\n    let borderStyle = iconBorder.border\n      ? {\n          borderWidth: iconBorder.width + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorder.color,\n          borderRadius: iconBorder.radius + \"%\",\n          width: iconStyle.width + \"px\",\n          height: iconStyle.width + \"px\",\n        }\n      : {};\n    if (iconStyle.backgroundColor.type == \"color\") {\n      borderStyle[\"backgroundColor\"] = iconStyle.backgroundColor.color;\n    } else if (iconStyle.backgroundColor.type == \"gradient\") {\n      borderStyle[\"backgroundImage\"] = iconStyle.backgroundColor.gradient;\n    }\n\n    let customImgStyle = {\n      width: imageStyle.width + \"%\",\n      padding: imageStyle.padding + \"px\",\n    };\n    if (imageStyle.border) {\n      customImgStyle = {\n        ...customImgStyle,\n        ...{\n          borderRadius: imageStyle.borderRadius + \"px\",\n          borderWidth: imageStyle.borderWidth + \"px\",\n          borderColor: imageStyle.borderColor,\n          borderStyle: imageStyle.borderType,\n        },\n      };\n    }\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    // if(containerBgColor)\n    if (containerBgColor.type == \"color\") {\n      containerBorderStyle[\"backgroundColor\"] = containerBgColor.color;\n    } else if (containerBgColor.type == \"gradient\") {\n      containerBorderStyle[\"backgroundImage\"] = containerBgColor.gradient;\n    }\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    const [titleDescription, setTitleDescription] = useState(\"title\");\n    const [contentORborder, setcontentORborder] = useState(\"content\");\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Image and Icon Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div className=\"flex-section\">\n            <p>{__(\"Image and Icon\", \"unlimited-blocks\")}</p>\n            <select\n              value={image}\n              onChange={(e) => {\n                setAttributes({ image: e.target.value });\n              }}\n            >\n              <option value=\"icon\">{__(\"Icon\", \"unlimited-blocks\")}</option>\n              <option value=\"image\">{__(\"Image\", \"unlimited-blocks\")}</option>\n            </select>\n          </div>\n          {/* content or border  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setcontentORborder(\"content\");\n              }}\n              className={contentORborder == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setcontentORborder(\"border\");\n              }}\n              className={contentORborder == \"border\" ? \"selected\" : \"\"}\n            >\n              {__(\"Border\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or border  */}\n          {image == \"image\" && (\n            <div className=\"service-image-setting\">\n              {contentORborder == \"content\" ? (\n                <>\n                  <p>\n                    <strong>{__(\"Background image\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <MediaUpload\n                    allowedType=\"image\"\n                    onSelect={(newImage) => {\n                      let image = { ...imageStyle };\n                      image[\"imgUrl\"] = newImage.sizes.full.url;\n                      setAttributes({ imageStyle: image });\n                    }}\n                    value={imageStyle.imgUrl}\n                    render={({ open }) => (\n                      <div\n                        onClick={open}\n                        className={`ubl-block-image-uploader ${\n                          !imageStyle.imgUrl ? \"blank\" : \"\"\n                        }`}\n                      >\n                        <div>\n                          <i className=\"fas fa-plus\"></i>\n                        </div>\n                        {imageStyle.imgUrl ? (\n                          <img src={imageStyle.imgUrl} />\n                        ) : (\n                          \"\"\n                        )}\n                      </div>\n                    )}\n                  />\n                  <p>\n                    <strong>{__(\"Image Link\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      imageStyle.imageLink.keepUrl\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={imageStyle.imageLink.keepUrl}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image.imageLink.keepUrl = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                  {imageStyle.imageLink.keepUrl && (\n                    <div className=\"ubl-blocks-linkbtn\">\n                      <LinkControl\n                        value={{\n                          url: imageStyle.imageLink.link,\n                          opensInNewTab: imageStyle.imageLink.target,\n                        }}\n                        onChange={(vall) => {\n                          if (\"url\" in vall) {\n                            let image = { ...imageStyle };\n                            image.imageLink.link = vall.url;\n                            setAttributes({ imageStyle: image });\n                          }\n                          //target\n                          if (\"opensInNewTab\" in vall) {\n                            let image = { ...imageStyle };\n                            image.imageLink.target = vall.opensInNewTab;\n                            setAttributes({ imageStyle: image });\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={imageStyle.width}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image[\"width\"] = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Padding\", \"unlimited-blocks\")}\n                    value={imageStyle.padding}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image[\"padding\"] = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                </>\n              ) : (\n                <>\n                  <ToggleControl\n                    label={\n                      imageStyle.border\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={imageStyle.border}\n                    onChange={(e) => {\n                      let border = { ...imageStyle };\n                      border[\"border\"] = e;\n                      setAttributes({ imageStyle: border });\n                    }}\n                  />\n                  {imageStyle.border && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={imageStyle.borderWidth}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let border = { ...imageStyle };\n                          border[\"borderWidth\"] = e;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={imageStyle.borderRadius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let border = { ...imageStyle };\n                          border[\"borderRadius\"] = e;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={imageStyle.borderColor}\n                        onChange={(color) => {\n                          let border = { ...imageStyle };\n                          border[\"borderColor\"] = color;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"service-icon-setting\">\n              {contentORborder == \"content\" ? (\n                <>\n                  <p>\n                    <strong>{__(\"Choose Icon\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <div\n                    ref={iconReff}\n                    className={`wpgt-radio-wrap ${\n                      activeIconContainer ? \"active\" : \"\"\n                    }`}\n                  >\n                    <div\n                      className=\"selected-icon\"\n                      onClick={(e) => {\n                        activeIconContainerSet(true);\n                      }}\n                    >\n                      <i className={iconClass}></i>\n                      <div className=\"search-container\">\n                        <i className=\"fas fa-search\"></i>\n                        <input\n                          type=\"text\"\n                          onChange={(e) => {\n                            let value_ = e.target.value;\n                            if (value_ != \"\") {\n                              let newAr = icons_.filter(\n                                (checkStr) => checkStr.search(value_) != -1\n                              );\n                              if (newAr.length) {\n                                setIconList(newAr);\n                              }\n                            } else {\n                              setIconList(icons_);\n                            }\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div\n                      className=\"wpgt-radio-container\"\n                      onChange={(e) => {\n                        setAttributes({ iconClass: e.target.value });\n                      }}\n                    >\n                      {iconList.map((iconValue) => {\n                        return (\n                          <div className=\"wpgt-radio-wrapper\">\n                            <input\n                              id={\"wpgt-Radio-\" + iconValue}\n                              type=\"radio\"\n                              name=\"wpgt-choose-icon\"\n                              className=\"radio-input\"\n                              value={iconValue}\n                            />\n                            <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                              <i className={iconValue}></i>\n                            </label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <label className=\"normal-label\">\n                    {__(\"Font Size\", \"unlimited-blocks\")}\n                  </label>\n                  <RangeControl\n                    value={iconStyle.fontSize}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let iconStyle_ = { ...iconStyle };\n                      iconStyle_[\"fontSize\"] = e;\n                      setAttributes({ iconStyle: iconStyle_ });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    onChange={(color) => {\n                      let iconStyle_ = { ...iconStyle };\n                      iconStyle_[\"color\"] = color;\n                      setAttributes({ iconStyle: iconStyle_ });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Background Color\", \"unlimited-blocks\")}\n                  </label>\n                  {/* bg color  */}\n                  <div class=\"ubl-switcher-button-section sub\">\n                    <span\n                      onClick={() => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.type = \"color\";\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                      className={\n                        iconStyle.backgroundColor.type == \"color\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Solid\", \"unlimited-blocks\")}\n                    </span>\n                    <span\n                      onClick={() => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.type = \"gradient\";\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                      className={\n                        iconStyle.backgroundColor.type == \"gradient\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Gradient\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  {\"color\" == iconStyle.backgroundColor.type ? (\n                    <ColorPicker\n                      color={iconStyle.backgroundColor.color}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.color = color;\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                    />\n                  ) : (\n                    <GradientPicker\n                      disableCustomGradients={false}\n                      value={iconStyle.backgroundColor.gradient}\n                      gradients={UBLGraDientColors}\n                      onChange={(newGradient) => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.gradient = newGradient;\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                    />\n                  )}\n                </>\n              ) : (\n                <>\n                  <ToggleControl\n                    label={\n                      iconBorder.border\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={iconBorder.border}\n                    onChange={(e) => {\n                      let border = { ...iconBorder };\n                      border[\"border\"] = e;\n                      setAttributes({ iconBorder: border });\n                    }}\n                  />\n                  {iconBorder.border && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Icon Space\", \"unlimited-blocks\")}\n                        value={iconStyle.width}\n                        min={0}\n                        max={200}\n                        onChange={(e) => {\n                          let iconStyle_ = { ...iconStyle };\n                          iconStyle_[\"width\"] = e;\n                          setAttributes({ iconStyle: iconStyle_ });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={iconBorder.width}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let border = { ...iconBorder };\n                          border[\"width\"] = e;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={iconBorder.radius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let border = { ...iconBorder };\n                          border[\"radius\"] = e;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={iconBorder.color}\n                        onChange={(color) => {\n                          let border = { ...iconBorder };\n                          border[\"color\"] = color;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Title / Description Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* title description  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setTitleDescription(\"title\");\n              }}\n              className={titleDescription == \"title\" ? \"selected\" : \"\"}\n            >\n              {__(\"Title\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setTitleDescription(\"description\");\n              }}\n              className={titleDescription == \"description\" ? \"selected\" : \"\"}\n            >\n              {__(\"Description\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* title description  */}\n          {titleDescription == \"title\" ? (\n            <>\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <label className=\"normal-label\">\n                  {__(\"Font Family\", \"unlimited-blocks\")}\n                </label>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span style={{ fontFamily: title.style.fontFamily }}>\n                      {title.style.fontFamily\n                        ? title.style.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            let title_ = { ...title };\n                            title_.style.fontFamily = family;\n                            setAttributes({ title: title_ });\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={title.style.fontSize}\n                min={0}\n                max={100}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.style.fontSize = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              <label className=\"normal-label\">\n                {__(\"Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                value={title.style.color}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.style.color = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              {/* font weight */}\n              <div className=\"flex-section\">\n                <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                <select\n                  value={title.style.fontWeight}\n                  onChange={(e) => {\n                    let title_ = { ...title };\n                    title_.style.fontWeight = e.target.value;\n                    setAttributes({ title: title_ });\n                  }}\n                >\n                  <option value=\"400\">400</option>\n                  <option value=\"500\">500</option>\n                  <option value=\"700\">700</option>\n                  <option value=\"900\">900</option>\n                  <option value=\"bold\">Bold</option>\n                  <option value=\"bolder\">Bolder</option>\n                </select>\n              </div>\n              {/* font weight */}\n              <p>\n                <strong>{__(\"Title Link\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ToggleControl\n                label={\n                  title.url.keepUrl\n                    ? __(\"Disable\", \"unlimited-blocks\")\n                    : __(\"Enable\", \"unlimited-blocks\")\n                }\n                checked={title.url.keepUrl}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.url.keepUrl = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              {title.url.keepUrl && (\n                <div className=\"ubl-blocks-linkbtn\">\n                  <LinkControl\n                    value={{\n                      url: title.url.url,\n                      opensInNewTab: title.url.target,\n                    }}\n                    onChange={(vall) => {\n                      if (\"url\" in vall) {\n                        let title_ = { ...title };\n                        title_.url.url = vall.url;\n                        // console.log(\"new title\", title_);\n                        setAttributes({ title: title_ });\n                      }\n                      //target\n                      if (\"opensInNewTab\" in vall) {\n                        let title_ = { ...title };\n                        title_.url.target = vall.opensInNewTab;\n                        setAttributes({ title: title_ });\n                      }\n                    }}\n                  />\n                </div>\n              )}\n            </>\n          ) : (\n            <>\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <label className=\"normal-label\">\n                  {__(\"Font Family\", \"unlimited-blocks\")}\n                </label>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span style={{ fontFamily: description.style.fontFamily }}>\n                      {description.style.fontFamily\n                        ? description.style.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            let description_ = { ...description };\n                            description_.style.fontFamily = family;\n                            setAttributes({ description: description_ });\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={description.style.fontSize}\n                min={0}\n                max={100}\n                onChange={(e) => {\n                  let description_ = { ...description };\n                  description_.style.fontSize = e;\n                  setAttributes({ description: description_ });\n                }}\n              />\n              <label className=\"normal-label\">\n                {__(\"Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                value={description.style.color}\n                onChange={(e) => {\n                  let description_ = { ...description };\n                  description_.style.color = e;\n                  setAttributes({ description: description_ });\n                }}\n              />\n              {/* font weight */}\n              <div className=\"flex-section\">\n                <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                <select\n                  value={description.style.fontWeight}\n                  onChange={(e) => {\n                    let description_ = { ...description };\n                    description_.style.fontWeight = e.target.value;\n                    setAttributes({ description: description_ });\n                  }}\n                >\n                  <option value=\"400\">400</option>\n                  <option value=\"500\">500</option>\n                  <option value=\"700\">700</option>\n                  <option value=\"900\">900</option>\n                  <option value=\"bold\">Bold</option>\n                  <option value=\"bolder\">Bolder</option>\n                </select>\n              </div>\n              {/* font weight */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Background Color\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n              className={containerBgColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n              className={containerBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == containerBgColor.type ? (\n            <ColorPicker\n              color={containerBgColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={containerBgColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Container Border Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"unlimited-blocks\")\n                : __(\"Enable\", \"unlimited-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"unlimited-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"unlimited-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <label className=\"normal-label\">\n                {__(\"Border Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              <img style={customImgStyle} src={imageStyle.imgUrl} />\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconStyle.color,\n                  fontSize: iconStyle.fontSize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            <RichText\n              key=\"editable\"\n              tagName=\"h1\"\n              allowedFormats={[]}\n              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n              value={title.value}\n              onChange={(e) => {\n                let title_ = { ...title };\n                title_.value = e;\n                setAttributes({ title: title_ });\n              }}\n              style={{\n                color: title.style.color,\n                fontSize: title.style.fontSize + \"px\",\n                fontFamily: title.style.fontFamily,\n                fontWeight: title.style.fontWeight,\n              }}\n            />\n            <RichText\n              key=\"editable\"\n              tagName=\"p\"\n              allowedFormats={[]}\n              placeholder={__(\"Service Description\", \"unlimited-blocks\")}\n              value={description.value}\n              onChange={(e) => {\n                let description_ = { ...description };\n                description_.value = e;\n                setAttributes({ description: description_ });\n              }}\n              style={{\n                color: description.style.color,\n                fontSize: description.style.fontSize + \"px\",\n                fontFamily: description.style.fontFamily,\n                fontWeight: description.style.fontWeight,\n              }}\n            />\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const { attributes } = props;\n    const {\n      image,\n      imageStyle,\n      title,\n      description,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      //icon\n      iconStyle,\n      iconBorder,\n      iconClass,\n    } = attributes;\n    //icon border\n    let borderStyle = iconBorder.border\n      ? {\n          borderWidth: iconBorder.width + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorder.color,\n          borderRadius: iconBorder.radius + \"%\",\n          width: iconStyle.width + \"px\",\n          height: iconStyle.width + \"px\",\n        }\n      : {};\n    if (iconStyle.backgroundColor.type == \"color\") {\n      borderStyle[\"backgroundColor\"] = iconStyle.backgroundColor.color;\n    } else if (iconStyle.backgroundColor.type == \"gradient\") {\n      borderStyle[\"backgroundImage\"] = iconStyle.backgroundColor.gradient;\n    }\n    //icon border\n\n    let customImgStyle = {\n      width: imageStyle.width + \"%\",\n      padding: imageStyle.padding + \"px\",\n    };\n    if (imageStyle.border) {\n      customImgStyle = {\n        ...customImgStyle,\n        ...{\n          borderRadius: imageStyle.borderRadius + \"px\",\n          borderWidth: imageStyle.borderWidth + \"px\",\n          borderColor: imageStyle.borderColor,\n          borderStyle: imageStyle.borderType,\n        },\n      };\n    }\n\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    if (containerBgColor.type == \"color\") {\n      containerBorderStyle[\"backgroundColor\"] = containerBgColor.color;\n    } else if (containerBgColor.type == \"gradient\") {\n      containerBorderStyle[\"backgroundImage\"] = containerBgColor.gradient;\n    }\n    return (\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              {imageStyle.imageLink.keepUrl ? (\n                <a\n                  href={imageStyle.imageLink.link}\n                  target={imageStyle.imageLink.target ? \"_blank\" : null}\n                  rel={\n                    imageStyle.imageLink.target ? \"noopener noreferrer\" : null\n                  }\n                >\n                  <img style={customImgStyle} src={imageStyle.imgUrl} />\n                </a>\n              ) : (\n                <img style={customImgStyle} src={imageStyle.imgUrl} />\n              )}\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconStyle.color,\n                  fontSize: iconStyle.fontSize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            {title.url.keepUrl && title.url.url != \"\" ? (\n              <a\n                href={title.url.url}\n                target={title.url.target ? \"_blank\" : null}\n                rel={title.url.target ? \"noopener noreferrer\" : null}\n              >\n                <RichText.Content\n                  tagName=\"h1\"\n                  value={title.value}\n                  style={{\n                    color: title.style.color,\n                    fontSize: title.style.fontSize + \"px\",\n                    fontFamily: title.style.fontFamily,\n                    fontWeight: title.style.fontWeight,\n                  }}\n                />\n              </a>\n            ) : (\n              <RichText.Content\n                tagName=\"h1\"\n                value={title.value}\n                style={{\n                  color: title.style.color,\n                  fontSize: title.style.fontSize + \"px\",\n                  fontFamily: title.style.fontFamily,\n                  fontWeight: title.style.fontWeight,\n                }}\n              />\n            )}\n\n            <RichText.Content\n              tagName=\"p\"\n              value={description.value}\n              style={{\n                color: description.style.color,\n                fontSize: description.style.fontSize + \"px\",\n                fontFamily: description.style.fontFamily,\n                fontWeight: description.style.fontWeight,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","import {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  __experimentalGradientPicker as GradientPicker,\n  __experimentalInputControl as InputControl,\n} from \"@wordpress/components\";\n\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSlide: 0,\n      twoBtn: \"buttoneOne\",\n      trigger: \"linear\",\n      slideSetting: \"slides\",\n      sideContentOpen: false,\n      commonDropDown: \"\",\n      slideBgButton: \"\",\n    };\n  }\n\n  addSlide = () => {\n    let defaultArray = {\n      container: {\n        bgImage: \"\",\n        overlayColor: {\n          type: \"color\",\n          color: \"rgb(10 10 10)\",\n          gradient:\n            \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          opacity: 0.6,\n        },\n        bgSize: \"cover\",\n      },\n      // wrapper: {\n      //   bgcolor: \"\",\n      //   border: \"\",\n      //   alignment: \"center\",\n      //   spacing: \"2\",\n      // },\n      title: {\n        text: __(\"This Is Title text\", \"unlimited-blocks\"),\n        // fontSize: 17,\n        // color: \"red\",\n      },\n      text: {\n        text: __(\"Add Description\", \"unlimited-blocks\"),\n        // fontSize: 17,\n        // color: \"red\",\n      },\n      buttoneOne: {\n        enable: true,\n        text: __(\"Button One\", \"unlimited-blocks\"),\n        link: \"#\",\n        target: false,\n      },\n      buttoneTwo: {\n        enable: true,\n        text: __(\"Button Two\", \"unlimited-blocks\"),\n        link: \"#\",\n        target: false,\n      },\n    };\n    let slides_ = this.props.attributes.slides;\n    this.props.setAttributes({ slides: [...slides_, defaultArray] });\n    this.setState({ selectedSlide: slides_.length, sideContentOpen: false });\n  };\n  removeSlide(slideINdex = false) {\n    let slides_ = [...this.props.attributes.slides];\n    let removeItem = slideINdex ? slideINdex : this.state.selectedSlide;\n    let afterRemove = [\n      ...slides_.slice(0, removeItem),\n      ...slides_.slice(removeItem + 1),\n    ];\n    let putSlide_ = removeItem - 1 >= 0 ? removeItem - 1 : removeItem;\n    this.setState({\n      selectedSlide: putSlide_,\n      sideContentOpen: false,\n    });\n    this.props.setAttributes({ slides: afterRemove });\n  }\n  updateSlides = (value, for_, type) => {\n    let slides_ = this.props.attributes.slides;\n    let newSlide = [...slides_];\n    newSlide[this.state.selectedSlide][for_][type] = value;\n    this.props.setAttributes({ slides: newSlide });\n  };\n  // this.updateGlobalSlide(\"left\", \"wrapper\", \"alignment\");\n  updateGlobalSlide = (value, for_, type) => {\n    let sliderSetting = this.props.attributes.sliderSetting;\n    let newSetting = [...sliderSetting];\n    if (type) {\n      newSetting[0][for_][type] = value;\n    } else {\n      newSetting[0][for_] = value;\n    }\n    this.props.setAttributes({ sliderSetting: newSetting });\n  };\n\n  render() {\n    // console.log(\"slider->\", this.props);\n    let { slides, sliderSetting } = this.props.attributes;\n    const thisState = this.state;\n    const stateIndex = thisState.selectedSlide;\n    // console.log(\"stateIndex->\", stateIndex);\n\n    const currentSlide = slides[stateIndex];\n    // console.log(\"currentSlide\", currentSlide);\n    // // undefined check\n    // if (currentSlide) {\n    sliderSetting = sliderSetting[0];\n    const activeTwoBtnState = thisState.twoBtn;\n    let triggerActive = thisState.trigger;\n    let buttonOneStyle = {\n      fontSize: sliderSetting.buttoneOne.fontSize,\n      color: sliderSetting.buttoneOne.color,\n      paddingTop: sliderSetting.buttoneOne.height,\n      paddingBottom: sliderSetting.buttoneOne.height,\n      paddingLeft: sliderSetting.buttoneOne.width,\n      paddingRight: sliderSetting.buttoneOne.width,\n    };\n    buttonOneStyle = sliderSetting.buttoneOne.border\n      ? {\n          ...{\n            borderColor: sliderSetting.buttoneOne.borderColor,\n            borderWidth: sliderSetting.buttoneOne.borderWidth,\n            borderRadius: sliderSetting.buttoneOne.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonOneStyle,\n        }\n      : buttonOneStyle;\n    // background color btn\n    if (sliderSetting.buttoneOne.backgroundColor.type == \"color\") {\n      buttonOneStyle[\"backgroundColor\"] =\n        sliderSetting.buttoneOne.backgroundColor.color;\n    } else if (sliderSetting.buttoneOne.backgroundColor.type == \"gradient\") {\n      buttonOneStyle[\"backgroundImage\"] =\n        sliderSetting.buttoneOne.backgroundColor.gradient;\n    }\n\n    let buttonTwoStyle = {\n      fontSize: sliderSetting.buttoneTwo.fontSize,\n      color: sliderSetting.buttoneTwo.color,\n      paddingTop: sliderSetting.buttoneTwo.height,\n      paddingBottom: sliderSetting.buttoneTwo.height,\n      paddingLeft: sliderSetting.buttoneTwo.width,\n      paddingRight: sliderSetting.buttoneTwo.width,\n    };\n    buttonTwoStyle = sliderSetting.buttoneTwo.border\n      ? {\n          ...{\n            borderColor: sliderSetting.buttoneTwo.borderColor,\n            borderWidth: sliderSetting.buttoneTwo.borderWidth,\n            borderRadius: sliderSetting.buttoneTwo.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonTwoStyle,\n        }\n      : buttonTwoStyle;\n    // background color btn\n    if (sliderSetting.buttoneTwo.backgroundColor.type == \"color\") {\n      buttonTwoStyle[\"backgroundColor\"] =\n        sliderSetting.buttoneTwo.backgroundColor.color;\n    } else if (sliderSetting.buttoneTwo.backgroundColor.type == \"gradient\") {\n      buttonTwoStyle[\"backgroundImage\"] =\n        sliderSetting.buttoneTwo.backgroundColor.gradient;\n    }\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      // backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let SlideulStyle = null;\n    if (sliderSetting.dimension.height) {\n      SlideulStyle = { minHeight: sliderSetting.dimension.custom_height };\n    }\n    // wrapper style\n    let wrapperAlignment = sliderSetting.wrapper.alignment;\n    let wrapperSpacing = {\n      marginTop: sliderSetting.wrapper.spacing + \"px\",\n      marginBottom: sliderSetting.wrapper.spacing + \"px\",\n      textAlign: sliderSetting.wrapper.textAlign,\n    };\n    // wrapper style\n    // title style\n    let TitleStyle = {\n      fontSize: sliderSetting.title.fontSize + \"px\",\n      color: sliderSetting.title.color,\n    };\n    // title style\n    // description style\n    let descriptionStyle = {\n      fontSize: sliderSetting.text.fontSize + \"px\",\n      color: sliderSetting.text.color,\n    };\n    // description style\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Slider Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* top nav  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                this.setState({ slideSetting: \"slides\" });\n              }}\n              className={thisState.slideSetting == \"slides\" ? \"selected\" : \"\"}\n            >\n              {__(\"Slides\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                this.setState({ slideSetting: \"option\" });\n              }}\n              className={thisState.slideSetting == \"option\" ? \"selected\" : \"\"}\n            >\n              {__(\"Slider Options\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* top nav  */}\n          <div className=\"ubl-panel-container ubl-slider-panel\">\n            {thisState.slideSetting == \"slides\" ? (\n              <>\n                <div className=\"slides-option\">\n                  {slides.map((slides_, slides_I) => {\n                    let serial = slides_I + 1;\n                    return (\n                      <div\n                        className={`slide-panel-single ${\n                          thisState.selectedSlide == slides_I &&\n                          thisState.sideContentOpen\n                            ? \"active\"\n                            : \"\"\n                        }`}\n                      >\n                        <div\n                          className=\"slide-nav\"\n                          onClick={() => {\n                            if (\n                              thisState.sideContentOpen &&\n                              thisState.selectedSlide == slides_I\n                            ) {\n                              this.setState({\n                                sideContentOpen: false,\n                              });\n                            } else {\n                              this.setState({\n                                selectedSlide: slides_I,\n                                sideContentOpen: true,\n                                slideBgButton: serial + \"background\",\n                              });\n                            }\n                          }}\n                        >\n                          <span>\n                            {__(\"Slide\", \"unlimited-blocks\") + \" \" + serial}\n                          </span>\n                          {serial !== slides.length && slides.length > 1 ? (\n                            <div className=\"controlls\">\n                              <span\n                                onClick={() => {\n                                  this.removeSlide(slides_I);\n                                }}\n                              >\n                                <i className=\"fas fa-trash-alt\"></i>\n                              </span>\n                            </div>\n                          ) : (\n                            \"\"\n                          )}\n                          <div className=\"caret\">\n                            <i className=\"fas fa-caret-down\"></i>\n                          </div>\n                        </div>\n                        <div className=\"slides-element\">\n                          {/* background and link url  */}\n                          <div class=\"ubl-switcher-button-section sub\">\n                            <span\n                              onClick={() => {\n                                this.setState({\n                                  slideBgButton: serial + \"background\",\n                                });\n                              }}\n                              className={\n                                thisState.slideBgButton == serial + \"background\"\n                                  ? \"selected\"\n                                  : \"\"\n                              }\n                            >\n                              {__(\"Background\", \"unlimited-blocks\")}\n                            </span>\n                            <span\n                              onClick={() => {\n                                this.setState({\n                                  slideBgButton: serial + \"button\",\n                                });\n                              }}\n                              className={\n                                thisState.slideBgButton == serial + \"button\"\n                                  ? \"selected\"\n                                  : \"\"\n                              }\n                            >\n                              {__(\"Button Links\", \"unlimited-blocks\")}\n                            </span>\n                          </div>\n                          {/* background and link url  */}\n                          {thisState.slideBgButton == serial + \"background\" ? (\n                            <>\n                              {/* background  */}\n                              <p>\n                                <strong>\n                                  {__(\"Background image\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <MediaUpload\n                                allowedType=\"image\"\n                                onSelect={(newImage) =>\n                                  this.updateSlides(\n                                    newImage.sizes.full.url,\n                                    \"container\",\n                                    \"bgImage\"\n                                  )\n                                }\n                                value={slides_.container.bgImage}\n                                render={({ open }) => (\n                                  <div\n                                    onClick={open}\n                                    className={`ubl-block-image-uploader ${\n                                      !slides_.container.bgImage ? \"blank\" : \"\"\n                                    }`}\n                                  >\n                                    <div>\n                                      <i className=\"fas fa-plus\"></i>\n                                    </div>\n                                    {slides_.container.bgImage ? (\n                                      <img src={slides_.container.bgImage} />\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </div>\n                                )}\n                              />\n                              {slides_.container.bgImage && (\n                                <>\n                                  <div className=\"remove-image\">\n                                    <span\n                                      onClick={() => {\n                                        this.updateSlides(\n                                          \"\",\n                                          \"container\",\n                                          \"bgImage\"\n                                        );\n                                      }}\n                                    >\n                                      {__(\"Remove\", \"unlimited-blocks\")}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex-section-slider\">\n                                    <p>\n                                      {__(\"Background Size\", \"unlimited-blocks\")}\n                                    </p>\n                                    <select\n                                      value={currentSlide.container.bgSize}\n                                      onChange={(e) => {\n                                        this.updateSlides(\n                                          e.target.value,\n                                          \"container\",\n                                          \"bgSize\"\n                                        );\n                                      }}\n                                    >\n                                      <option value=\"auto\">\n                                        {__(\"Auto\", \"unlimited-blocks\")}\n                                      </option>\n                                      <option value=\"cover\">\n                                        {__(\"Cover\", \"unlimited-blocks\")}\n                                      </option>\n                                      <option value=\"contain\">\n                                        {__(\"Contain\", \"unlimited-blocks\")}\n                                      </option>\n                                    </select>\n                                  </div>\n                                </>\n                              )}\n                              <p>\n                                <strong>\n                                  {__(\n                                    \"Overlay / Background Color\",\n                                    \"unlimited-blocks\"\n                                  )}\n                                </strong>\n                              </p>\n                              <div class=\"ubl-switcher-button-section sub\">\n                                <span\n                                  onClick={() => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"type\"] = \"color\";\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                  className={\n                                    slides_.container.overlayColor.type ==\n                                    \"color\"\n                                      ? \"selected\"\n                                      : \"\"\n                                  }\n                                >\n                                  {__(\"Solid\", \"unlimited-blocks\")}\n                                </span>\n                                <span\n                                  onClick={() => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"type\"] = \"gradient\";\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                  className={\n                                    slides_.container.overlayColor.type ==\n                                    \"gradient\"\n                                      ? \"selected\"\n                                      : \"\"\n                                  }\n                                >\n                                  {__(\"Gradient\", \"unlimited-blocks\")}\n                                </span>\n                              </div>\n                              {\"color\" ==\n                              slides_.container.overlayColor.type ? (\n                                <ColorPalette\n                                  value={slides_.container.overlayColor.color}\n                                  onChange={(color) => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"color\"] = color;\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                />\n                              ) : (\n                                <GradientPicker\n                                  disableCustomGradients={false}\n                                  value={\n                                    slides_.container.overlayColor.gradient\n                                  }\n                                  gradients={UBLGraDientColors}\n                                  onChange={(newGradient) => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"gradient\"] = newGradient;\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                />\n                              )}\n                              <RangeControl\n                                label={__(\"Opacity\", \"unlimited-blocks\")}\n                                value={slides_.container.overlayColor.opacity}\n                                min={0}\n                                max={1}\n                                step={0.1}\n                                onChange={(e) => {\n                                  let getBgcolor = {\n                                    ...slides_.container.overlayColor,\n                                  };\n                                  getBgcolor[\"opacity\"] = e;\n                                  this.updateSlides(\n                                    getBgcolor,\n                                    \"container\",\n                                    \"overlayColor\"\n                                  );\n                                }}\n                              />\n                              {/* bg color  */}\n                              {/* background  */}\n                            </>\n                          ) : (\n                            <>\n                              {/* link  */}\n                              <p>\n                                <strong>{__(\"Button 1\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <ToggleControl\n                                label={\n                                  slides_.buttoneOne.enable\n                                    ? __(\"Disable\", \"unlimited-blocks\")\n                                    : __(\"Enable\", \"unlimited-blocks\")\n                                }\n                                checked={slides_.buttoneOne.enable}\n                                onChange={(e) => {\n                                  this.updateSlides(e, \"buttoneOne\", \"enable\");\n                                }}\n                              />\n                              {slides_.buttoneOne.enable && (\n                                <div className=\"ubl-blocks-linkbtn\">\n                                  <LinkControl\n                                    value={{\n                                      url: slides_.buttoneOne.link,\n                                      opensInNewTab: slides_.buttoneOne.target,\n                                    }}\n                                    onChange={(vall) => {\n                                      if (\"url\" in vall) {\n                                        this.updateSlides(\n                                          vall.url,\n                                          \"buttoneOne\",\n                                          \"link\"\n                                        );\n                                      }\n                                      //target\n                                      if (\"opensInNewTab\" in vall) {\n                                        this.updateSlides(\n                                          vall.opensInNewTab,\n                                          \"buttoneOne\",\n                                          \"target\"\n                                        );\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              )}\n                              <p>\n                                <strong>{__(\"Button 2\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <ToggleControl\n                                label={\n                                  slides_.buttoneTwo.enable\n                                    ? __(\"Disable\", \"unlimited-blocks\")\n                                    : __(\"Enable\", \"unlimited-blocks\")\n                                }\n                                checked={slides_.buttoneTwo.enable}\n                                onChange={(e) => {\n                                  this.updateSlides(e, \"buttoneTwo\", \"enable\");\n                                }}\n                              />\n                              {slides_.buttoneTwo.enable && (\n                                <div className=\"ubl-blocks-linkbtn\">\n                                  <LinkControl\n                                    value={{\n                                      url: slides_.buttoneTwo.link,\n                                      opensInNewTab: slides_.buttoneTwo.target,\n                                    }}\n                                    onChange={(vall) => {\n                                      if (\"url\" in vall) {\n                                        this.updateSlides(\n                                          vall.url,\n                                          \"buttoneTwo\",\n                                          \"link\"\n                                        );\n                                      }\n                                      //target\n                                      if (\"opensInNewTab\" in vall) {\n                                        this.updateSlides(\n                                          vall.opensInNewTab,\n                                          \"buttoneTwo\",\n                                          \"target\"\n                                        );\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              )}\n                              {/* link  */}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"add-new-slide\">\n                  <span\n                    onClick={() => {\n                      this.addSlide();\n                    }}\n                  >\n                    <i class=\"fas fa-plus\"></i>Add New\n                  </span>\n                </div>\n                <p>\n                  <strong>{__(\"Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting.dimension.width\n                      ? __(\"Full Width\", \"unlimited-blocks\")\n                      : __(\"Custom Width\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.dimension.width}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"dimension\", \"width\");\n                  }}\n                />\n                {sliderSetting.dimension.width && (\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={sliderSetting.dimension.custom_width}\n                    min={200}\n                    max={1400}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"dimension\", \"custom_width\")\n                    }\n                  />\n                )}\n                <p>\n                  <strong>{__(\"Height\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting.dimension.width\n                      ? __(\"Auto\", \"unlimited-blocks\")\n                      : __(\"Custom Height\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.dimension.height}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"dimension\", \"height\");\n                  }}\n                />\n                {sliderSetting.dimension.height && (\n                  <RangeControl\n                    label={__(\"Height\", \"unlimited-blocks\")}\n                    value={sliderSetting.dimension.custom_height}\n                    min={360}\n                    max={1000}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"dimension\", \"custom_height\")\n                    }\n                  />\n                )}\n              </>\n            ) : (\n              <div className=\"slides-settings\">\n                <>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Navigation\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={sliderSetting.triggerActive}\n                      onChange={(e) => {\n                        this.updateGlobalSlide(e.target.value, \"triggerActive\");\n                      }}\n                    >\n                      <option value=\"both\">\n                        {__(\"Arrows and Dots\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"arrows\">\n                        {__(\"Arrows\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"dots\">{__(\"Dots\", \"unlimited-blocks\")}</option>\n                      <option value=\"n\">{__(\"None\", \"unlimited-blocks\")}</option>\n                    </select>\n                  </div>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Transition\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={sliderSetting.sliderEffect}\n                      onChange={(e) => {\n                        this.updateGlobalSlide(e.target.value, \"sliderEffect\");\n                      }}\n                    >\n                      <option value=\"fadeEffect\">\n                        {__(\"Fade\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"slideEffect\">\n                        {__(\"Slide\", \"unlimited-blocks\")}\n                      </option>\n                    </select>\n                  </div>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Autoplay\", \"unlimited-blocks\")}</p>\n                    <ToggleControl\n                      checked={sliderSetting.autoTrigger.enable}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(e, \"autoTrigger\", \"enable\")\n                      }\n                    />\n                  </div>\n                  {sliderSetting.autoTrigger.enable && (\n                    <RangeControl\n                      label={__(\"Autoplay Speed\", \"unlimited-blocks\")}\n                      value={sliderSetting.autoTrigger.delay}\n                      min={0}\n                      max={12}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(e, \"autoTrigger\", \"delay\")\n                      }\n                    />\n                  )}\n                  {(sliderSetting.triggerActive == \"both\" ||\n                    sliderSetting.triggerActive == \"dots\") && (\n                    <div\n                      className={`slide-panel-single ${\n                        thisState.commonDropDown == \"dots-style\" ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        class=\"slide-nav\"\n                        onClick={() => {\n                          if (thisState.commonDropDown == \"dots-style\") {\n                            this.setState({ commonDropDown: \"\" });\n                          } else {\n                            this.setState({ commonDropDown: \"dots-style\" });\n                          }\n                        }}\n                      >\n                        <span>{__(\"Dotts Styles\", \"unlimited-blocks\")}</span>\n                        <div class=\"caret\">\n                          <i class=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        <RangeControl\n                          label={__(\"Size\", \"unlimited-blocks\")}\n                          value={sliderSetting.linearTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"linearTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.color}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"color\"\n                            );\n                          }}\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Active Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.activeColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"activeColor\"\n                            );\n                          }}\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  {(sliderSetting.triggerActive == \"both\" ||\n                    sliderSetting.triggerActive == \"arrows\") && (\n                    <div\n                      className={`slide-panel-single ${\n                        thisState.commonDropDown == \"arrow-style\"\n                          ? \"active\"\n                          : \"\"\n                      }`}\n                    >\n                      <div\n                        class=\"slide-nav\"\n                        onClick={() => {\n                          if (thisState.commonDropDown == \"arrow-style\") {\n                            this.setState({ commonDropDown: \"\" });\n                          } else {\n                            this.setState({ commonDropDown: \"arrow-style\" });\n                          }\n                        }}\n                      >\n                        <span>{__(\"Arrows Styles\", \"unlimited-blocks\")}</span>\n                        <div class=\"caret\">\n                          <i class=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        <RangeControl\n                          label={__(\"Font Size\", \"unlimited-blocks\")}\n                          value={sliderSetting.leftRightTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"leftRightTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPalette\n                          value={sliderSetting.leftRightTrigger.color}\n                          onChange={(color) =>\n                            this.updateGlobalSlide(\n                              color,\n                              \"leftRightTrigger\",\n                              \"color\"\n                            )\n                          }\n                        />\n                      </div>\n                    </div>\n                  )}\n                  {/* arrows and dots */}\n                </>\n              </div>\n            )}\n          </div>\n        </PanelBody>\n        <PanelBody\n          title={__(\"Content Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div className=\"ubl-slider-panel\">\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.wrapper.alignment == \"left\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.wrapper.alignment == \"center\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.wrapper.alignment == \"right\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n            <p>\n              <strong>{__(\"Text Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.wrapper.textAlign == \"left\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.wrapper.textAlign == \"center\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.wrapper.textAlign == \"right\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n\n            <p>\n              <strong>{__(\"Text Vertical Space\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={sliderSetting.wrapper.spacing}\n              min={0}\n              max={30}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"wrapper\", \"spacing\");\n              }}\n            />\n            {/* --------------heading style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"heading-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"heading-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"heading-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Heading Styles\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSetting.title.fontSize}\n                  min={0}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"title\", \"fontSize\");\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={sliderSetting.title.color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, \"title\", \"color\")\n                  }\n                />\n              </div>\n            </div>\n            {/* --------------heading style---------------- */}\n            {/* --------------description style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"description-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"description-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"description-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Description Setting\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSetting.text.fontSize}\n                  min={0}\n                  max={100}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"text\", \"fontSize\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={sliderSetting.text.color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, \"text\", \"color\")\n                  }\n                />\n              </div>\n            </div>\n            {/* --------------description style---------------- */}\n            {/* --------------button style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"button-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"button-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"button-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Button Setting\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <div className=\"ubl-switcher-button-section\">\n                  <span\n                    className={\n                      activeTwoBtnState == \"buttoneOne\" ? \"selected\" : \"\"\n                    }\n                    onClick={() => {\n                      this.setState({ twoBtn: \"buttoneOne\" });\n                    }}\n                  >\n                    {__(\"Button 1\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    className={\n                      activeTwoBtnState == \"buttoneTwo\" ? \"selected\" : \"\"\n                    }\n                    onClick={() => {\n                      this.setState({ twoBtn: \"buttoneTwo\" });\n                    }}\n                  >\n                    {__(\"Button 2\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].fontSize}\n                  min={0}\n                  max={70}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"fontSize\")\n                  }\n                />\n                <p>{__(\"Color\", \"unlimited-blocks\")}</p>\n                <ColorPalette\n                  value={sliderSetting[activeTwoBtnState].color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, activeTwoBtnState, \"color\")\n                  }\n                />\n                <p>{__(\"Background Color\", \"unlimited-blocks\")}</p>\n                {/* bg color  */}\n                <div class=\"ubl-switcher-button-section sub\">\n                  <span\n                    onClick={() => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"type\"] = \"color\";\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                    className={\n                      sliderSetting[activeTwoBtnState].backgroundColor.type ==\n                      \"color\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Solid\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"type\"] = \"gradient\";\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                    className={\n                      sliderSetting[activeTwoBtnState].backgroundColor.type ==\n                      \"gradient\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Gradient\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                {\"color\" ==\n                sliderSetting[activeTwoBtnState].backgroundColor.type ? (\n                  <ColorPicker\n                    color={\n                      sliderSetting[activeTwoBtnState].backgroundColor.color\n                    }\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"color\"] = color;\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                  />\n                ) : (\n                  <GradientPicker\n                    disableCustomGradients={false}\n                    value={\n                      sliderSetting[activeTwoBtnState].backgroundColor.gradient\n                    }\n                    gradients={UBLGraDientColors}\n                    onChange={(newGradient) => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"gradient\"] = newGradient;\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                  />\n                )}\n                {/* bg color  */}\n                <RangeControl\n                  label={__(\"Height\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].height}\n                  min={0}\n                  max={30}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"height\")\n                  }\n                />\n                <RangeControl\n                  label={__(\"Width\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].width}\n                  min={0}\n                  max={30}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"width\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting[activeTwoBtnState].border\n                      ? __(\"Disable\", \"unlimited-blocks\")\n                      : __(\"Enable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting[activeTwoBtnState].border}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"border\")\n                  }\n                />\n                {sliderSetting[activeTwoBtnState].border && (\n                  <div className=\"icon-border-setting\">\n                    <RangeControl\n                      label={__(\"Border Width\", \"unlimited-blocks\")}\n                      value={sliderSetting[activeTwoBtnState].borderWidth}\n                      min={0}\n                      max={100}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          activeTwoBtnState,\n                          \"borderWidth\"\n                        )\n                      }\n                    />\n                    <RangeControl\n                      label={__(\"Border Radius\", \"unlimited-blocks\")}\n                      value={sliderSetting[activeTwoBtnState].borderRadius}\n                      min={0}\n                      max={50}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          activeTwoBtnState,\n                          \"borderRadius\"\n                        )\n                      }\n                    />\n                    <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n                    <ColorPalette\n                      value={sliderSetting[activeTwoBtnState].borderColor}\n                      onChange={(color) =>\n                        this.updateGlobalSlide(\n                          color,\n                          activeTwoBtnState,\n                          \"borderColor\"\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n            {/* --------------button style---------------- */}\n          </div>\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"ubl-block-slide-wrapper\">\n        <div className=\"ubl-slider-bullet\">\n          <ul className=\"ubl-slider-ul-bullet\">\n            {slides.map((val, index_) => {\n              return (\n                <li\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <span\n                    onClick={(e) => {\n                      this.setState({\n                        selectedSlide: index_,\n                        sideContentOpen: false,\n                      });\n                    }}\n                  ></span>\n                </li>\n              );\n            })}\n            {slides.length < 8 && (\n              <li className=\"add-item\">\n                <span\n                  onClick={() => {\n                    this.addSlide();\n                  }}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n              </li>\n            )}\n          </ul>\n        </div>\n        <div className=\"ubl-slider-container\">\n          {/* slider trigger */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"dots\") && (\n            <ul className=\"ubl-slider-bullet-trigger\">\n              {slides.map((val, index_) => {\n                let trigStyle = {\n                  height: sliderSetting.linearTrigger.fontSize + \"px\",\n                  width: sliderSetting.linearTrigger.fontSize + \"px\",\n                };\n                trigStyle =\n                  index_ != stateIndex\n                    ? {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor: sliderSetting.linearTrigger.color,\n                        },\n                      }\n                    : {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor:\n                            sliderSetting.linearTrigger.activeColor,\n                        },\n                      };\n                return (\n                  <li className={`${index_ == stateIndex ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyle}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"arrows\") && (\n            <>\n              <div className=\"ubl-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"ubl-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* next prev btn */}\n          {/* slider trigger */}\n          {slides.length > 1 && (\n            <span\n              className=\"ubl-remove-slide\"\n              onClick={(e) => {\n                this.removeSlide();\n              }}\n            >\n              <i className=\"fas fa-trash-alt\"></i>\n            </span>\n          )}\n          <ul className=\"ubl-slider-ul-slides\" style={SlideulStyle}>\n            {slides.map((val, index_) => {\n              let overLAyColor = {};\n              if (val.container.bgImage) {\n                overLAyColor[\"opacity\"] = val.container.overlayColor.opacity;\n              }\n              if (val.container.overlayColor.type == \"color\") {\n                overLAyColor[\"backgroundColor\"] =\n                  val.container.overlayColor.color;\n              } else if (val.container.overlayColor.type == \"gradient\") {\n                overLAyColor[\"backgroundImage\"] =\n                  val.container.overlayColor.gradient;\n              }\n              return (\n                <li\n                  onClick={(e) => {\n                    this.setState({ selectedSlide: index_ });\n                  }}\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <div className=\"ubl-slider-wrapper\">\n                    <div className=\"ubl-slider-container\">\n                      <div className=\"ubl-slider-content-wrapper\">\n                        {val.container.bgImage && (\n                          <div\n                            className=\"ubl-slider-image-container\"\n                            style={{\n                              backgroundSize: val.container.bgSize,\n                              backgroundImage:\n                                \"url(\" + val.container.bgImage + \")\",\n                            }}\n                          ></div>\n                        )}\n                        <div\n                          className=\"ubl-slider-overlay-color\"\n                          style={overLAyColor}\n                        ></div>\n                        <div className={`ubl-slider-text ${wrapperAlignment}`}>\n                          <div style={wrapperSpacing}>\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h1\"\n                              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n                              value={val.title.text}\n                              allowedFormats={[]}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"title\", \"text\")\n                              }\n                              style={TitleStyle}\n                            />\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h2\"\n                              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n                              allowedFormats={[]}\n                              value={val.text.text}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"text\", \"text\")\n                              }\n                              style={descriptionStyle}\n                            />\n                            <div className=\"button-container\">\n                              {val.buttoneOne.enable && (\n                                <>\n                                  <RichText\n                                    key=\"editable\"\n                                    tagName=\"span\"\n                                    allowedFormats={[]}\n                                    placeholder={__(\n                                      \"Button One\",\n                                      \"unlimited-blocks\"\n                                    )}\n                                    value={val.buttoneOne.text}\n                                    onChange={(e) =>\n                                      this.updateSlides(e, \"buttoneOne\", \"text\")\n                                    }\n                                    style={buttonOneStyle}\n                                  />\n                                </>\n                              )}\n                              {val.buttoneTwo.enable && (\n                                <RichText\n                                  key=\"editable\"\n                                  tagName=\"span\"\n                                  allowedFormats={[]}\n                                  placeholder={__(\"Button Two\", \"unlimited-blocks\")}\n                                  value={val.buttoneTwo.text}\n                                  onChange={(e) =>\n                                    this.updateSlides(e, \"buttoneTwo\", \"text\")\n                                  }\n                                  style={buttonTwoStyle}\n                                />\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>,\n    ];\n    // }\n    // undefined check\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nimport { __ } from \"@wordpress/i18n\";\nimport { RichText } from \"@wordpress/block-editor\";\nconst attrSave = {\n  sliderSetting: {\n    type: \"array\",\n    default: [\n      {\n        dimension: {\n          width: false,\n          custom_width: 580,\n          height: false,\n          custom_height: 360,\n        },\n        sliderEffect: \"fadeEffect\",\n        triggerActive: \"both\",\n        linearTrigger: {\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          activeColor: \"rgba(68,222,68,1)\",\n        },\n        leftRightTrigger: {\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          // backgroundColor: \"\",\n        },\n        autoTrigger: {\n          enable: true,\n          delay: 4,\n        },\n        wrapper: {\n          alignment: \"center\",\n          spacing: 2,\n          textAlign: \"center\",\n        },\n        title: {\n          fontSize: 17,\n          color: \"red\",\n        },\n        text: {\n          fontSize: 17,\n          color: \"red\",\n        },\n        buttoneOne: {\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: {\n            type: \"color\",\n            color: \"#ffbf00\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          },\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n        buttoneTwo: {\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: {\n            type: \"color\",\n            color: \"#ffbf00\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          },\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n      },\n    ],\n  },\n  slides: {\n    type: \"array\",\n    default: [\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(68 132 173)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        // wrapper: {\n        //   bgcolor: \"\",\n        //   border: \"\",\n        //   alignment: \"center\",\n        //   spacing: 2,\n        // },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(32 189 131)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        // wrapper: {\n        //   bgcolor: \"\",\n        //   border: \"\",\n        //   alignment: \"center\",\n        //   spacing: 2,\n        // },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(189 90 32)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        wrapper: {\n          bgcolor: \"\",\n          border: \"\",\n          alignment: \"center\",\n          spacing: 2,\n        },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n    ],\n  },\n};\nlet elementLiSlide = (val, index_, sliderSetting) => {\n  let buttonOneStyle = {};\n  if (sliderSetting.buttoneOne.fontSize)\n    buttonOneStyle.fontSize = sliderSetting.buttoneOne.fontSize;\n  if (sliderSetting.buttoneOne.color)\n    buttonOneStyle.color = sliderSetting.buttoneOne.color;\n\n  if (sliderSetting.buttoneOne.height) {\n    buttonOneStyle.paddingBottom = sliderSetting.buttoneOne.height;\n    buttonOneStyle.paddingTop = sliderSetting.buttoneOne.height;\n  }\n  if (sliderSetting.buttoneOne.width) {\n    buttonOneStyle.paddingLeft = sliderSetting.buttoneOne.width;\n    buttonOneStyle.paddingRight = sliderSetting.buttoneOne.width;\n  }\n\n  buttonOneStyle = sliderSetting.buttoneOne.border\n    ? {\n        ...{\n          borderColor: sliderSetting.buttoneOne.borderColor,\n          borderWidth: sliderSetting.buttoneOne.borderWidth,\n          borderRadius: sliderSetting.buttoneOne.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonOneStyle,\n      }\n    : buttonOneStyle;\n  // background color btn\n  if (sliderSetting.buttoneOne.backgroundColor.type == \"color\") {\n    buttonOneStyle[\"backgroundColor\"] =\n      sliderSetting.buttoneOne.backgroundColor.color;\n  } else if (sliderSetting.buttoneOne.backgroundColor.type == \"gradient\") {\n    buttonOneStyle[\"backgroundImage\"] =\n      sliderSetting.buttoneOne.backgroundColor.gradient;\n  }\n\n  let buttonTwoStyle = {};\n  if (sliderSetting.buttoneTwo.fontSize)\n    buttonTwoStyle.fontSize = sliderSetting.buttoneTwo.fontSize;\n  if (sliderSetting.buttoneTwo.color)\n    buttonTwoStyle.color = sliderSetting.buttoneTwo.color;\n  if (sliderSetting.buttoneTwo.height) {\n    buttonTwoStyle.paddingBottom = sliderSetting.buttoneTwo.height;\n    buttonTwoStyle.paddingTop = sliderSetting.buttoneTwo.height;\n  }\n  if (sliderSetting.buttoneTwo.width) {\n    buttonTwoStyle.paddingLeft = sliderSetting.buttoneTwo.width;\n    buttonTwoStyle.paddingRight = sliderSetting.buttoneTwo.width;\n  }\n\n  buttonTwoStyle = sliderSetting.buttoneTwo.border\n    ? {\n        ...{\n          borderColor: sliderSetting.buttoneTwo.borderColor,\n          borderWidth: sliderSetting.buttoneTwo.borderWidth,\n          borderRadius: sliderSetting.buttoneTwo.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonTwoStyle,\n      }\n    : buttonTwoStyle;\n  // background color btn\n  if (sliderSetting.buttoneTwo.backgroundColor.type == \"color\") {\n    buttonTwoStyle[\"backgroundColor\"] =\n      sliderSetting.buttoneTwo.backgroundColor.color;\n  } else if (sliderSetting.buttoneTwo.backgroundColor.type == \"gradient\") {\n    buttonTwoStyle[\"backgroundImage\"] =\n      sliderSetting.buttoneTwo.backgroundColor.gradient;\n  }\n  // overlay color\n  let overLAyColor = {};\n  if (val.container.bgImage) {\n    overLAyColor[\"opacity\"] = val.container.overlayColor.opacity;\n  }\n  if (val.container.overlayColor.type == \"color\") {\n    overLAyColor[\"backgroundColor\"] = val.container.overlayColor.color;\n  } else if (val.container.overlayColor.type == \"gradient\") {\n    overLAyColor[\"backgroundImage\"] = val.container.overlayColor.gradient;\n  }\n  // wrapper style\n  let wrapperAlignment = sliderSetting.wrapper.alignment;\n  let wrapperSpacing = {\n    marginTop: sliderSetting.wrapper.spacing + \"px\",\n    marginBottom: sliderSetting.wrapper.spacing + \"px\",\n    textAlign: sliderSetting.wrapper.textAlign,\n  };\n  // wrapper style\n  // title style\n  let TitleStyle = {\n    fontSize: sliderSetting.title.fontSize + \"px\",\n    color: sliderSetting.title.color,\n  };\n  // title style\n  // description style\n  let descriptionStyle = {\n    fontSize: sliderSetting.text.fontSize + \"px\",\n    color: sliderSetting.text.color,\n  };\n  // description style\n\n  return (\n    <li key={index_} className={`slides ${index_ == 0 ? \"selected_\" : \"\"}`}>\n      <div className=\"ubl-slider-wrapper\">\n        <div className=\"ubl-slider-container\">\n          <div className=\"ubl-slider-content-wrapper\">\n            {val.container.bgImage && (\n              <div\n                className=\"ubl-slider-image-container\"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(\" + val.container.bgImage + \")\",\n                }}\n              ></div>\n            )}\n            <div\n              className=\"ubl-slider-overlay-color\"\n              style={overLAyColor}\n            ></div>\n            <div className={`ubl-slider-text ${wrapperAlignment}`}>\n              <div style={wrapperSpacing}>\n                <RichText.Content\n                  tagName=\"h1\"\n                  value={__(val.title.text, \"unlimited-blocks\")}\n                  style={TitleStyle}\n                />\n                <RichText.Content\n                  tagName=\"h2\"\n                  value={__(val.text.text, \"unlimited-blocks\")}\n                  style={descriptionStyle}\n                />\n                <div className=\"button-container\">\n                  {val.buttoneOne.enable && (\n                    <>\n                      <a\n                        target={val.buttoneOne.target ? \"_blank\" : null}\n                        rel={\n                          val.buttoneOne.target ? \"noopener noreferrer\" : null\n                        }\n                        href={val.buttoneOne.link}\n                        style={buttonOneStyle}\n                      >\n                        <RichText.Content\n                          tagName=\"span\"\n                          value={val.buttoneOne.text}\n                        />\n                      </a>\n                    </>\n                  )}\n                  {val.buttoneTwo.enable && (\n                    <a\n                      target={val.buttoneTwo.target ? \"_blank\" : null}\n                      rel={val.buttoneTwo.target ? \"noopener noreferrer\" : null}\n                      href={val.buttoneTwo.link}\n                      style={buttonTwoStyle}\n                    >\n                      <RichText.Content\n                        tagName=\"span\"\n                        value={val.buttoneTwo.text}\n                      />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { ubl_block_slider } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/slide\", {\n  title: ubl_block_slider.title,\n  description: ubl_block_slider.description,\n  icon: ubl_block_slider.icon,\n  keywords: ubl_block_slider.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let { sliderSetting } = attributes;\n    let sliderWidth = sliderSetting[0].dimension;\n    let attr_ = { \"data-align\": \"full\" };\n    if (sliderWidth.width && sliderWidth.custom_width) {\n      attr_ = {\n        ...attr_,\n        ...{\n          style: { maxWidth: sliderWidth.custom_width + \"px\" },\n        },\n      };\n    }\n    return attr_;\n  },\n  attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: (props) => {\n    // console.log(\"props\", props);\n    let { slides, sliderSetting } = props.attributes;\n    sliderSetting = sliderSetting[0];\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      // backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let trigStyle = `height: ${sliderSetting.linearTrigger.fontSize}px;width:${sliderSetting.linearTrigger.fontSize}px;background-color: ${sliderSetting.linearTrigger.color};`;\n    let trigStyleObj = {\n      height: sliderSetting.linearTrigger.fontSize + \"px\",\n      width: sliderSetting.linearTrigger.fontSize + \"px\",\n      backgroundColor: sliderSetting.linearTrigger.color,\n    };\n\n    let sliderSettingJson = {};\n    if (sliderSetting.dimension.width)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ width: sliderSetting.dimension.custom_width },\n      };\n    if (sliderSetting.dimension.height)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ height: sliderSetting.dimension.custom_height },\n      };\n    sliderSettingJson = JSON.stringify(sliderSettingJson);\n    return (\n      <div className=\"ubl-block-slide-wrapper\">\n        <div\n          className=\"ubl-slider-container\"\n          sliderDelay={\n            sliderSetting.autoTrigger.delay > 0 &&\n            sliderSetting.autoTrigger.enable\n              ? sliderSetting.autoTrigger.delay\n              : 0\n          }\n        >\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"dots\") && (\n            <ul\n              className=\"ubl-slider-bullet-trigger\"\n              active-color={sliderSetting.linearTrigger.activeColor}\n              childStyle={trigStyle}\n            >\n              {slides.map((val, index_) => {\n                return (\n                  <li className={`${index_ == 0 ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyleObj}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"arrows\") && (\n            <>\n              <div className=\"ubl-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"ubl-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* slider main slides */}\n          <ul\n            className={`ubl-slider-ul-slides ${sliderSetting.sliderEffect}`}\n            sliderSetting={sliderSettingJson}\n          >\n            {slides.map((val, index_) => {\n              return elementLiSlide(val, index_, sliderSetting);\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n});\n","import {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  SelectControl,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\n// let bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slideIndex: 0,\n      trigger: \"linear\",\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  // rest api call\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  updateGlobalSlide = (value, for_, type) => {\n    let sliderSetting = this.props.attributes.sliderSetting;\n    let newSetting = [...sliderSetting];\n    if (type) {\n      newSetting[0][for_][type] = value;\n    } else {\n      newSetting[0][for_] = value;\n    }\n    this.props.setAttributes({ sliderSetting: newSetting });\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost, slideIndex } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n      sliderSetting,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    sliderSetting = sliderSetting[0];\n    let SlideulStyle = null;\n    if (sliderSetting.dimension.height) {\n      SlideulStyle = { minHeight: sliderSetting.dimension.custom_height };\n    }\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let triggerActive = this.state.trigger;\n    let trigStyle = {\n      height: sliderSetting.linearTrigger.fontSize + \"px\",\n      width: sliderSetting.linearTrigger.fontSize + \"px\",\n    };\n    // slider overlay color\n    let sliderOverLayColor = {\n      opacity: sliderSetting.overlayColor.opacity / 10,\n    };\n    if (sliderSetting.overlayColor.type == \"color\") {\n      sliderOverLayColor[\"backgroundColor\"] = sliderSetting.overlayColor.color;\n    } else if (sliderSetting.overlayColor.type == \"gradient\") {\n      sliderOverLayColor[\"backgroundImage\"] =\n        sliderSetting.overlayColor.gradient;\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Slider Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Number Of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={2}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                // console.log(\"ee\", e);\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* <ColorPicker\n              color={sliderSetting.overlayColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateGlobalSlide(color, \"overlayColor\");\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n                className={\n                  sliderSetting.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n                className={\n                  sliderSetting.overlayColor.type == \"gradient\"\n                    ? \"selected\"\n                    : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == sliderSetting.overlayColor.type ? (\n              <ColorPicker\n                color={sliderSetting.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={sliderSetting.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={sliderSetting.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...sliderSetting.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n              }}\n            />\n            {/* bg color  */}\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.contentAlign == \"left\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.contentAlign == \"center\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.contentAlign == \"right\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n            <p>\n              <strong>\n                {__(\"Slider Dimension \", \"unlimited-blocks\")}\n                <small className=\"dull_grey\">\n                  ({__(\"custom Height\", \"unlimited-blocks\")}/\n                  {__(\"Width\", \"unlimited-blocks\")})\n                </small>\n              </strong>\n            </p>\n            <ToggleControl\n              label={\n                sliderSetting.dimension.width\n                  ? __(\"Custom Width\", \"unlimited-blocks\")\n                  : __(\"Auto Width\", \"unlimited-blocks\")\n              }\n              checked={sliderSetting.dimension.width}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"dimension\", \"width\");\n              }}\n            />\n            {sliderSetting.dimension.width && (\n              <RangeControl\n                value={sliderSetting.dimension.custom_width}\n                min={200}\n                max={1400}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"dimension\", \"custom_width\")\n                }\n              />\n            )}\n            <ToggleControl\n              label={\n                sliderSetting.dimension.height\n                  ? __(\"Custom Height\", \"unlimited-blocks\")\n                  : __(\"Auto Height\", \"unlimited-blocks\")\n              }\n              checked={sliderSetting.dimension.height}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"dimension\", \"height\");\n              }}\n            />\n            {sliderSetting.dimension.height && (\n              <RangeControl\n                value={sliderSetting.dimension.custom_height}\n                min={360}\n                max={1000}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"dimension\", \"custom_height\")\n                }\n              />\n            )}\n            <p className=\"block-inside\">{__(\"Slider Effect\", \"unlimited-blocks\")}</p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateGlobalSlide(\"slideEffect\", \"sliderEffect\")\n                }\n                className={\n                  sliderSetting.sliderEffect == \"slideEffect\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Slide\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateGlobalSlide(\"fadeEffect\", \"sliderEffect\")\n                }\n                className={\n                  sliderSetting.sliderEffect == \"fadeEffect\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Fade\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p className=\"block-inside\">{__(\"Trigger\", \"unlimited-blocks\")}</p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ trigger: \"linear\" })}\n                className={triggerActive == \"linear\" ? \"selected\" : \"\"}\n              >\n                {__(\"Linear\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ trigger: \"left\" })}\n                className={triggerActive == \"left\" ? \"selected\" : \"\"}\n              >\n                {__(\"Left Right\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ trigger: \"auto\" })}\n                className={triggerActive == \"auto\" ? \"selected\" : \"\"}\n              >\n                {__(\"Auto\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {triggerActive == \"linear\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.linearTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.linearTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"linearTrigger\", \"enable\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Position\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() => {\n                      this.updateGlobalSlide(\"in\", \"linearTrigger\", \"place\");\n                    }}\n                    className={\n                      sliderSetting.linearTrigger.place == \"in\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"In\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() => {\n                      this.updateGlobalSlide(\"out\", \"linearTrigger\", \"place\");\n                    }}\n                    className={\n                      sliderSetting.linearTrigger.place == \"out\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Out\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <p>\n                  <strong>{__(\"Trigger Type\", \"unlimited-blocks\")}</strong>\n                </p>\n                {sliderSetting.linearTrigger.enable && (\n                  <>\n                    {/* dk */}\n                    <div class=\"ubl-switcher-button-section\">\n                      <span\n                        onClick={() => {\n                          this.updateGlobalSlide(\n                            \"bullet\",\n                            \"linearTrigger\",\n                            \"trigger\"\n                          );\n                        }}\n                        className={\n                          sliderSetting.linearTrigger.trigger == \"bullet\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Bullets\", \"unlimited-blocks\")}\n                      </span>\n                      <span\n                        onClick={() => {\n                          this.updateGlobalSlide(\n                            \"thumbnail\",\n                            \"linearTrigger\",\n                            \"trigger\"\n                          );\n                        }}\n                        className={\n                          sliderSetting.linearTrigger.trigger == \"thumbnail\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Thumbnail\", \"unlimited-blocks\")}\n                      </span>\n                    </div>\n                    {/* dk */}\n                    {sliderSetting.linearTrigger.trigger == \"bullet\" ? (\n                      <>\n                        <RangeControl\n                          label=\"Size\"\n                          value={sliderSetting.linearTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"linearTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.color}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"color\"\n                            );\n                          }}\n                        />\n                        <p>\n                          <strong>{__(\"Active Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.activeColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"activeColor\"\n                            );\n                          }}\n                        />\n                      </>\n                    ) : (\n                      <h1>{__(\"thumbnail design\", \"unlimited-blocks\")}</h1>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n            {triggerActive == \"left\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.leftRightTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.leftRightTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"leftRightTrigger\", \"enable\")\n                  }\n                />\n                {sliderSetting.leftRightTrigger.enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={sliderSetting.leftRightTrigger.fontSize}\n                      min={0}\n                      max={70}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          \"leftRightTrigger\",\n                          \"fontSize\"\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={sliderSetting.leftRightTrigger.color}\n                      onChange={(color) =>\n                        this.updateGlobalSlide(\n                          color,\n                          \"leftRightTrigger\",\n                          \"color\"\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={sliderSetting.leftRightTrigger.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateGlobalSlide(\n                          color,\n                          \"leftRightTrigger\",\n                          \"backgroundColor\"\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {triggerActive == \"auto\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.autoTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.autoTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"autoTrigger\", \"enable\")\n                  }\n                />\n                {sliderSetting.autoTrigger.enable && (\n                  <RangeControl\n                    label={__(\"Slide Delay\", \"unlimited-blocks\")}\n                    value={sliderSetting.autoTrigger.delay}\n                    min={0}\n                    max={12}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"autoTrigger\", \"delay\")\n                    }\n                  />\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody title={__(\"Excerpt\", \"unlimited-blocks\")} initialOpen={false}>\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <>\n            <div className=\"ubl-block-slide-wrapper\">\n              {title_.enable && (\n                <div\n                  className=\"ubl-block-post-title\"\n                  style={{\n                    justifyContent: title_.align,\n                    borderColor: title_.backgroundColor,\n                  }}\n                >\n                  <RichText\n                    allowedFormats={[]}\n                    key=\"editable\"\n                    tagName=\"h4\"\n                    placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                    value={title_.value}\n                    style={{\n                      fontSize: title_.fontSize + \"px\",\n                      color: title_.color,\n                      backgroundColor: title_.backgroundColor,\n                      fontWeight: title_.fontWeight,\n                      width: title_.width + \"%\",\n                    }}\n                    onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                  />\n                </div>\n              )}\n              <div className=\"ubl-slider-bullet\">\n                <ul className=\"ubl-slider-ul-bullet\">\n                  {posts.map((val, index_) => {\n                    return (\n                      <li\n                        key={index_}\n                        className={slideIndex == index_ ? \"selected_\" : null}\n                      >\n                        <span\n                          onClick={(e) => {\n                            this.setState({ slideIndex: index_ });\n                          }}\n                        ></span>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n              <div className=\"ubl-slider-container\">\n                {/* next prev btn */}\n                {sliderSetting.leftRightTrigger.enable && (\n                  <>\n                    <div className=\"ubl-slider-bullet-next-prev next\">\n                      <span style={leftRightStyle}>\n                        <i class=\"fas fa-arrow-right\"></i>\n                      </span>\n                    </div>\n                    <div className=\"ubl-slider-bullet-next-prev prev\">\n                      <span style={leftRightStyle}>\n                        <i class=\"fas fa-arrow-left\"></i>\n                      </span>\n                    </div>\n                  </>\n                )}\n                {/* next prev btn */}\n                <ul className=\"ubl-slider-ul-slides\" style={SlideulStyle}>\n                  {posts.map((post, slideIndexCu) => {\n                    let postAuthor =\n                      author_ && author_.enable ? post.author : false;\n                    return (\n                      <li className={slideIndex == slideIndexCu && \"selected_\"}>\n                        <div class=\"ubl-slider-wrapper\">\n                          <div class=\"ubl-slider-container\">\n                            <div class=\"ubl-slider-content-wrapper\">\n                              <div\n                                class=\"ubl-slider-image-container\"\n                                style={{\n                                  backgroundImage:\n                                    \"url(\" + post.feature_image + \")\",\n                                }}\n                              ></div>\n                              <div\n                                class=\"ubl-slider-text\"\n                                style={sliderOverLayColor}\n                              >\n                                <div className=\"slider-post-content\">\n                                  <div\n                                    className={`post-wrapper content-align-${sliderSetting.contentAlign}`}\n                                  >\n                                    <div className=\"post-content\">\n                                      <RichText.Content\n                                        className=\"post-heading\"\n                                        tagName={heading_.tag}\n                                        value={post.postTitle}\n                                        style={{\n                                          fontSize: heading_.fontSize,\n                                          color: heading_.color,\n                                        }}\n                                      />\n                                      {showCate_.enable && (\n                                        <p className=\"post-category\">\n                                          {showCateFn(\n                                            this.props,\n                                            post.post_categories,\n                                            showCate_\n                                          )}\n                                        </p>\n                                      )}\n                                      <div className=\"post-meta-all\">\n                                        {postAuthor && (\n                                          <p\n                                            style={{\n                                              color: meta_style_.color,\n                                              fontSize:\n                                                meta_style_.fontSize + \"px\",\n                                            }}\n                                            className=\"post-author\"\n                                          >\n                                            {postAuthor}\n                                          </p>\n                                        )}\n                                        {date_.enable && (\n                                          <>\n                                            {postAuthor && (\n                                              <span\n                                                style={{\n                                                  color: meta_style_.color,\n                                                  fontSize:\n                                                    meta_style_.fontSize + \"px\",\n                                                }}\n                                                className=\"slash\"\n                                              >\n                                                /\n                                              </span>\n                                            )}\n                                            <p\n                                              style={{\n                                                color: meta_style_.color,\n                                                fontSize:\n                                                  meta_style_.fontSize + \"px\",\n                                              }}\n                                              className=\"post-date\"\n                                            >\n                                              <span>{post.post_date}</span>\n                                            </p>\n                                          </>\n                                        )}\n                                        {date_.last_modified && (\n                                          <>\n                                            {(postAuthor || date_.enable) && (\n                                              <span\n                                                style={{\n                                                  color: meta_style_.color,\n                                                  fontSize:\n                                                    meta_style_.fontSize + \"px\",\n                                                }}\n                                                className=\"slash\"\n                                              >\n                                                /\n                                              </span>\n                                            )}\n                                            <p\n                                              style={{\n                                                color: meta_style_.color,\n                                                fontSize:\n                                                  meta_style_.fontSize + \"px\",\n                                              }}\n                                              className=\"post-date-last-modified\"\n                                            >\n                                              <span>Modified: </span>\n                                              <span>\n                                                {post.post_modified_date}\n                                              </span>\n                                            </p>\n                                          </>\n                                        )}\n                                      </div>\n                                      {excerpt_.enable && (\n                                        <p\n                                          style={{\n                                            color: excerpt_.color,\n                                            fontSize: excerpt_.fontSize + \"px\",\n                                          }}\n                                          className=\"post-excerpt\"\n                                        >\n                                          {excerptWords(\n                                            excerpt_.words,\n                                            post.post_excerpt\n                                          )}\n                                        </p>\n                                      )}\n                                      {showTag_.enable && (\n                                        <p\n                                          style={{ color: meta_style_.color }}\n                                          className=\"post-tags\"\n                                        >\n                                          {showTagsFn(post.post_tag, showTag_)}\n                                        </p>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n                {/* slider trigger */}\n                {sliderSetting.linearTrigger.enable && (\n                  <ul\n                    className={`ubl-slider-bullet-trigger thumbnail-image trigger_${sliderSetting.linearTrigger.place}`}\n                  >\n                    {posts.map((post, index_) => {\n                      trigStyle =\n                        index_ != slideIndex\n                          ? {\n                              ...trigStyle,\n                              ...{\n                                backgroundColor:\n                                  sliderSetting.linearTrigger.color,\n                              },\n                            }\n                          : {\n                              ...trigStyle,\n                              ...{\n                                backgroundColor:\n                                  sliderSetting.linearTrigger.activeColor,\n                              },\n                            };\n                      return sliderSetting.linearTrigger.trigger ==\n                        \"thumbnail\" ? (\n                        <li>\n                          <div>\n                            <img src={post.getMedia_.guid.rendered} />\n                          </div>\n                        </li>\n                      ) : (\n                        <li\n                          className={`${\n                            index_ == slideIndex ? \"selected_\" : \"\"\n                          }`}\n                        >\n                          <span style={trigStyle}></span>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                )}\n              </div>\n            </div>\n          </>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { ubl_post_slider } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-slider\", {\n  title: ubl_post_slider.title,\n  description: ubl_post_slider.description,\n  icon: ubl_post_slider.icon,\n  keywords: ubl_post_slider.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let { sliderSetting } = attributes;\n    let sliderWidth = sliderSetting[0].dimension;\n    let attr_ = { \"data-align\": \"full\" };\n    if (sliderWidth.width && sliderWidth.custom_width) {\n      attr_ = {\n        ...attr_,\n        ...{\n          style: { maxWidth: sliderWidth.custom_width + \"px\" },\n        },\n      };\n    }\n    return attr_;\n  },\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import \"./blocks/column-wrapper\";\n// for core styling need add\nimport \"./blocks/block-assets\";\n// for core styling need add\nimport \"./blocks/icon-block\";\n// import './blocks/test-block';\nimport \"./blocks/service-section\";\nimport \"./blocks/pricing-table\";\nimport \"./blocks/progress-bar\";\nimport \"./blocks/progress-bar-pie\";\nimport \"./blocks/ubl-block-slider\";\nimport \"./blocks/post-grid-layout\";\nimport \"./blocks/post-list-layout\";\nimport \"./blocks/ubl-post-slider\";\nimport \"./blocks/post-category-layout\";\nimport \"./blocks/post-image-layout\";\nimport \"./blocks/post-image-layout-two-post\";\nimport \"./blocks/post-image-layout-three-post\";\nimport \"./blocks/post-image-layout-four-post\";\nimport \"./blocks/post-image-layout-five-post\";\nimport \"./blocks/post-image-layout-six-post\";\n// layout block\nimport \"./blocks/block-layout-pre\";\nimport \"./blocks/column-blocks-column\";\n","module.exports = wp[\"blockEditor\"];","module.exports = wp[\"blocks\"];","module.exports = wp[\"components\"];","module.exports = wp[\"data\"];","module.exports = wp[\"element\"];","module.exports = wp[\"htmlEntities\"];","module.exports = wp[\"i18n\"];"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClgBAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACttpBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAjBA;AAqBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAdA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AArBA;AAyBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AArBA;AApRA;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AAAA;AAyNA;;;;;;;;;;;;ACzNA;AAAA;AA08CA;;;;;;;;;;;;AC18CA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlBA;AAAA;AACA;AADA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAdA;AAAA;AACA;AADA;AAcA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+CA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AAIA;AALA;AASA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAOA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;AClUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AAMA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAkBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAtBA;AAyBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAWA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AAmBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAeA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAvBA;AA2BA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkCA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AACA;AAbA;AAAA;AACA;AADA;AAaA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AAvDA;AAoEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAUA;AACA;AAxFA;AAyFA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAUA;AACA;AA7GA;AA8GA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAHA;AAQA;AAGA;AAAA;AAKA;AAGA;AAAA;AAMA;AACA;AAjKA;AAkKA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAUA;AACA;AA3LA;AA4LA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAAA;AACA;AADA;AAmBA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA7NA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAFA;AAQA;AACA;AAVA;AAAA;AAAA;AAUA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhCA;AAAA;AAAA;AA0DA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAlEA;AAAA;AAAA;AAgOA;AACA;AADA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAmBA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AArQA;AACA;AADA;AAAA;AACA;AAwQA;AAAA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;AAUA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrUA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAUA;;;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAEA;AAAA;AAVA;AAPA;AAsBA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;;;AACA;AAAA;AACA;AAAA;AAYA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AACA;AAFA;AAaA;AADA;AAGA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;;;AACA;AACA;AASA;;;;AAhQA;AACA;AAiQA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5QA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAYA;;;;AA9IA;AACA;AA+IA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1KA;;;;AAIA;;;AAGA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AARA;AAUA;AAAA;AAIA;;;;AAvBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4FA;AACA;AAEA;AAAA;AACA;AAAA;AASA;AACA;AA1GA;AA2GA;AACA;AACA;AAAA;AAIA;AACA;AAhHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAFA;AAeA;AACA;AACA;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;AAIA;AACA;;;;AAAA;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;;AAMA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;AAKA;AACA;;;AAuBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAAA;AAGA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAXA;AAgBA;AAGA;AAAA;AAEA;AAAA;AAMA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAMA;AAGA;AAAA;AAEA;AAAA;AAMA;;;;AA7PA;AACA;AACA;AA8PA;AACA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAHA;AAHA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA;;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAKA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAAA;AAMA;AACA;AAAA;;;;;;;;;;;ACrDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;;;;AAGA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAGA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;;;AAGA;AACA;AACA;AAOA;AAUA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAnhBA;AAuBA;AACA;AAFA;AAQA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAdA;AAuBA;AACA;AAKA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAvBA;AA4BA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAyBA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAuBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAUA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAfA;AAoBA;AAKA;AACA;AAAA;AAAA;AAPA;AAWA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AALA;AAcA;AAKA;AACA;AAAA;AAAA;AAPA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAfA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAfA;AA8BA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAEA;AAAA;AAVA;AATA;AAwBA;AAAA;AAGA;AACA;AACA;AAIA;AAPA;AASA;AAAA;AAGA;AAAA;AAGA;AAAA;AAqBA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAfA;AAmBA;AACA;AACA;AACA;AAAA;AACA;AALA;AASA;AACA;AACA;AACA;AAIA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAtDA;AA0DA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AADA;AAMA;AACA;AACA;AAHA;AAWA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAMA;;;;AAzoBA;AACA;AA2oBA;AAEA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AANA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrxBA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAFA;AAyCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AA1DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAMA;AAxHA;;;;;;;;;;;ACtFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;;;AAGA;AACA;AACA;AACA;AAQA;AACA;AAUA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6FA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AArGA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAWA;AACA;AAAA;AAAA;AAGA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AALA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AATA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;;;;;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAeA;AACA;AAAA;AADA;AAKA;AAAA;AAKA;AAIA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAsBA;AACA;AAFA;AAMA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAkBA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAeA;AAAA;AAEA;AAAA;AAEA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAZA;AAiBA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAZA;AAmBA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAnBA;AAyBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AA0BA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AA0BA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AAZA;AA4KA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AAJA;AAaA;AAAA;AACA;AAAA;AADA;AAGA;AAJA;AAgBA;AAKA;AACA;AAAA;AAAA;AAPA;AAWA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AALA;AAcA;AAKA;AACA;AAAA;AAAA;AAPA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAfA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAiBA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAWA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AAFA;AAKA;AAEA;AAHA;AAIA;AACA;AACA;AANA;AAaA;;;;AA90BA;AACA;AA+0BA;AACA;AACA;AADA;AAAA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACt9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAFA;AAyCA;AACA;AACA;AAFA;AAnEA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAKA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAGA;AAJA;AAMA;AAAA;AAEA;AACA;AAFA;AASA;AA/JA;;;;;;;;;;;AChFA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;AACA;AACA;AAalGA;AA6GA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA9BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAAA;AAAA;AAAA;AACA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAIA;AACA;AAFA;AASA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAOA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAUA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AACA;AAAA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAaA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAsBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAOA;AACA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAjBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAgBA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AANA;AAcA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAPA;AAwBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAkBA;AAlyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzBA;AAqCA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAxJA;AAyJA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAdA;AAwBA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAYA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAaA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AASA;AAAA;AAIA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAaA;AAQA;AACA;AACA;AArRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAaA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAsaA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AACA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AACA;AAMA;AAZA;AAkBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAuBA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAYA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAQA;AATA;AAsBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAmBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAFA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAWA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAaA;AAAA;AAGA;AAcA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAUA;;;;AA92CA;AACA;AA+2CA;;;;;;;;;;;AC54CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAVA;AAaA;AACA;AACA;AAAA;AAAA;AAHA;AAWA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AATA;AAWA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAfA;AAmBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAiBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAoBA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAMA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AAAA;AAQA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AAAA;AAAA;AACA;AAFA;AAQA;AAAA;AAUA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAYA;;;;AAnhCA;AACA;AAohCA;;;;;;;;;;;AChjCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AA+uCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAl2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAiBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAeA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAMA;AAAA;AAEA;AAcA;AAIA;AAAA;AAkBA;AAWA;AAIA;AAAA;AAeA;AAAA;AAEA;AAcA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AApuCA;AACA;AAq2CA;;;;;;;;;;;ACj4CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AA6wCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA/3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAwBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AASA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAKA;AAWA;AAGA;AAAA;AAeA;AAeA;AAGA;AAAA;AAiBA;AAAA;AAaA;AAAA;AAgBA;AAcA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AAlwCA;AACA;AAk4CA;;;;;;;;;;;AC/5CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAKA;AAOA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAikBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA3qBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AA4BA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAmBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AAEA;AAWA;AASA;;;;AAtjBA;AACA;AA8qBA;;;;;;;;;;;ACzsBA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAivCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAn2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAiBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAmBA;AADA;AAKA;AAWA;AAMA;AAAA;AAEA;AAcA;AAIA;AAAA;AAkBA;AAAA;AAeA;AAAA;AAEA;AAcA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AAtuCA;AACA;AAs2CA;;;;;;;;;;;ACl4CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AApBA;AAuqBA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAjyBA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAOA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAGA;AAJA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AAEA;AAYA;AASA;;;;AA3pBA;AACA;AAoyBA;;;;;;;;;;;ACh0BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAOA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAsgCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAhnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAsBA;AADA;AAUA;AAUA;AAKA;AADA;AAMA;AAAA;AAeA;AADA;AAMA;AAaA;AAYA;;;;AA5/BA;AACA;AAmnCA;;;;;;;;;;;AC7oCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AAAA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AAAA;AAGA;AACA;AAMA;AACA;AATA;AAgBA;AACA;AAMA;AACA;AATA;AAgBA;AACA;AAMA;AACA;AATA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAVA;AAuBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAfA;AAmBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAiBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAoBA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AAAA;AAQA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AAAA;AAAA;AACA;AAFA;AAQA;AAAA;AAUA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAYA;;;;AA3lCA;AACA;AA4lCA;;;;;;;;;;;ACxnCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAZA;AAoBA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AA7CA;AAFA;AAuDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAnBA;AAFA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AA3NA;AA+NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAYA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAmBA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AAJA;AASA;AAKA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AAJA;AASA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAaA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAYA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAyBA;AACA;AAAA;AADA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAYA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAYA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AAiBA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAjBA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AALA;AASA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAMA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAcA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AAFA;AAYA;AAAA;AAEA;AAEA;AADA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAZA;AAqBA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAcA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAoBA;AACA;AACA;AACA;AAJA;AAOA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAYA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAaA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAbA;AAuBA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAbA;AAyBA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAMA;AAdA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAfA;AAuBA;AAAA;AAGA;AACA;AAMA;AACA;AATA;AAkBA;AACA;AAMA;AACA;AATA;AAmBA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AADA;AADA;AAUA;AAAA;AAEA;AAEA;AACA;AAMA;AACA;AAAA;AAAA;AATA;AAcA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAcA;AACA;AACA;AACA;AAJA;AAUA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAcA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AAFA;AAUA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAdA;AAiBA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAkBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAgBA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AADA;AAQA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AANA;AAWA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAmBA;AACA;AAFA;AAQA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAXA;AAeA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAVA;AAaA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AAGA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAaA;AAAA;AAEA;AACA;AAGA;AADA;AAJA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AAEA;AAGA;AAEA;AANA;AAUA;AADA;AAZA;AAuBA;AAGA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAZA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAWA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAUA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAEA;AACA;AAGA;AADA;AAJA;AAWA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAEA;AAGA;AAEA;AANA;AAUA;AADA;AAZA;AAuBA;AAGA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAcA;AA52EA;;;;;;;;;;;ACxPA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAFA;AAIA;AAAA;AAEA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AARA;AAeA;AACA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAWA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AApRA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAKA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAeA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAoBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAlSA;;;;;;;;;;;AC9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AATA;AAFA;AAkBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAhGA;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnFA;AAAA;AAAA;AAAA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAWA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAGA;AAAA;AAXA;AARA;AA8BA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAjBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAeA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AAAA;AAOA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAeA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAiBA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AANA;AAWA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAlaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AAIA;AAAA;AACA;AAAA;AADA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAcA;AAvhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AAOA;AASA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAlCA;AAyCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA3DA;AA0EA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA/EA;AAiFA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AA+CA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;;;AAmBA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAIA;AAGA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAUA;AAAA;AAGA;AAAA;AAEA;AACA;AAEA;AADA;AASA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAjBA;AAuBA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AACA;AANA;AAeA;AACA;AACA;AADA;AAGA;AACA;AANA;AAyBA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAGA;AAAA;AAXA;AAVA;AA8BA;AAAA;AAEA;AACA;AAKA;AAPA;AAYA;AAAA;AAKA;AACA;AACA;AAKA;AARA;AAUA;AAAA;AAGA;AAAA;AAGA;AAAA;AAeA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAsBA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAyBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAZA;AAgBA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AA4BA;AAKA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAKA;AACA;AArBA;AA6BA;AAKA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAKA;AACA;AArBA;AA+BA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAYA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAKA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AADA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AADA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AAoBA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAesBA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAyBA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAKA;AAfA;AAmBA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAeA;AACA;AAAA;AAAA;AAFA;AAkBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAUA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAMA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAKA;AADA;AAOA;AADA;AAKA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAGA;AAZA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAoBA;AAMA;AACA;;;;AAz5CA;AACA;AA05CA;;;;;;;;;;;AC/6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAdA;AApDA;AAHA;AA0EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AAsEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AAsEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AA7IA;AA3EA;AACA;AA+RA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AACA;AAGA;AACA;AANA;AASA;AACA;AAFA;AASA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAcA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAYA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AAFA;AAKA;AACA;AAKA;AA1GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACldA;AAKA;AAQA;AACA;AAWA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtBA;AAuBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9BA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAkBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAqBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAUA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAaA;AACA;AACA;AACA;AAJA;AAmBA;AAAA;AAEA;AACA;AAKA;AACA;AARA;AAiBA;AACA;AAKA;AACA;AARA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAiBA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAeA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAsBA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAiBA;AACA;AAAA;AAAA;AAFA;AAcA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AAKA;AACA;AAAA;AAAA;AAPA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAEA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAQA;AACA;AAFA;AAIA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAUA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AAFA;AAKA;AANA;AAeA;AACA;AACA;AAFA;AAKA;AANA;AAYA;AACA;AACA;AAFA;AAKA;AANA;AAgBA;AACA;AACA;AAFA;AAKA;AANA;AAYA;AACA;AACA;AAFA;AAKA;AANA;AAkBA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AAAA;AAAA;AACA;AAFA;AAgBA;AAKA;AADA;AAIA;AAKA;AADA;AAQA;AADA;AAKA;AAIA;AAAA;AAKA;AADA;AAKA;AAAA;AAGA;AAWA;;;;AAtrCA;AACA;AAurCA;;;;;;;;;;;ACntCA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}