{"version":3,"file":"editor.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/dom-serializer/index.js","webpack:///./node_modules/dom-serializer/node_modules/domelementtype/lib/index.js","webpack:///./node_modules/domelementtype/index.js","webpack:///./node_modules/domutils/index.js","webpack:///./node_modules/domutils/lib/helpers.js","webpack:///./node_modules/domutils/lib/legacy.js","webpack:///./node_modules/domutils/lib/manipulation.js","webpack:///./node_modules/domutils/lib/querying.js","webpack:///./node_modules/domutils/lib/stringify.js","webpack:///./node_modules/domutils/lib/traversal.js","webpack:///./node_modules/entities/lib/decode.js","webpack:///./node_modules/entities/lib/decode_codepoint.js","webpack:///./node_modules/entities/lib/encode.js","webpack:///./node_modules/entities/lib/index.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/memize/index.js","webpack:///./node_modules/object-assign/index.js","webpack:///./node_modules/prop-types/checkPropTypes.js","webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./node_modules/react-html-parser/lib/HtmlParser.js","webpack:///./node_modules/react-html-parser/lib/convertNodeToElement.js","webpack:///./node_modules/react-html-parser/lib/dom/attributes/BooleanAttributes.js","webpack:///./node_modules/react-html-parser/lib/dom/attributes/ReactAttributes.js","webpack:///./node_modules/react-html-parser/lib/dom/elements/VoidElements.js","webpack:///./node_modules/react-html-parser/lib/elementTypes/StyleElementType.js","webpack:///./node_modules/react-html-parser/lib/elementTypes/TagElementType.js","webpack:///./node_modules/react-html-parser/lib/elementTypes/TextElementType.js","webpack:///./node_modules/react-html-parser/lib/elementTypes/UnsupportedElementType.js","webpack:///./node_modules/react-html-parser/lib/elementTypes/index.js","webpack:///./node_modules/react-html-parser/lib/index.js","webpack:///./node_modules/react-html-parser/lib/processNodes.js","webpack:///./node_modules/react-html-parser/lib/utils/generatePropsFromAttributes.js","webpack:///./node_modules/react-html-parser/lib/utils/htmlAttributesToReact.js","webpack:///./node_modules/react-html-parser/lib/utils/inlineStyleToObject.js","webpack:///./node_modules/react-html-parser/lib/utils/isEmptyTextNode.js","webpack:///./node_modules/react-html-parser/lib/utils/isValidTagOrAttributeName.js","webpack:///./node_modules/react-html-parser/node_modules/domhandler/index.js","webpack:///./node_modules/react-html-parser/node_modules/domhandler/lib/element.js","webpack:///./node_modules/react-html-parser/node_modules/domhandler/lib/node.js","webpack:///./node_modules/react-html-parser/node_modules/entities/lib/decode_codepoint.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/CollectingHandler.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/FeedHandler.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/Parser.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/ProxyHandler.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/Stream.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/Tokenizer.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/WritableStream.js","webpack:///./node_modules/react-html-parser/node_modules/htmlparser2/lib/index.js","webpack:///./node_modules/react-owl-carousel/umd/OwlCarousel.js","webpack:///./node_modules/react/cjs/react.development.js","webpack:///./node_modules/react/index.js","webpack:///./node_modules/redux/es/redux.js","webpack:///./node_modules/safe-buffer/index.js","webpack:///./node_modules/string_decoder/lib/string_decoder.js","webpack:///./node_modules/symbol-observable/es/index.js","webpack:///./node_modules/symbol-observable/es/ponyfill.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./src/blocks/block-assets/Styler.js","webpack:///./src/blocks/block-assets/blocks-detail.js","webpack:///./src/blocks/block-assets/editor.scss","webpack:///./src/blocks/block-assets/font-family.js","webpack:///./src/blocks/block-assets/icons.js","webpack:///./src/blocks/block-assets/index.js","webpack:///./src/blocks/block-assets/post-functions.js","webpack:///./src/blocks/block-assets/utility-components/BasicToggleNav.js","webpack:///./src/blocks/block-assets/utility-components/animations/animateclasses.js","webpack:///./src/blocks/block-assets/utility-components/animations/index.js","webpack:///./src/blocks/block-assets/utility-components/backgroundType/backgroundType.js","webpack:///./src/blocks/block-assets/utility-components/border/index.js","webpack:///./src/blocks/block-assets/utility-components/box-shadow/index.js","webpack:///./src/blocks/block-assets/utility-components/dimension.js","webpack:///./src/blocks/block-assets/woocommerce/product-functions.js","webpack:///./src/blocks/block-assets/woocommerce/productCategory.js","webpack:///./src/blocks/block-layout-pre/components/edit.js","webpack:///./src/blocks/block-layout-pre/components/layouts/layout-list.js","webpack:///./src/blocks/block-layout-pre/components/layouts/modal.js","webpack:///./src/blocks/block-layout-pre/editor.scss","webpack:///./src/blocks/block-layout-pre/index.js","webpack:///./src/blocks/column-blocks-column/edit.js","webpack:///./src/blocks/column-blocks-column/index.js","webpack:///./src/blocks/column-blocks-column/styles/editor.scss","webpack:///./src/blocks/column-wrapper/columnOptions.js","webpack:///./src/blocks/column-wrapper/edit.js","webpack:///./src/blocks/column-wrapper/index.js","webpack:///./src/blocks/column-wrapper/style/editor.scss","webpack:///./src/blocks/icon-block/editor.scss","webpack:///./src/blocks/icon-block/index.js","webpack:///./src/blocks/post-category-layout/edit.js","webpack:///./src/blocks/post-category-layout/editor.scss","webpack:///./src/blocks/post-category-layout/index.js","webpack:///./src/blocks/post-grid-layout/edit.js","webpack:///./src/blocks/post-grid-layout/editor.scss","webpack:///./src/blocks/post-grid-layout/index.js","webpack:///./src/blocks/post-image-layout-five-post/edit.js","webpack:///./src/blocks/post-image-layout-five-post/editor.scss","webpack:///./src/blocks/post-image-layout-five-post/index.js","webpack:///./src/blocks/post-image-layout-four-post/edit.js","webpack:///./src/blocks/post-image-layout-four-post/editor.scss","webpack:///./src/blocks/post-image-layout-four-post/index.js","webpack:///./src/blocks/post-image-layout-six-post/edit.js","webpack:///./src/blocks/post-image-layout-six-post/editor.scss","webpack:///./src/blocks/post-image-layout-six-post/index.js","webpack:///./src/blocks/post-image-layout-three-post/edit.js","webpack:///./src/blocks/post-image-layout-three-post/editor.scss","webpack:///./src/blocks/post-image-layout-three-post/index.js","webpack:///./src/blocks/post-image-layout-two-post/edit.js","webpack:///./src/blocks/post-image-layout-two-post/editor.scss","webpack:///./src/blocks/post-image-layout-two-post/index.js","webpack:///./src/blocks/post-image-layout/edit.js","webpack:///./src/blocks/post-image-layout/editor.scss","webpack:///./src/blocks/post-image-layout/index.js","webpack:///./src/blocks/post-list-layout/edit.js","webpack:///./src/blocks/post-list-layout/editor.scss","webpack:///./src/blocks/post-list-layout/index.js","webpack:///./src/blocks/pricing-table/editor.scss","webpack:///./src/blocks/pricing-table/index.js","webpack:///./src/blocks/progress-bar-pie/editor.scss","webpack:///./src/blocks/progress-bar-pie/index.js","webpack:///./src/blocks/progress-bar/editor.scss","webpack:///./src/blocks/progress-bar/index.js","webpack:///./src/blocks/service-section/editor.scss","webpack:///./src/blocks/service-section/index.js","webpack:///./src/blocks/simple-product/edit.js","webpack:///./src/blocks/simple-product/editor.scss","webpack:///./src/blocks/simple-product/index.js","webpack:///./src/blocks/ubl-block-slider/edit.js","webpack:///./src/blocks/ubl-block-slider/editor.scss","webpack:///./src/blocks/ubl-block-slider/index.js","webpack:///./src/blocks/ubl-post-slider/edit.js","webpack:///./src/blocks/ubl-post-slider/editor.scss","webpack:///./src/blocks/ubl-post-slider/index.js","webpack:///./src/editor.js","webpack:///readable-stream (ignored)","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"data\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"htmlEntities\"]","webpack:///external [\"wp\",\"i18n\"]"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/editor.js\");\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/*\n  Module dependencies\n*/\nvar ElementType = require('domelementtype');\nvar entities = require('entities');\n\n/* mixed-case SVG and MathML tags & attributes\n   recognized by the HTML parser, see\n   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n*/\nvar foreignNames = require('./foreignNames.json');\nforeignNames.elementNames.__proto__ = null; /* use as a simple dictionary */\nforeignNames.attributeNames.__proto__ = null;\n\nvar unencodedElements = {\n  __proto__: null,\n  style: true,\n  script: true,\n  xmp: true,\n  iframe: true,\n  noembed: true,\n  noframes: true,\n  plaintext: true,\n  noscript: true\n};\n\n/*\n  Format attributes\n*/\nfunction formatAttrs(attributes, opts) {\n  if (!attributes) return;\n\n  var output = '';\n  var value;\n\n  // Loop through the attributes\n  for (var key in attributes) {\n    value = attributes[key];\n    if (output) {\n      output += ' ';\n    }\n\n    if (opts.xmlMode === 'foreign') {\n      /* fix up mixed-case attribute names */\n      key = foreignNames.attributeNames[key] || key;\n    }\n    output += key;\n    if ((value !== null && value !== '') || opts.xmlMode) {\n      output +=\n        '=\"' +\n        (opts.decodeEntities\n          ? entities.encodeXML(value)\n          : value.replace(/\\\"/g, '&quot;')) +\n        '\"';\n    }\n  }\n\n  return output;\n}\n\n/*\n  Self-enclosing tags (stolen from node-htmlparser)\n*/\nvar singleTag = {\n  __proto__: null,\n  area: true,\n  base: true,\n  basefont: true,\n  br: true,\n  col: true,\n  command: true,\n  embed: true,\n  frame: true,\n  hr: true,\n  img: true,\n  input: true,\n  isindex: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n};\n\nvar render = (module.exports = function(dom, opts) {\n  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];\n  opts = opts || {};\n\n  var output = '';\n\n  for (var i = 0; i < dom.length; i++) {\n    var elem = dom[i];\n\n    if (elem.type === 'root') output += render(elem.children, opts);\n    else if (ElementType.isTag(elem)) output += renderTag(elem, opts);\n    else if (elem.type === ElementType.Directive)\n      output += renderDirective(elem);\n    else if (elem.type === ElementType.Comment) output += renderComment(elem);\n    else if (elem.type === ElementType.CDATA) output += renderCdata(elem);\n    else output += renderText(elem, opts);\n  }\n\n  return output;\n});\n\nvar foreignModeIntegrationPoints = [\n  'mi',\n  'mo',\n  'mn',\n  'ms',\n  'mtext',\n  'annotation-xml',\n  'foreignObject',\n  'desc',\n  'title'\n];\n\nfunction renderTag(elem, opts) {\n  // Handle SVG / MathML in HTML\n  if (opts.xmlMode === 'foreign') {\n    /* fix up mixed-case element names */\n    elem.name = foreignNames.elementNames[elem.name] || elem.name;\n    /* exit foreign mode at integration points */\n    if (\n      elem.parent &&\n      foreignModeIntegrationPoints.indexOf(elem.parent.name) >= 0\n    )\n      opts = Object.assign({}, opts, { xmlMode: false });\n  }\n  if (!opts.xmlMode && ['svg', 'math'].indexOf(elem.name) >= 0) {\n    opts = Object.assign({}, opts, { xmlMode: 'foreign' });\n  }\n\n  var tag = '<' + elem.name;\n  var attribs = formatAttrs(elem.attribs, opts);\n\n  if (attribs) {\n    tag += ' ' + attribs;\n  }\n\n  if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {\n    tag += '/>';\n  } else {\n    tag += '>';\n    if (elem.children) {\n      tag += render(elem.children, opts);\n    }\n\n    if (!singleTag[elem.name] || opts.xmlMode) {\n      tag += '</' + elem.name + '>';\n    }\n  }\n\n  return tag;\n}\n\nfunction renderDirective(elem) {\n  return '<' + elem.data + '>';\n}\n\nfunction renderText(elem, opts) {\n  var data = elem.data || '';\n\n  // if entities weren't decoded, no need to encode them back\n  if (\n    opts.decodeEntities &&\n    !(elem.parent && elem.parent.name in unencodedElements)\n  ) {\n    data = entities.encodeXML(data);\n  }\n\n  return data;\n}\n\nfunction renderCdata(elem) {\n  return '<![CDATA[' + elem.children[0].data + ']]>';\n}\n\nfunction renderComment(elem) {\n  return '<!--' + elem.data + '-->';\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.isTag = void 0;\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nfunction isTag(elem) {\n    return (elem.type === \"tag\" /* Tag */ ||\n        elem.type === \"script\" /* Script */ ||\n        elem.type === \"style\" /* Style */);\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for Text */\nexports.Text = \"text\" /* Text */;\n/** Type for <? ... ?> */\nexports.Directive = \"directive\" /* Directive */;\n/** Type for <!-- ... --> */\nexports.Comment = \"comment\" /* Comment */;\n/** Type for <script> tags */\nexports.Script = \"script\" /* Script */;\n/** Type for <style> tags */\nexports.Style = \"style\" /* Style */;\n/** Type for Any tag */\nexports.Tag = \"tag\" /* Tag */;\n/** Type for <![CDATA[ ... ]]> */\nexports.CDATA = \"cdata\" /* CDATA */;\n/** Type for <!doctype ...> */\nexports.Doctype = \"doctype\" /* Doctype */;\n","//Types of elements found in the DOM\nmodule.exports = {\n\tText: \"text\", //Text\n\tDirective: \"directive\", //<? ... ?>\n\tComment: \"comment\", //<!-- ... -->\n\tScript: \"script\", //<script> tags\n\tStyle: \"style\", //<style> tags\n\tTag: \"tag\", //Any tag\n\tCDATA: \"cdata\", //<![CDATA[ ... ]]>\n\tDoctype: \"doctype\",\n\n\tisTag: function(elem){\n\t\treturn elem.type === \"tag\" || elem.type === \"script\" || elem.type === \"style\";\n\t}\n};\n","var DomUtils = module.exports;\n\n[\n\trequire(\"./lib/stringify\"),\n\trequire(\"./lib/traversal\"),\n\trequire(\"./lib/manipulation\"),\n\trequire(\"./lib/querying\"),\n\trequire(\"./lib/legacy\"),\n\trequire(\"./lib/helpers\")\n].forEach(function(ext){\n\tObject.keys(ext).forEach(function(key){\n\t\tDomUtils[key] = ext[key].bind(DomUtils);\n\t});\n});\n","// removeSubsets\n// Given an array of nodes, remove any member that is contained by another.\nexports.removeSubsets = function(nodes) {\n\tvar idx = nodes.length, node, ancestor, replace;\n\n\t// Check if each node (or one of its ancestors) is already contained in the\n\t// array.\n\twhile (--idx > -1) {\n\t\tnode = ancestor = nodes[idx];\n\n\t\t// Temporarily remove the node under consideration\n\t\tnodes[idx] = null;\n\t\treplace = true;\n\n\t\twhile (ancestor) {\n\t\t\tif (nodes.indexOf(ancestor) > -1) {\n\t\t\t\treplace = false;\n\t\t\t\tnodes.splice(idx, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tancestor = ancestor.parent;\n\t\t}\n\n\t\t// If the node has been found to be unique, re-insert it.\n\t\tif (replace) {\n\t\t\tnodes[idx] = node;\n\t\t}\n\t}\n\n\treturn nodes;\n};\n\n// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition\nvar POSITION = {\n\tDISCONNECTED: 1,\n\tPRECEDING: 2,\n\tFOLLOWING: 4,\n\tCONTAINS: 8,\n\tCONTAINED_BY: 16\n};\n\n// Compare the position of one node against another node in any other document.\n// The return value is a bitmask with the following values:\n//\n// document order:\n// > There is an ordering, document order, defined on all the nodes in the\n// > document corresponding to the order in which the first character of the\n// > XML representation of each node occurs in the XML representation of the\n// > document after expansion of general entities. Thus, the document element\n// > node will be the first node. Element nodes occur before their children.\n// > Thus, document order orders element nodes in order of the occurrence of\n// > their start-tag in the XML (after expansion of entities). The attribute\n// > nodes of an element occur after the element and before its children. The\n// > relative order of attribute nodes is implementation-dependent./\n// Source:\n// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n//\n// @argument {Node} nodaA The first node to use in the comparison\n// @argument {Node} nodeB The second node to use in the comparison\n//\n// @return {Number} A bitmask describing the input nodes' relative position.\n//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n//         a description of these values.\nvar comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {\n\tvar aParents = [];\n\tvar bParents = [];\n\tvar current, sharedParent, siblings, aSibling, bSibling, idx;\n\n\tif (nodeA === nodeB) {\n\t\treturn 0;\n\t}\n\n\tcurrent = nodeA;\n\twhile (current) {\n\t\taParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\tcurrent = nodeB;\n\twhile (current) {\n\t\tbParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\n\tidx = 0;\n\twhile (aParents[idx] === bParents[idx]) {\n\t\tidx++;\n\t}\n\n\tif (idx === 0) {\n\t\treturn POSITION.DISCONNECTED;\n\t}\n\n\tsharedParent = aParents[idx - 1];\n\tsiblings = sharedParent.children;\n\taSibling = aParents[idx];\n\tbSibling = bParents[idx];\n\n\tif (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n\t\tif (sharedParent === nodeB) {\n\t\t\treturn POSITION.FOLLOWING | POSITION.CONTAINED_BY;\n\t\t}\n\t\treturn POSITION.FOLLOWING;\n\t} else {\n\t\tif (sharedParent === nodeA) {\n\t\t\treturn POSITION.PRECEDING | POSITION.CONTAINS;\n\t\t}\n\t\treturn POSITION.PRECEDING;\n\t}\n};\n\n// Sort an array of nodes based on their relative position in the document and\n// remove any duplicate nodes. If the array contains nodes that do not belong\n// to the same document, sort order is unspecified.\n//\n// @argument {Array} nodes Array of DOM nodes\n//\n// @returns {Array} collection of unique nodes, sorted in document order\nexports.uniqueSort = function(nodes) {\n\tvar idx = nodes.length, node, position;\n\n\tnodes = nodes.slice();\n\n\twhile (--idx > -1) {\n\t\tnode = nodes[idx];\n\t\tposition = nodes.indexOf(node);\n\t\tif (position > -1 && position < idx) {\n\t\t\tnodes.splice(idx, 1);\n\t\t}\n\t}\n\tnodes.sort(function(a, b) {\n\t\tvar relative = comparePos(a, b);\n\t\tif (relative & POSITION.PRECEDING) {\n\t\t\treturn -1;\n\t\t} else if (relative & POSITION.FOLLOWING) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\treturn nodes;\n};\n","var ElementType = require(\"domelementtype\");\nvar isTag = exports.isTag = ElementType.isTag;\n\nexports.testElement = function(options, element){\n\tfor(var key in options){\n\t\tif(!options.hasOwnProperty(key));\n\t\telse if(key === \"tag_name\"){\n\t\t\tif(!isTag(element) || !options.tag_name(element.name)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(key === \"tag_type\"){\n\t\t\tif(!options.tag_type(element.type)) return false;\n\t\t} else if(key === \"tag_contains\"){\n\t\t\tif(isTag(element) || !options.tag_contains(element.data)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(!element.attribs || !options[key](element.attribs[key])){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nvar Checks = {\n\ttag_name: function(name){\n\t\tif(typeof name === \"function\"){\n\t\t\treturn function(elem){ return isTag(elem) && name(elem.name); };\n\t\t} else if(name === \"*\"){\n\t\t\treturn isTag;\n\t\t} else {\n\t\t\treturn function(elem){ return isTag(elem) && elem.name === name; };\n\t\t}\n\t},\n\ttag_type: function(type){\n\t\tif(typeof type === \"function\"){\n\t\t\treturn function(elem){ return type(elem.type); };\n\t\t} else {\n\t\t\treturn function(elem){ return elem.type === type; };\n\t\t}\n\t},\n\ttag_contains: function(data){\n\t\tif(typeof data === \"function\"){\n\t\t\treturn function(elem){ return !isTag(elem) && data(elem.data); };\n\t\t} else {\n\t\t\treturn function(elem){ return !isTag(elem) && elem.data === data; };\n\t\t}\n\t}\n};\n\nfunction getAttribCheck(attrib, value){\n\tif(typeof value === \"function\"){\n\t\treturn function(elem){ return elem.attribs && value(elem.attribs[attrib]); };\n\t} else {\n\t\treturn function(elem){ return elem.attribs && elem.attribs[attrib] === value; };\n\t}\n}\n\nfunction combineFuncs(a, b){\n\treturn function(elem){\n\t\treturn a(elem) || b(elem);\n\t};\n}\n\nexports.getElements = function(options, element, recurse, limit){\n\tvar funcs = Object.keys(options).map(function(key){\n\t\tvar value = options[key];\n\t\treturn key in Checks ? Checks[key](value) : getAttribCheck(key, value);\n\t});\n\n\treturn funcs.length === 0 ? [] : this.filter(\n\t\tfuncs.reduce(combineFuncs),\n\t\telement, recurse, limit\n\t);\n};\n\nexports.getElementById = function(id, element, recurse){\n\tif(!Array.isArray(element)) element = [element];\n\treturn this.findOne(getAttribCheck(\"id\", id), element, recurse !== false);\n};\n\nexports.getElementsByTagName = function(name, element, recurse, limit){\n\treturn this.filter(Checks.tag_name(name), element, recurse, limit);\n};\n\nexports.getElementsByTagType = function(type, element, recurse, limit){\n\treturn this.filter(Checks.tag_type(type), element, recurse, limit);\n};\n","exports.removeElement = function(elem){\n\tif(elem.prev) elem.prev.next = elem.next;\n\tif(elem.next) elem.next.prev = elem.prev;\n\n\tif(elem.parent){\n\t\tvar childs = elem.parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 1);\n\t}\n};\n\nexports.replaceElement = function(elem, replacement){\n\tvar prev = replacement.prev = elem.prev;\n\tif(prev){\n\t\tprev.next = replacement;\n\t}\n\n\tvar next = replacement.next = elem.next;\n\tif(next){\n\t\tnext.prev = replacement;\n\t}\n\n\tvar parent = replacement.parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds[childs.lastIndexOf(elem)] = replacement;\n\t}\n};\n\nexports.appendChild = function(elem, child){\n\tchild.parent = elem;\n\n\tif(elem.children.push(child) !== 1){\n\t\tvar sibling = elem.children[elem.children.length - 2];\n\t\tsibling.next = child;\n\t\tchild.prev = sibling;\n\t\tchild.next = null;\n\t}\n};\n\nexports.append = function(elem, next){\n\tvar parent = elem.parent,\n\t\tcurrNext = elem.next;\n\n\tnext.next = currNext;\n\tnext.prev = elem;\n\telem.next = next;\n\tnext.parent = parent;\n\n\tif(currNext){\n\t\tcurrNext.prev = next;\n\t\tif(parent){\n\t\t\tvar childs = parent.children;\n\t\t\tchilds.splice(childs.lastIndexOf(currNext), 0, next);\n\t\t}\n\t} else if(parent){\n\t\tparent.children.push(next);\n\t}\n};\n\nexports.prepend = function(elem, prev){\n\tvar parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 0, prev);\n\t}\n\n\tif(elem.prev){\n\t\telem.prev.next = prev;\n\t}\n\t\n\tprev.parent = parent;\n\tprev.prev = elem.prev;\n\tprev.next = elem;\n\telem.prev = prev;\n};\n\n\n","var isTag = require(\"domelementtype\").isTag;\n\nmodule.exports = {\n\tfilter: filter,\n\tfind: find,\n\tfindOneChild: findOneChild,\n\tfindOne: findOne,\n\texistsOne: existsOne,\n\tfindAll: findAll\n};\n\nfunction filter(test, element, recurse, limit){\n\tif(!Array.isArray(element)) element = [element];\n\n\tif(typeof limit !== \"number\" || !isFinite(limit)){\n\t\tlimit = Infinity;\n\t}\n\treturn find(test, element, recurse !== false, limit);\n}\n\nfunction find(test, elems, recurse, limit){\n\tvar result = [], childs;\n\n\tfor(var i = 0, j = elems.length; i < j; i++){\n\t\tif(test(elems[i])){\n\t\t\tresult.push(elems[i]);\n\t\t\tif(--limit <= 0) break;\n\t\t}\n\n\t\tchilds = elems[i].children;\n\t\tif(recurse && childs && childs.length > 0){\n\t\t\tchilds = find(test, childs, recurse, limit);\n\t\t\tresult = result.concat(childs);\n\t\t\tlimit -= childs.length;\n\t\t\tif(limit <= 0) break;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction findOneChild(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(test(elems[i])) return elems[i];\n\t}\n\n\treturn null;\n}\n\nfunction findOne(test, elems){\n\tvar elem = null;\n\n\tfor(var i = 0, l = elems.length; i < l && !elem; i++){\n\t\tif(!isTag(elems[i])){\n\t\t\tcontinue;\n\t\t} else if(test(elems[i])){\n\t\t\telem = elems[i];\n\t\t} else if(elems[i].children.length > 0){\n\t\t\telem = findOne(test, elems[i].children);\n\t\t}\n\t}\n\n\treturn elem;\n}\n\nfunction existsOne(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(\n\t\t\tisTag(elems[i]) && (\n\t\t\t\ttest(elems[i]) || (\n\t\t\t\t\telems[i].children.length > 0 &&\n\t\t\t\t\texistsOne(test, elems[i].children)\n\t\t\t\t)\n\t\t\t)\n\t\t){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction findAll(test, rootElems){\n\tvar result = [];\n\tvar stack = rootElems.slice();\n\twhile(stack.length){\n\t\tvar elem = stack.shift();\n\t\tif(!isTag(elem)) continue;\n\t\tif (elem.children && elem.children.length > 0) {\n\t\t\tstack.unshift.apply(stack, elem.children);\n\t\t}\n\t\tif(test(elem)) result.push(elem);\n\t}\n\treturn result;\n}\n","var ElementType = require(\"domelementtype\"),\n    getOuterHTML = require(\"dom-serializer\"),\n    isTag = ElementType.isTag;\n\nmodule.exports = {\n\tgetInnerHTML: getInnerHTML,\n\tgetOuterHTML: getOuterHTML,\n\tgetText: getText\n};\n\nfunction getInnerHTML(elem, opts){\n\treturn elem.children ? elem.children.map(function(elem){\n\t\treturn getOuterHTML(elem, opts);\n\t}).join(\"\") : \"\";\n}\n\nfunction getText(elem){\n\tif(Array.isArray(elem)) return elem.map(getText).join(\"\");\n\tif(isTag(elem)) return elem.name === \"br\" ? \"\\n\" : getText(elem.children);\n\tif(elem.type === ElementType.CDATA) return getText(elem.children);\n\tif(elem.type === ElementType.Text) return elem.data;\n\treturn \"\";\n}\n","var getChildren = exports.getChildren = function(elem){\n\treturn elem.children;\n};\n\nvar getParent = exports.getParent = function(elem){\n\treturn elem.parent;\n};\n\nexports.getSiblings = function(elem){\n\tvar parent = getParent(elem);\n\treturn parent ? getChildren(parent) : [elem];\n};\n\nexports.getAttributeValue = function(elem, name){\n\treturn elem.attribs && elem.attribs[name];\n};\n\nexports.hasAttrib = function(elem, name){\n\treturn !!elem.attribs && hasOwnProperty.call(elem.attribs, name);\n};\n\nexports.getName = function(elem){\n\treturn elem.name;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar legacy_json_1 = __importDefault(require(\"./maps/legacy.json\"));\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var keys = Object.keys(map).join(\"|\");\n    var replace = getReplacer(map);\n    keys += \"|#[xX][\\\\da-fA-F]+|#\\\\d+\";\n    var re = new RegExp(\"&(?:\" + keys + \");\", \"g\");\n    return function (str) { return String(str).replace(re, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    //TODO consider creating a merged map\n    return function (str) { return String(str).replace(re, replacer); };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            var secondChar = str.charAt(2);\n            if (secondChar === \"X\" || secondChar === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        return map[str.slice(1, -1)];\n    };\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(require(\"./maps/decode.json\"));\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        codePoint = decode_json_1.default[codePoint];\n    }\n    var output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n}\nexports.default = decodeCodePoint;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escape = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\nexports.encodeXML = getInverse(inverseXML, xmlReplacer);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nfunction singleCharReplacer(c) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return \"&#x\" + c.codePointAt(0).toString(16).toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reXmlChars = getInverseReplacer(inverseXML);\nfunction escape(data) {\n    return data\n        .replace(reXmlChars, singleCharReplacer)\n        .replace(reNonASCII, singleCharReplacer);\n}\nexports.escape = escape;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = exports.decodeStrict = exports.decode = void 0;\nvar decode_1 = require(\"./decode\");\nvar encode_1 = require(\"./encode\");\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = require(\"./encode\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return encode_2.encodeXML; } });\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return encode_2.escape; } });\n// Legacy aliases\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nvar decode_2 = require(\"./decode\");\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\n// Legacy aliases\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {Function} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {F & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize( fn, options ) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ ( head ).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args ),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ ( tail ).prev;\n\t\t\t/** @type {MemizeCacheNode} */ ( tail ).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nmodule.exports = memize;\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HtmlParser;\n\nvar _htmlparser = require('htmlparser2');\n\nvar _htmlparser2 = _interopRequireDefault(_htmlparser);\n\nvar _processNodes = require('./processNodes');\n\nvar _processNodes2 = _interopRequireDefault(_processNodes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parses a HTML string and returns a list of React components generated from it\n *\n * @param {String} html The HTML to convert into React component\n * @param {Object} options Options to pass\n * @returns {Array} List of top level React elements\n */\nfunction HtmlParser(html) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$decodeEntities = _ref.decodeEntities,\n      decodeEntities = _ref$decodeEntities === undefined ? true : _ref$decodeEntities,\n      transform = _ref.transform,\n      _ref$preprocessNodes = _ref.preprocessNodes,\n      preprocessNodes = _ref$preprocessNodes === undefined ? function (nodes) {\n    return nodes;\n  } : _ref$preprocessNodes;\n\n  var nodes = preprocessNodes(_htmlparser2.default.parseDOM(html, { decodeEntities: decodeEntities }));\n  return (0, _processNodes2.default)(nodes, transform);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = convertNodeToElement;\n\nvar _elementTypes = require('./elementTypes');\n\nvar _elementTypes2 = _interopRequireDefault(_elementTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts a htmlparser2 node to a React element\n *\n * @param {Object} node The htmlparser2 node to convert\n * @param {Number} index The index of the current node\n * @param {Function} transform Transform function to apply to children of the node\n * @returns {React.Element}\n */\nfunction convertNodeToElement(node, index, transform) {\n  return _elementTypes2.default[node.type](node, index, transform);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * List of boolean attributes\n * These attributes should have their React attribute value set to be the same as their name\n * E.g. <input disabled> = <input disabled>\n *      <input disabled=\"\"> = <input disabled>\n *      <input disabled=\"disabled\"> = <input disabled>\n * @type {Array}\n */\nexports.default = ['allowfullScreen', 'async', 'autoplay', 'capture', 'checked', 'controls', 'default', 'defer', 'disabled', 'formnovalidate', 'hidden', 'loop', 'multiple', 'muted', 'novalidate', 'open', 'playsinline', 'readonly', 'required', 'reversed', 'scoped', 'seamless', 'selected', 'itemscope'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Mapping of standard HTML attributes to their React counterparts\n * List taken and reversed from react/src/renderers/dom/shared/HTMLDOMPropertyConfig.js\n * https://github.com/facebook/react/blob/c9c3c339b757682f1154f1c915eb55e6a8766933/src/renderers/dom/shared/HTMLDOMPropertyConfig.js\n * @type {Object}\n */\nexports.default = {\n  /**\n   * Standard Properties\n   */\n  accept: 'accept',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocomplete: 'autoComplete',\n  autoplay: 'autoPlay',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  challenge: 'challenge',\n  checked: 'checked',\n  cite: 'cite',\n  classid: 'classID',\n  class: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlsList: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  form: 'form',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  for: 'htmlFor',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  slot: 'slot',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n  /**\n   * RDFa Properties\n   */\n  about: 'about',\n  datatype: 'datatype',\n  inlist: 'inlist',\n  prefix: 'prefix',\n  property: 'property',\n  resource: 'resource',\n  typeof: 'typeof',\n  vocab: 'vocab',\n  /**\n   * Non-standard Properties\n   */\n  autocapitalize: 'autoCapitalize',\n  autocorrect: 'autoCorrect',\n  autosave: 'autoSave',\n  color: 'color',\n  itemprop: 'itemProp',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  itemid: 'itemID',\n  itemref: 'itemRef',\n  results: 'results',\n  security: 'security',\n  unselectable: 'unselectable'\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * List of void elements\n * These elements are not allowed to have children\n * @type {Array}\n */\nexports.default = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = StyleElementType;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _generatePropsFromAttributes = require('../utils/generatePropsFromAttributes');\n\nvar _generatePropsFromAttributes2 = _interopRequireDefault(_generatePropsFromAttributes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts a <style> element to a React element\n *\n * @param {Object} node The style node\n * @param {String} index The index of the React element relative to it's parent\n * @returns {React.Element} The React style element\n */\nfunction StyleElementType(node, index) {\n\n  // The style element only ever has a single child which is the styles so try and find this to add as\n  // a child to the style element that will be created\n  var styles = void 0;\n  if (node.children.length > 0) {\n    styles = node.children[0].data;\n  }\n\n  // generate props\n  var props = (0, _generatePropsFromAttributes2.default)(node.attribs, index);\n\n  // create and return the element\n  return _react2.default.createElement('style', props, styles);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TagElementType;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _processNodes = require('../processNodes');\n\nvar _processNodes2 = _interopRequireDefault(_processNodes);\n\nvar _generatePropsFromAttributes = require('../utils/generatePropsFromAttributes');\n\nvar _generatePropsFromAttributes2 = _interopRequireDefault(_generatePropsFromAttributes);\n\nvar _VoidElements = require('../dom/elements/VoidElements');\n\nvar _VoidElements2 = _interopRequireDefault(_VoidElements);\n\nvar _isValidTagOrAttributeName = require('../utils/isValidTagOrAttributeName');\n\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts any element (excluding style - see StyleElementType - and script) to a react element.\n *\n * @param {Object} node The tag node\n * @param {String} index The index of the React element relative to it's parent\n * @param {Function} transform The transform function to apply to all children\n * @returns {React.Element} The React tag element\n */\nfunction TagElementType(node, index, transform) {\n\n  var tagName = node.name;\n\n  // validate tag name\n  if (!(0, _isValidTagOrAttributeName2.default)(tagName)) {\n    return null;\n  }\n\n  // generate props\n  var props = (0, _generatePropsFromAttributes2.default)(node.attribs, index);\n\n  // If the node is not a void element and has children then process them\n  var children = null;\n  if (_VoidElements2.default.indexOf(tagName) === -1) {\n    children = (0, _processNodes2.default)(node.children, transform);\n  }\n\n  // create and return the element\n  return _react2.default.createElement(tagName, props, children);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TextElementType;\n/**\n * Converts a text node to a React text element\n *\n * @param {Object} node The text node\n * @returns {String} The text\n */\nfunction TextElementType(node) {\n\n  // React will accept plain text for rendering so just return the node data\n  return node.data;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = UnsupportedElementType;\n/**\n * Handles an unsupported element type by returning null so nothing is rendered\n * @returns {null}\n */\nfunction UnsupportedElementType() {\n\n  // do nothing because the element type is unsupported\n  // comment, directive, script, cdata, doctype are all currently unsupported\n  return null;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ElementType$Text$Ele;\n\nvar _htmlparser = require('htmlparser2');\n\nvar _TextElementType = require('./TextElementType');\n\nvar _TextElementType2 = _interopRequireDefault(_TextElementType);\n\nvar _TagElementType = require('./TagElementType');\n\nvar _TagElementType2 = _interopRequireDefault(_TagElementType);\n\nvar _StyleElementType = require('./StyleElementType');\n\nvar _StyleElementType2 = _interopRequireDefault(_StyleElementType);\n\nvar _UnsupportedElementType = require('./UnsupportedElementType');\n\nvar _UnsupportedElementType2 = _interopRequireDefault(_UnsupportedElementType);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*\n                                                                                                                                                                                                                   * Map each htmlparser2 element type to a function which will convert that element type to a React element\n                                                                                                                                                                                                                   * Not all of the element types are supported so the UnsupportedElementType is used for them which will not return any\n                                                                                                                                                                                                                   * value\n                                                                                                                                                                                                                   */\n\nexports.default = (_ElementType$Text$Ele = {}, _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Text, _TextElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Tag, _TagElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Style, _StyleElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Directive, _UnsupportedElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Comment, _UnsupportedElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Script, _UnsupportedElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.CDATA, _UnsupportedElementType2.default), _defineProperty(_ElementType$Text$Ele, _htmlparser.ElementType.Doctype, _UnsupportedElementType2.default), _ElementType$Text$Ele);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlparser2 = exports.convertNodeToElement = exports.processNodes = undefined;\n\nvar _processNodes = require('./processNodes');\n\nObject.defineProperty(exports, 'processNodes', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_processNodes).default;\n  }\n});\n\nvar _convertNodeToElement = require('./convertNodeToElement');\n\nObject.defineProperty(exports, 'convertNodeToElement', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_convertNodeToElement).default;\n  }\n});\n\nvar _htmlparser = require('htmlparser2');\n\nObject.defineProperty(exports, 'htmlparser2', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_htmlparser).default;\n  }\n});\n\nvar _HtmlParser = require('./HtmlParser');\n\nvar _HtmlParser2 = _interopRequireDefault(_HtmlParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _HtmlParser2.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = processNodes;\n\nvar _isEmptyTextNode = require('./utils/isEmptyTextNode');\n\nvar _isEmptyTextNode2 = _interopRequireDefault(_isEmptyTextNode);\n\nvar _convertNodeToElement = require('./convertNodeToElement');\n\nvar _convertNodeToElement2 = _interopRequireDefault(_convertNodeToElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processes the nodes generated by htmlparser2 and convert them all into React elements\n *\n * @param {Object[]} nodes List of nodes to process\n * @param {Function} transform Transform function to optionally apply to nodes\n * @returns {React.Element[]} The list of processed React elements\n */\nfunction processNodes(nodes, transform) {\n\n  return nodes.filter(function (node) {\n    return !(0, _isEmptyTextNode2.default)(node);\n  }).map(function (node, index) {\n\n    // return the result of the transform function if applicable\n    var transformed = void 0;\n    if (typeof transform === 'function') {\n      transformed = transform(node, index);\n      if (transformed === null || !!transformed) {\n        return transformed;\n      }\n    }\n\n    // otherwise convert the node as standard\n    return (0, _convertNodeToElement2.default)(node, index, transform);\n  });\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = generatePropsFromAttributes;\n\nvar _htmlAttributesToReact = require('./htmlAttributesToReact');\n\nvar _htmlAttributesToReact2 = _interopRequireDefault(_htmlAttributesToReact);\n\nvar _inlineStyleToObject = require('./inlineStyleToObject');\n\nvar _inlineStyleToObject2 = _interopRequireDefault(_inlineStyleToObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Generates props for a React element from an object of HTML attributes\n *\n * @param {Object} attributes The HTML attributes\n * @param {String} key The key to give the react element\n */\nfunction generatePropsFromAttributes(attributes, key) {\n\n  // generate props\n  var props = _extends({}, (0, _htmlAttributesToReact2.default)(attributes), { key: key });\n\n  // if there is an inline/string style prop then convert it to a React style object\n  // otherwise, it is invalid and omitted\n  if (typeof props.style === 'string' || props.style instanceof String) {\n    props.style = (0, _inlineStyleToObject2.default)(props.style);\n  } else {\n    delete props.style;\n  }\n\n  return props;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = htmlAttributesToReact;\n\nvar _BooleanAttributes = require('../dom/attributes/BooleanAttributes');\n\nvar _BooleanAttributes2 = _interopRequireDefault(_BooleanAttributes);\n\nvar _ReactAttributes = require('../dom/attributes/ReactAttributes');\n\nvar _ReactAttributes2 = _interopRequireDefault(_ReactAttributes);\n\nvar _isValidTagOrAttributeName = require('./isValidTagOrAttributeName');\n\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the parsed attribute value taking into account things like boolean attributes\n *\n * @param {String} attribute The name of the attribute\n * @param {*} value The value of the attribute from the HTML\n * @returns {*} The parsed attribute value\n */\nvar getParsedAttributeValue = function getParsedAttributeValue(attribute, value) {\n\n  // if the attribute if a boolean then it's value should be the same as it's name\n  // e.g. disabled=\"disabled\"\n  var lowerBooleanAttributes = _BooleanAttributes2.default.map(function (attr) {\n    return attr.toLowerCase();\n  });\n  if (lowerBooleanAttributes.indexOf(attribute.toLowerCase()) >= 0) {\n    value = attribute;\n  }\n\n  return value;\n};\n\n/**\n * Takes an object of standard HTML property names and converts them to their React counterpart. If the react\n * version does not exist for an attribute then just use it as it is\n *\n * @param {Object} attributes The HTML attributes to convert\n * @returns {Object} The React attributes\n */\nfunction htmlAttributesToReact(attributes) {\n\n  return Object.keys(attributes).filter(function (attr) {\n    return (0, _isValidTagOrAttributeName2.default)(attr);\n  }).reduce(function (mappedAttributes, attribute) {\n\n    // lowercase the attribute name and find it in the react attribute map\n    var lowerCaseAttribute = attribute.toLowerCase();\n\n    // format the attribute name\n    var name = _ReactAttributes2.default[lowerCaseAttribute] || lowerCaseAttribute;\n\n    // add the parsed attribute value to the mapped attributes\n    mappedAttributes[name] = getParsedAttributeValue(name, attributes[attribute]);\n\n    return mappedAttributes;\n  }, {});\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = InlineStyleToObject;\n/**\n * Converts an inline style string into an object of React style properties\n *\n * @param {String} inlineStyle='' The inline style to convert\n * @returns {Object} The converted style\n */\nfunction InlineStyleToObject() {\n  var inlineStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n\n  // just return empty object if the inlineStyle is empty\n  if (inlineStyle === '') {\n    return {};\n  }\n\n  return inlineStyle.split(';').reduce(function (styleObject, stylePropertyValue) {\n\n    // extract the style property name and value\n    var _stylePropertyValue$s = stylePropertyValue.split(/^([^:]+):/).filter(function (val, i) {\n      return i > 0;\n    }).map(function (item) {\n      return item.trim().toLowerCase();\n    }),\n        _stylePropertyValue$s2 = _slicedToArray(_stylePropertyValue$s, 2),\n        property = _stylePropertyValue$s2[0],\n        value = _stylePropertyValue$s2[1];\n\n    // if there is no value (i.e. no : in the style) then ignore it\n\n\n    if (value === undefined) {\n      return styleObject;\n    }\n\n    // convert the property name into the correct React format\n    // remove all hyphens and convert the letter immediately after each hyphen to upper case\n    // additionally don't uppercase any -ms- prefix\n    // e.g. -ms-style-property = msStyleProperty\n    //      -webkit-style-property = WebkitStyleProperty\n    property = property.replace(/^-ms-/, 'ms-').replace(/-(.)/g, function (_, character) {\n      return character.toUpperCase();\n    });\n\n    // add the new style property and value to the style object\n    styleObject[property] = value;\n\n    return styleObject;\n  }, {});\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmptyTextNode;\n/**\n * Tests a htmlparser2 node and returns whether is it a text node at the start and end of the line containing only\n * white space. This allows these node types to be excluded from the rendering because they are unnecessary.\n *\n * @param {Object} node The element object as created by htmlparser2\n * @returns {boolean} Whether the node is an empty text node\n */\nfunction isEmptyTextNode(node) {\n  return node.type === 'text' && /\\r?\\n/.test(node.data) && node.data.trim() === '';\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidTagOrAttributeName;\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/;\n\nvar nameCache = {};\n\nfunction isValidTagOrAttributeName(tagName) {\n  if (!nameCache.hasOwnProperty(tagName)) {\n    nameCache[tagName] = VALID_TAG_REGEX.test(tagName);\n  }\n  return nameCache[tagName];\n}","var ElementType = require(\"domelementtype\");\n\nvar re_whitespace = /\\s+/g;\nvar NodePrototype = require(\"./lib/node\");\nvar ElementPrototype = require(\"./lib/element\");\n\nfunction DomHandler(callback, options, elementCB){\n\tif(typeof callback === \"object\"){\n\t\telementCB = options;\n\t\toptions = callback;\n\t\tcallback = null;\n\t} else if(typeof options === \"function\"){\n\t\telementCB = options;\n\t\toptions = defaultOpts;\n\t}\n\tthis._callback = callback;\n\tthis._options = options || defaultOpts;\n\tthis._elementCB = elementCB;\n\tthis.dom = [];\n\tthis._done = false;\n\tthis._tagStack = [];\n\tthis._parser = this._parser || null;\n}\n\n//default options\nvar defaultOpts = {\n\tnormalizeWhitespace: false, //Replace all whitespace with single spaces\n\twithStartIndices: false, //Add startIndex properties to nodes\n\twithEndIndices: false, //Add endIndex properties to nodes\n};\n\nDomHandler.prototype.onparserinit = function(parser){\n\tthis._parser = parser;\n};\n\n//Resets the handler back to starting state\nDomHandler.prototype.onreset = function(){\n\tDomHandler.call(this, this._callback, this._options, this._elementCB);\n};\n\n//Signals the handler that parsing is done\nDomHandler.prototype.onend = function(){\n\tif(this._done) return;\n\tthis._done = true;\n\tthis._parser = null;\n\tthis._handleCallback(null);\n};\n\nDomHandler.prototype._handleCallback =\nDomHandler.prototype.onerror = function(error){\n\tif(typeof this._callback === \"function\"){\n\t\tthis._callback(error, this.dom);\n\t} else {\n\t\tif(error) throw error;\n\t}\n};\n\nDomHandler.prototype.onclosetag = function(){\n\t//if(this._tagStack.pop().name !== name) this._handleCallback(Error(\"Tagname didn't match!\"));\n\t\n\tvar elem = this._tagStack.pop();\n\n\tif(this._options.withEndIndices && elem){\n\t\telem.endIndex = this._parser.endIndex;\n\t}\n\n\tif(this._elementCB) this._elementCB(elem);\n};\n\nDomHandler.prototype._createDomElement = function(properties){\n\tif (!this._options.withDomLvl1) return properties;\n\n\tvar element;\n\tif (properties.type === \"tag\") {\n\t\telement = Object.create(ElementPrototype);\n\t} else {\n\t\telement = Object.create(NodePrototype);\n\t}\n\n\tfor (var key in properties) {\n\t\tif (properties.hasOwnProperty(key)) {\n\t\t\telement[key] = properties[key];\n\t\t}\n\t}\n\n\treturn element;\n};\n\nDomHandler.prototype._addDomElement = function(element){\n\tvar parent = this._tagStack[this._tagStack.length - 1];\n\tvar siblings = parent ? parent.children : this.dom;\n\tvar previousSibling = siblings[siblings.length - 1];\n\n\telement.next = null;\n\n\tif(this._options.withStartIndices){\n\t\telement.startIndex = this._parser.startIndex;\n\t}\n\tif(this._options.withEndIndices){\n\t\telement.endIndex = this._parser.endIndex;\n\t}\n\n\tif(previousSibling){\n\t\telement.prev = previousSibling;\n\t\tpreviousSibling.next = element;\n\t} else {\n\t\telement.prev = null;\n\t}\n\n\tsiblings.push(element);\n\telement.parent = parent || null;\n};\n\nDomHandler.prototype.onopentag = function(name, attribs){\n\tvar properties = {\n\t\ttype: name === \"script\" ? ElementType.Script : name === \"style\" ? ElementType.Style : ElementType.Tag,\n\t\tname: name,\n\t\tattribs: attribs,\n\t\tchildren: []\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.ontext = function(data){\n\t//the ignoreWhitespace is officially dropped, but for now,\n\t//it's an alias for normalizeWhitespace\n\tvar normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;\n\n\tvar lastTag;\n\n\tif(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){\n\t\tif(normalize){\n\t\t\tlastTag.data = (lastTag.data + data).replace(re_whitespace, \" \");\n\t\t} else {\n\t\t\tlastTag.data += data;\n\t\t}\n\t} else {\n\t\tif(\n\t\t\tthis._tagStack.length &&\n\t\t\t(lastTag = this._tagStack[this._tagStack.length - 1]) &&\n\t\t\t(lastTag = lastTag.children[lastTag.children.length - 1]) &&\n\t\t\tlastTag.type === ElementType.Text\n\t\t){\n\t\t\tif(normalize){\n\t\t\t\tlastTag.data = (lastTag.data + data).replace(re_whitespace, \" \");\n\t\t\t} else {\n\t\t\t\tlastTag.data += data;\n\t\t\t}\n\t\t} else {\n\t\t\tif(normalize){\n\t\t\t\tdata = data.replace(re_whitespace, \" \");\n\t\t\t}\n\n\t\t\tvar element = this._createDomElement({\n\t\t\t\tdata: data,\n\t\t\t\ttype: ElementType.Text\n\t\t\t});\n\n\t\t\tthis._addDomElement(element);\n\t\t}\n\t}\n};\n\nDomHandler.prototype.oncomment = function(data){\n\tvar lastTag = this._tagStack[this._tagStack.length - 1];\n\n\tif(lastTag && lastTag.type === ElementType.Comment){\n\t\tlastTag.data += data;\n\t\treturn;\n\t}\n\n\tvar properties = {\n\t\tdata: data,\n\t\ttype: ElementType.Comment\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.oncdatastart = function(){\n\tvar properties = {\n\t\tchildren: [{\n\t\t\tdata: \"\",\n\t\t\ttype: ElementType.Text\n\t\t}],\n\t\ttype: ElementType.CDATA\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){\n\tthis._tagStack.pop();\n};\n\nDomHandler.prototype.onprocessinginstruction = function(name, data){\n\tvar element = this._createDomElement({\n\t\tname: name,\n\t\tdata: data,\n\t\ttype: ElementType.Directive\n\t});\n\n\tthis._addDomElement(element);\n};\n\nmodule.exports = DomHandler;\n","// DOM-Level-1-compliant structure\nvar NodePrototype = require('./node');\nvar ElementPrototype = module.exports = Object.create(NodePrototype);\n\nvar domLvl1 = {\n\ttagName: \"name\"\n};\n\nObject.keys(domLvl1).forEach(function(key) {\n\tvar shorthand = domLvl1[key];\n\tObject.defineProperty(ElementPrototype, key, {\n\t\tget: function() {\n\t\t\treturn this[shorthand] || null;\n\t\t},\n\t\tset: function(val) {\n\t\t\tthis[shorthand] = val;\n\t\t\treturn val;\n\t\t}\n\t});\n});\n","// This object will be used as the prototype for Nodes when creating a\n// DOM-Level-1-compliant structure.\nvar NodePrototype = module.exports = {\n\tget firstChild() {\n\t\tvar children = this.children;\n\t\treturn children && children[0] || null;\n\t},\n\tget lastChild() {\n\t\tvar children = this.children;\n\t\treturn children && children[children.length - 1] || null;\n\t},\n\tget nodeType() {\n\t\treturn nodeTypes[this.type] || nodeTypes.element;\n\t}\n};\n\nvar domLvl1 = {\n\ttagName: \"name\",\n\tchildNodes: \"children\",\n\tparentNode: \"parent\",\n\tpreviousSibling: \"prev\",\n\tnextSibling: \"next\",\n\tnodeValue: \"data\"\n};\n\nvar nodeTypes = {\n\telement: 1,\n\ttext: 3,\n\tcdata: 4,\n\tcomment: 8\n};\n\nObject.keys(domLvl1).forEach(function(key) {\n\tvar shorthand = domLvl1[key];\n\tObject.defineProperty(NodePrototype, key, {\n\t\tget: function() {\n\t\t\treturn this[shorthand] || null;\n\t\t},\n\t\tset: function(val) {\n\t\t\tthis[shorthand] = val;\n\t\t\treturn val;\n\t\t}\n\t});\n});\n","var decodeMap = require(\"../maps/decode.json\");\n\nmodule.exports = decodeCodePoint;\n\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n\n    if (codePoint in decodeMap) {\n        codePoint = decodeMap[codePoint];\n    }\n\n    var output = \"\";\n\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n\n    output += String.fromCharCode(codePoint);\n    return output;\n}\n","module.exports = CollectingHandler;\n\nfunction CollectingHandler(cbs) {\n    this._cbs = cbs || {};\n    this.events = [];\n}\n\nvar EVENTS = require(\"./\").EVENTS;\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function() {\n            this.events.push([name]);\n            if (this._cbs[name]) this._cbs[name]();\n        };\n    } else if (EVENTS[name] === 1) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function(a) {\n            this.events.push([name, a]);\n            if (this._cbs[name]) this._cbs[name](a);\n        };\n    } else if (EVENTS[name] === 2) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function(a, b) {\n            this.events.push([name, a, b]);\n            if (this._cbs[name]) this._cbs[name](a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments\");\n    }\n});\n\nCollectingHandler.prototype.onreset = function() {\n    this.events = [];\n    if (this._cbs.onreset) this._cbs.onreset();\n};\n\nCollectingHandler.prototype.restart = function() {\n    if (this._cbs.onreset) this._cbs.onreset();\n\n    for (var i = 0, len = this.events.length; i < len; i++) {\n        if (this._cbs[this.events[i][0]]) {\n            var num = this.events[i].length;\n\n            if (num === 1) {\n                this._cbs[this.events[i][0]]();\n            } else if (num === 2) {\n                this._cbs[this.events[i][0]](this.events[i][1]);\n            } else {\n                this._cbs[this.events[i][0]](\n                    this.events[i][1],\n                    this.events[i][2]\n                );\n            }\n        }\n    }\n};\n","var DomHandler = require(\"domhandler\");\nvar DomUtils = require(\"domutils\");\n\n//TODO: make this a streamable handler\nfunction FeedHandler(callback, options) {\n    this.init(callback, options);\n}\n\nrequire(\"inherits\")(FeedHandler, DomHandler);\n\nFeedHandler.prototype.init = DomHandler;\n\nfunction getElements(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true);\n}\nfunction getOneElement(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true, 1)[0];\n}\nfunction fetch(what, where, recurse) {\n    return DomUtils.getText(\n        DomUtils.getElementsByTagName(what, where, recurse, 1)\n    ).trim();\n}\n\nfunction addConditionally(obj, prop, what, where, recurse) {\n    var tmp = fetch(what, where, recurse);\n    if (tmp) obj[prop] = tmp;\n}\n\nvar isValidFeed = function(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n};\n\nFeedHandler.prototype.onend = function() {\n    var feed = {},\n        feedRoot = getOneElement(isValidFeed, this.dom),\n        tmp,\n        childs;\n\n    if (feedRoot) {\n        if (feedRoot.name === \"feed\") {\n            childs = feedRoot.children;\n\n            feed.type = \"atom\";\n            addConditionally(feed, \"id\", \"id\", childs);\n            addConditionally(feed, \"title\", \"title\", childs);\n            if (\n                (tmp = getOneElement(\"link\", childs)) &&\n                (tmp = tmp.attribs) &&\n                (tmp = tmp.href)\n            )\n                feed.link = tmp;\n            addConditionally(feed, \"description\", \"subtitle\", childs);\n            if ((tmp = fetch(\"updated\", childs))) feed.updated = new Date(tmp);\n            addConditionally(feed, \"author\", \"email\", childs, true);\n\n            feed.items = getElements(\"entry\", childs).map(function(item) {\n                var entry = {},\n                    tmp;\n\n                item = item.children;\n\n                addConditionally(entry, \"id\", \"id\", item);\n                addConditionally(entry, \"title\", \"title\", item);\n                if (\n                    (tmp = getOneElement(\"link\", item)) &&\n                    (tmp = tmp.attribs) &&\n                    (tmp = tmp.href)\n                )\n                    entry.link = tmp;\n                if ((tmp = fetch(\"summary\", item) || fetch(\"content\", item)))\n                    entry.description = tmp;\n                if ((tmp = fetch(\"updated\", item)))\n                    entry.pubDate = new Date(tmp);\n                return entry;\n            });\n        } else {\n            childs = getOneElement(\"channel\", feedRoot.children).children;\n\n            feed.type = feedRoot.name.substr(0, 3);\n            feed.id = \"\";\n            addConditionally(feed, \"title\", \"title\", childs);\n            addConditionally(feed, \"link\", \"link\", childs);\n            addConditionally(feed, \"description\", \"description\", childs);\n            if ((tmp = fetch(\"lastBuildDate\", childs)))\n                feed.updated = new Date(tmp);\n            addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n\n            feed.items = getElements(\"item\", feedRoot.children).map(function(\n                item\n            ) {\n                var entry = {},\n                    tmp;\n\n                item = item.children;\n\n                addConditionally(entry, \"id\", \"guid\", item);\n                addConditionally(entry, \"title\", \"title\", item);\n                addConditionally(entry, \"link\", \"link\", item);\n                addConditionally(entry, \"description\", \"description\", item);\n                if ((tmp = fetch(\"pubDate\", item)))\n                    entry.pubDate = new Date(tmp);\n                return entry;\n            });\n        }\n    }\n    this.dom = feed;\n    DomHandler.prototype._handleCallback.call(\n        this,\n        feedRoot ? null : Error(\"couldn't find root of feed\")\n    );\n};\n\nmodule.exports = FeedHandler;\n","var Tokenizer = require(\"./Tokenizer.js\");\n\n/*\n\tOptions:\n\n\txmlMode: Disables the special behavior for script/style tags (false by default)\n\tlowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)\n\tlowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)\n*/\n\n/*\n\tCallbacks:\n\n\toncdataend,\n\toncdatastart,\n\tonclosetag,\n\toncomment,\n\toncommentend,\n\tonerror,\n\tonopentag,\n\tonprocessinginstruction,\n\tonreset,\n\tontext\n*/\n\nvar formTags = {\n    input: true,\n    option: true,\n    optgroup: true,\n    select: true,\n    button: true,\n    datalist: true,\n    textarea: true\n};\n\nvar openImpliesClose = {\n    tr: { tr: true, th: true, td: true },\n    th: { th: true },\n    td: { thead: true, th: true, td: true },\n    body: { head: true, link: true, script: true },\n    li: { li: true },\n    p: { p: true },\n    h1: { p: true },\n    h2: { p: true },\n    h3: { p: true },\n    h4: { p: true },\n    h5: { p: true },\n    h6: { p: true },\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: { option: true },\n    optgroup: { optgroup: true }\n};\n\nvar voidElements = {\n    __proto__: null,\n    area: true,\n    base: true,\n    basefont: true,\n    br: true,\n    col: true,\n    command: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    isindex: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\n\nvar foreignContextElements = {\n    __proto__: null,\n    math: true,\n    svg: true\n};\nvar htmlIntegrationElements = {\n    __proto__: null,\n    mi: true,\n    mo: true,\n    mn: true,\n    ms: true,\n    mtext: true,\n    \"annotation-xml\": true,\n    foreignObject: true,\n    desc: true,\n    title: true\n};\n\nvar re_nameEnd = /\\s|\\//;\n\nfunction Parser(cbs, options) {\n    this._options = options || {};\n    this._cbs = cbs || {};\n\n    this._tagname = \"\";\n    this._attribname = \"\";\n    this._attribvalue = \"\";\n    this._attribs = null;\n    this._stack = [];\n    this._foreignContext = [];\n\n    this.startIndex = 0;\n    this.endIndex = null;\n\n    this._lowerCaseTagNames =\n        \"lowerCaseTags\" in this._options\n            ? !!this._options.lowerCaseTags\n            : !this._options.xmlMode;\n    this._lowerCaseAttributeNames =\n        \"lowerCaseAttributeNames\" in this._options\n            ? !!this._options.lowerCaseAttributeNames\n            : !this._options.xmlMode;\n\n    if (this._options.Tokenizer) {\n        Tokenizer = this._options.Tokenizer;\n    }\n    this._tokenizer = new Tokenizer(this._options, this);\n\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n}\n\nrequire(\"inherits\")(Parser, require(\"events\").EventEmitter);\n\nParser.prototype._updatePosition = function(initialOffset) {\n    if (this.endIndex === null) {\n        if (this._tokenizer._sectionStart <= initialOffset) {\n            this.startIndex = 0;\n        } else {\n            this.startIndex = this._tokenizer._sectionStart - initialOffset;\n        }\n    } else this.startIndex = this.endIndex + 1;\n    this.endIndex = this._tokenizer.getAbsoluteIndex();\n};\n\n//Tokenizer event handlers\nParser.prototype.ontext = function(data) {\n    this._updatePosition(1);\n    this.endIndex--;\n\n    if (this._cbs.ontext) this._cbs.ontext(data);\n};\n\nParser.prototype.onopentagname = function(name) {\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n\n    this._tagname = name;\n\n    if (!this._options.xmlMode && name in openImpliesClose) {\n        for (\n            var el;\n            (el = this._stack[this._stack.length - 1]) in\n            openImpliesClose[name];\n            this.onclosetag(el)\n        );\n    }\n\n    if (this._options.xmlMode || !(name in voidElements)) {\n        this._stack.push(name);\n        if (name in foreignContextElements) this._foreignContext.push(true);\n        else if (name in htmlIntegrationElements)\n            this._foreignContext.push(false);\n    }\n\n    if (this._cbs.onopentagname) this._cbs.onopentagname(name);\n    if (this._cbs.onopentag) this._attribs = {};\n};\n\nParser.prototype.onopentagend = function() {\n    this._updatePosition(1);\n\n    if (this._attribs) {\n        if (this._cbs.onopentag)\n            this._cbs.onopentag(this._tagname, this._attribs);\n        this._attribs = null;\n    }\n\n    if (\n        !this._options.xmlMode &&\n        this._cbs.onclosetag &&\n        this._tagname in voidElements\n    ) {\n        this._cbs.onclosetag(this._tagname);\n    }\n\n    this._tagname = \"\";\n};\n\nParser.prototype.onclosetag = function(name) {\n    this._updatePosition(1);\n\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n    \n    if (name in foreignContextElements || name in htmlIntegrationElements) {\n        this._foreignContext.pop();\n    }\n\n    if (\n        this._stack.length &&\n        (!(name in voidElements) || this._options.xmlMode)\n    ) {\n        var pos = this._stack.lastIndexOf(name);\n        if (pos !== -1) {\n            if (this._cbs.onclosetag) {\n                pos = this._stack.length - pos;\n                while (pos--) this._cbs.onclosetag(this._stack.pop());\n            } else this._stack.length = pos;\n        } else if (name === \"p\" && !this._options.xmlMode) {\n            this.onopentagname(name);\n            this._closeCurrentTag();\n        }\n    } else if (!this._options.xmlMode && (name === \"br\" || name === \"p\")) {\n        this.onopentagname(name);\n        this._closeCurrentTag();\n    }\n};\n\nParser.prototype.onselfclosingtag = function() {\n    if (\n        this._options.xmlMode ||\n        this._options.recognizeSelfClosing ||\n        this._foreignContext[this._foreignContext.length - 1]\n    ) {\n        this._closeCurrentTag();\n    } else {\n        this.onopentagend();\n    }\n};\n\nParser.prototype._closeCurrentTag = function() {\n    var name = this._tagname;\n\n    this.onopentagend();\n\n    //self-closing tags will be on the top of the stack\n    //(cheaper check than in onclosetag)\n    if (this._stack[this._stack.length - 1] === name) {\n        if (this._cbs.onclosetag) {\n            this._cbs.onclosetag(name);\n        }\n        this._stack.pop();\n        \n    }\n};\n\nParser.prototype.onattribname = function(name) {\n    if (this._lowerCaseAttributeNames) {\n        name = name.toLowerCase();\n    }\n    this._attribname = name;\n};\n\nParser.prototype.onattribdata = function(value) {\n    this._attribvalue += value;\n};\n\nParser.prototype.onattribend = function() {\n    if (this._cbs.onattribute)\n        this._cbs.onattribute(this._attribname, this._attribvalue);\n    if (\n        this._attribs &&\n        !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)\n    ) {\n        this._attribs[this._attribname] = this._attribvalue;\n    }\n    this._attribname = \"\";\n    this._attribvalue = \"\";\n};\n\nParser.prototype._getInstructionName = function(value) {\n    var idx = value.search(re_nameEnd),\n        name = idx < 0 ? value : value.substr(0, idx);\n\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n\n    return name;\n};\n\nParser.prototype.ondeclaration = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction(\"!\" + name, \"!\" + value);\n    }\n};\n\nParser.prototype.onprocessinginstruction = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction(\"?\" + name, \"?\" + value);\n    }\n};\n\nParser.prototype.oncomment = function(value) {\n    this._updatePosition(4);\n\n    if (this._cbs.oncomment) this._cbs.oncomment(value);\n    if (this._cbs.oncommentend) this._cbs.oncommentend();\n};\n\nParser.prototype.oncdata = function(value) {\n    this._updatePosition(1);\n\n    if (this._options.xmlMode || this._options.recognizeCDATA) {\n        if (this._cbs.oncdatastart) this._cbs.oncdatastart();\n        if (this._cbs.ontext) this._cbs.ontext(value);\n        if (this._cbs.oncdataend) this._cbs.oncdataend();\n    } else {\n        this.oncomment(\"[CDATA[\" + value + \"]]\");\n    }\n};\n\nParser.prototype.onerror = function(err) {\n    if (this._cbs.onerror) this._cbs.onerror(err);\n};\n\nParser.prototype.onend = function() {\n    if (this._cbs.onclosetag) {\n        for (\n            var i = this._stack.length;\n            i > 0;\n            this._cbs.onclosetag(this._stack[--i])\n        );\n    }\n    if (this._cbs.onend) this._cbs.onend();\n};\n\n//Resets the parser to a blank state, ready to parse a new HTML document\nParser.prototype.reset = function() {\n    if (this._cbs.onreset) this._cbs.onreset();\n    this._tokenizer.reset();\n\n    this._tagname = \"\";\n    this._attribname = \"\";\n    this._attribs = null;\n    this._stack = [];\n\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n};\n\n//Parses a complete HTML document and pushes it to the handler\nParser.prototype.parseComplete = function(data) {\n    this.reset();\n    this.end(data);\n};\n\nParser.prototype.write = function(chunk) {\n    this._tokenizer.write(chunk);\n};\n\nParser.prototype.end = function(chunk) {\n    this._tokenizer.end(chunk);\n};\n\nParser.prototype.pause = function() {\n    this._tokenizer.pause();\n};\n\nParser.prototype.resume = function() {\n    this._tokenizer.resume();\n};\n\n//alias for backwards compat\nParser.prototype.parseChunk = Parser.prototype.write;\nParser.prototype.done = Parser.prototype.end;\n\nmodule.exports = Parser;\n","module.exports = ProxyHandler;\n\nfunction ProxyHandler(cbs) {\n    this._cbs = cbs || {};\n}\n\nvar EVENTS = require(\"./\").EVENTS;\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function() {\n            if (this._cbs[name]) this._cbs[name]();\n        };\n    } else if (EVENTS[name] === 1) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function(a) {\n            if (this._cbs[name]) this._cbs[name](a);\n        };\n    } else if (EVENTS[name] === 2) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function(a, b) {\n            if (this._cbs[name]) this._cbs[name](a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments\");\n    }\n});\n","module.exports = Stream;\n\nvar Parser = require(\"./WritableStream.js\");\n\nfunction Stream(options) {\n    Parser.call(this, new Cbs(this), options);\n}\n\nrequire(\"inherits\")(Stream, Parser);\n\nStream.prototype.readable = true;\n\nfunction Cbs(scope) {\n    this.scope = scope;\n}\n\nvar EVENTS = require(\"../\").EVENTS;\n\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        Cbs.prototype[\"on\" + name] = function() {\n            this.scope.emit(name);\n        };\n    } else if (EVENTS[name] === 1) {\n        Cbs.prototype[\"on\" + name] = function(a) {\n            this.scope.emit(name, a);\n        };\n    } else if (EVENTS[name] === 2) {\n        Cbs.prototype[\"on\" + name] = function(a, b) {\n            this.scope.emit(name, a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments!\");\n    }\n});\n","module.exports = Tokenizer;\n\nvar decodeCodePoint = require(\"entities/lib/decode_codepoint.js\");\nvar entityMap = require(\"entities/maps/entities.json\");\nvar legacyMap = require(\"entities/maps/legacy.json\");\nvar xmlMap = require(\"entities/maps/xml.json\");\n\nvar i = 0;\n\nvar TEXT = i++;\nvar BEFORE_TAG_NAME = i++; //after <\nvar IN_TAG_NAME = i++;\nvar IN_SELF_CLOSING_TAG = i++;\nvar BEFORE_CLOSING_TAG_NAME = i++;\nvar IN_CLOSING_TAG_NAME = i++;\nvar AFTER_CLOSING_TAG_NAME = i++;\n\n//attributes\nvar BEFORE_ATTRIBUTE_NAME = i++;\nvar IN_ATTRIBUTE_NAME = i++;\nvar AFTER_ATTRIBUTE_NAME = i++;\nvar BEFORE_ATTRIBUTE_VALUE = i++;\nvar IN_ATTRIBUTE_VALUE_DQ = i++; // \"\nvar IN_ATTRIBUTE_VALUE_SQ = i++; // '\nvar IN_ATTRIBUTE_VALUE_NQ = i++;\n\n//declarations\nvar BEFORE_DECLARATION = i++; // !\nvar IN_DECLARATION = i++;\n\n//processing instructions\nvar IN_PROCESSING_INSTRUCTION = i++; // ?\n\n//comments\nvar BEFORE_COMMENT = i++;\nvar IN_COMMENT = i++;\nvar AFTER_COMMENT_1 = i++;\nvar AFTER_COMMENT_2 = i++;\n\n//cdata\nvar BEFORE_CDATA_1 = i++; // [\nvar BEFORE_CDATA_2 = i++; // C\nvar BEFORE_CDATA_3 = i++; // D\nvar BEFORE_CDATA_4 = i++; // A\nvar BEFORE_CDATA_5 = i++; // T\nvar BEFORE_CDATA_6 = i++; // A\nvar IN_CDATA = i++; // [\nvar AFTER_CDATA_1 = i++; // ]\nvar AFTER_CDATA_2 = i++; // ]\n\n//special tags\nvar BEFORE_SPECIAL = i++; //S\nvar BEFORE_SPECIAL_END = i++; //S\n\nvar BEFORE_SCRIPT_1 = i++; //C\nvar BEFORE_SCRIPT_2 = i++; //R\nvar BEFORE_SCRIPT_3 = i++; //I\nvar BEFORE_SCRIPT_4 = i++; //P\nvar BEFORE_SCRIPT_5 = i++; //T\nvar AFTER_SCRIPT_1 = i++; //C\nvar AFTER_SCRIPT_2 = i++; //R\nvar AFTER_SCRIPT_3 = i++; //I\nvar AFTER_SCRIPT_4 = i++; //P\nvar AFTER_SCRIPT_5 = i++; //T\n\nvar BEFORE_STYLE_1 = i++; //T\nvar BEFORE_STYLE_2 = i++; //Y\nvar BEFORE_STYLE_3 = i++; //L\nvar BEFORE_STYLE_4 = i++; //E\nvar AFTER_STYLE_1 = i++; //T\nvar AFTER_STYLE_2 = i++; //Y\nvar AFTER_STYLE_3 = i++; //L\nvar AFTER_STYLE_4 = i++; //E\n\nvar BEFORE_ENTITY = i++; //&\nvar BEFORE_NUMERIC_ENTITY = i++; //#\nvar IN_NAMED_ENTITY = i++;\nvar IN_NUMERIC_ENTITY = i++;\nvar IN_HEX_ENTITY = i++; //X\n\nvar j = 0;\n\nvar SPECIAL_NONE = j++;\nvar SPECIAL_SCRIPT = j++;\nvar SPECIAL_STYLE = j++;\n\nfunction whitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n\n    if (upper === lower) {\n        return function(c) {\n            if (c === lower) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    } else {\n        return function(c) {\n            if (c === lower || c === upper) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    }\n}\n\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n\n    return function(c) {\n        if (c === lower || c === upper) {\n            this._state = NEXT_STATE;\n        } else {\n            this._state = IN_TAG_NAME;\n            this._index--; //consume the token again\n        }\n    };\n}\n\nfunction Tokenizer(options, cbs) {\n    this._state = TEXT;\n    this._buffer = \"\";\n    this._sectionStart = 0;\n    this._index = 0;\n    this._bufferOffset = 0; //chars removed from _buffer\n    this._baseState = TEXT;\n    this._special = SPECIAL_NONE;\n    this._cbs = cbs;\n    this._running = true;\n    this._ended = false;\n    this._xmlMode = !!(options && options.xmlMode);\n    this._decodeEntities = !!(options && options.decodeEntities);\n}\n\nTokenizer.prototype._stateText = function(c) {\n    if (c === \"<\") {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._state = BEFORE_TAG_NAME;\n        this._sectionStart = this._index;\n    } else if (\n        this._decodeEntities &&\n        this._special === SPECIAL_NONE &&\n        c === \"&\"\n    ) {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._baseState = TEXT;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeTagName = function(c) {\n    if (c === \"/\") {\n        this._state = BEFORE_CLOSING_TAG_NAME;\n    } else if (c === \"<\") {\n        this._cbs.ontext(this._getSection());\n        this._sectionStart = this._index;\n    } else if (c === \">\" || this._special !== SPECIAL_NONE || whitespace(c)) {\n        this._state = TEXT;\n    } else if (c === \"!\") {\n        this._state = BEFORE_DECLARATION;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"?\") {\n        this._state = IN_PROCESSING_INSTRUCTION;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state =\n            !this._xmlMode && (c === \"s\" || c === \"S\")\n                ? BEFORE_SPECIAL\n                : IN_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInTagName = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._emitToken(\"onopentagname\");\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateBeforeCloseingTagName = function(c) {\n    if (whitespace(c));\n    else if (c === \">\") {\n        this._state = TEXT;\n    } else if (this._special !== SPECIAL_NONE) {\n        if (c === \"s\" || c === \"S\") {\n            this._state = BEFORE_SPECIAL_END;\n        } else {\n            this._state = TEXT;\n            this._index--;\n        }\n    } else {\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInCloseingTagName = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._emitToken(\"onclosetag\");\n        this._state = AFTER_CLOSING_TAG_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateAfterCloseingTagName = function(c) {\n    //skip everything until \">\"\n    if (c === \">\") {\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateBeforeAttributeName = function(c) {\n    if (c === \">\") {\n        this._cbs.onopentagend();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"/\") {\n        this._state = IN_SELF_CLOSING_TAG;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInSelfClosingTag = function(c) {\n    if (c === \">\") {\n        this._cbs.onselfclosingtag();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInAttributeName = function(c) {\n    if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n        this._cbs.onattribname(this._getSection());\n        this._sectionStart = -1;\n        this._state = AFTER_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateAfterAttributeName = function(c) {\n    if (c === \"=\") {\n        this._state = BEFORE_ATTRIBUTE_VALUE;\n    } else if (c === \"/\" || c === \">\") {\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (!whitespace(c)) {\n        this._cbs.onattribend();\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeAttributeValue = function(c) {\n    if (c === '\"') {\n        this._state = IN_ATTRIBUTE_VALUE_DQ;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"'\") {\n        this._state = IN_ATTRIBUTE_VALUE_SQ;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_VALUE_NQ;\n        this._sectionStart = this._index;\n        this._index--; //reconsume token\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {\n    if (c === '\"') {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {\n    if (c === \"'\") {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {\n    if (whitespace(c) || c === \">\") {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeDeclaration = function(c) {\n    this._state =\n        c === \"[\"\n            ? BEFORE_CDATA_1\n            : c === \"-\"\n                ? BEFORE_COMMENT\n                : IN_DECLARATION;\n};\n\nTokenizer.prototype._stateInDeclaration = function(c) {\n    if (c === \">\") {\n        this._cbs.ondeclaration(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateInProcessingInstruction = function(c) {\n    if (c === \">\") {\n        this._cbs.onprocessinginstruction(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateBeforeComment = function(c) {\n    if (c === \"-\") {\n        this._state = IN_COMMENT;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n    }\n};\n\nTokenizer.prototype._stateInComment = function(c) {\n    if (c === \"-\") this._state = AFTER_COMMENT_1;\n};\n\nTokenizer.prototype._stateAfterComment1 = function(c) {\n    if (c === \"-\") {\n        this._state = AFTER_COMMENT_2;\n    } else {\n        this._state = IN_COMMENT;\n    }\n};\n\nTokenizer.prototype._stateAfterComment2 = function(c) {\n    if (c === \">\") {\n        //remove 2 trailing chars\n        this._cbs.oncomment(\n            this._buffer.substring(this._sectionStart, this._index - 2)\n        );\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== \"-\") {\n        this._state = IN_COMMENT;\n    }\n    // else: stay in AFTER_COMMENT_2 (`--->`)\n};\n\nTokenizer.prototype._stateBeforeCdata1 = ifElseState(\n    \"C\",\n    BEFORE_CDATA_2,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata2 = ifElseState(\n    \"D\",\n    BEFORE_CDATA_3,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata3 = ifElseState(\n    \"A\",\n    BEFORE_CDATA_4,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata4 = ifElseState(\n    \"T\",\n    BEFORE_CDATA_5,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata5 = ifElseState(\n    \"A\",\n    BEFORE_CDATA_6,\n    IN_DECLARATION\n);\n\nTokenizer.prototype._stateBeforeCdata6 = function(c) {\n    if (c === \"[\") {\n        this._state = IN_CDATA;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInCdata = function(c) {\n    if (c === \"]\") this._state = AFTER_CDATA_1;\n};\n\nTokenizer.prototype._stateAfterCdata1 = function(c) {\n    if (c === \"]\") this._state = AFTER_CDATA_2;\n    else this._state = IN_CDATA;\n};\n\nTokenizer.prototype._stateAfterCdata2 = function(c) {\n    if (c === \">\") {\n        //remove 2 trailing chars\n        this._cbs.oncdata(\n            this._buffer.substring(this._sectionStart, this._index - 2)\n        );\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== \"]\") {\n        this._state = IN_CDATA;\n    }\n    //else: stay in AFTER_CDATA_2 (`]]]>`)\n};\n\nTokenizer.prototype._stateBeforeSpecial = function(c) {\n    if (c === \"c\" || c === \"C\") {\n        this._state = BEFORE_SCRIPT_1;\n    } else if (c === \"t\" || c === \"T\") {\n        this._state = BEFORE_STYLE_1;\n    } else {\n        this._state = IN_TAG_NAME;\n        this._index--; //consume the token again\n    }\n};\n\nTokenizer.prototype._stateBeforeSpecialEnd = function(c) {\n    if (this._special === SPECIAL_SCRIPT && (c === \"c\" || c === \"C\")) {\n        this._state = AFTER_SCRIPT_1;\n    } else if (this._special === SPECIAL_STYLE && (c === \"t\" || c === \"T\")) {\n        this._state = AFTER_STYLE_1;\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(\n    \"R\",\n    BEFORE_SCRIPT_2\n);\nTokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(\n    \"I\",\n    BEFORE_SCRIPT_3\n);\nTokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(\n    \"P\",\n    BEFORE_SCRIPT_4\n);\nTokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(\n    \"T\",\n    BEFORE_SCRIPT_5\n);\n\nTokenizer.prototype._stateBeforeScript5 = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_SCRIPT;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterScript1 = ifElseState(\"R\", AFTER_SCRIPT_2, TEXT);\nTokenizer.prototype._stateAfterScript2 = ifElseState(\"I\", AFTER_SCRIPT_3, TEXT);\nTokenizer.prototype._stateAfterScript3 = ifElseState(\"P\", AFTER_SCRIPT_4, TEXT);\nTokenizer.prototype._stateAfterScript4 = ifElseState(\"T\", AFTER_SCRIPT_5, TEXT);\n\nTokenizer.prototype._stateAfterScript5 = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 6;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(\n    \"Y\",\n    BEFORE_STYLE_2\n);\nTokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(\n    \"L\",\n    BEFORE_STYLE_3\n);\nTokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(\n    \"E\",\n    BEFORE_STYLE_4\n);\n\nTokenizer.prototype._stateBeforeStyle4 = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_STYLE;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterStyle1 = ifElseState(\"Y\", AFTER_STYLE_2, TEXT);\nTokenizer.prototype._stateAfterStyle2 = ifElseState(\"L\", AFTER_STYLE_3, TEXT);\nTokenizer.prototype._stateAfterStyle3 = ifElseState(\"E\", AFTER_STYLE_4, TEXT);\n\nTokenizer.prototype._stateAfterStyle4 = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 5;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeEntity = ifElseState(\n    \"#\",\n    BEFORE_NUMERIC_ENTITY,\n    IN_NAMED_ENTITY\n);\nTokenizer.prototype._stateBeforeNumericEntity = ifElseState(\n    \"X\",\n    IN_HEX_ENTITY,\n    IN_NUMERIC_ENTITY\n);\n\n//for entities terminated with a semicolon\nTokenizer.prototype._parseNamedEntityStrict = function() {\n    //offset = 1\n    if (this._sectionStart + 1 < this._index) {\n        var entity = this._buffer.substring(\n                this._sectionStart + 1,\n                this._index\n            ),\n            map = this._xmlMode ? xmlMap : entityMap;\n\n        if (map.hasOwnProperty(entity)) {\n            this._emitPartial(map[entity]);\n            this._sectionStart = this._index + 1;\n        }\n    }\n};\n\n//parses legacy entities (without trailing semicolon)\nTokenizer.prototype._parseLegacyEntity = function() {\n    var start = this._sectionStart + 1,\n        limit = this._index - start;\n\n    if (limit > 6) limit = 6; //the max length of legacy entities is 6\n\n    while (limit >= 2) {\n        //the min length of legacy entities is 2\n        var entity = this._buffer.substr(start, limit);\n\n        if (legacyMap.hasOwnProperty(entity)) {\n            this._emitPartial(legacyMap[entity]);\n            this._sectionStart += limit + 1;\n            return;\n        } else {\n            limit--;\n        }\n    }\n};\n\nTokenizer.prototype._stateInNamedEntity = function(c) {\n    if (c === \";\") {\n        this._parseNamedEntityStrict();\n        if (this._sectionStart + 1 < this._index && !this._xmlMode) {\n            this._parseLegacyEntity();\n        }\n        this._state = this._baseState;\n    } else if (\n        (c < \"a\" || c > \"z\") &&\n        (c < \"A\" || c > \"Z\") &&\n        (c < \"0\" || c > \"9\")\n    ) {\n        if (this._xmlMode);\n        else if (this._sectionStart + 1 === this._index);\n        else if (this._baseState !== TEXT) {\n            if (c !== \"=\") {\n                this._parseNamedEntityStrict();\n            }\n        } else {\n            this._parseLegacyEntity();\n        }\n\n        this._state = this._baseState;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._decodeNumericEntity = function(offset, base) {\n    var sectionStart = this._sectionStart + offset;\n\n    if (sectionStart !== this._index) {\n        //parse entity\n        var entity = this._buffer.substring(sectionStart, this._index);\n        var parsed = parseInt(entity, base);\n\n        this._emitPartial(decodeCodePoint(parsed));\n        this._sectionStart = this._index;\n    } else {\n        this._sectionStart--;\n    }\n\n    this._state = this._baseState;\n};\n\nTokenizer.prototype._stateInNumericEntity = function(c) {\n    if (c === \";\") {\n        this._decodeNumericEntity(2, 10);\n        this._sectionStart++;\n    } else if (c < \"0\" || c > \"9\") {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(2, 10);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInHexEntity = function(c) {\n    if (c === \";\") {\n        this._decodeNumericEntity(3, 16);\n        this._sectionStart++;\n    } else if (\n        (c < \"a\" || c > \"f\") &&\n        (c < \"A\" || c > \"F\") &&\n        (c < \"0\" || c > \"9\")\n    ) {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(3, 16);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\n\nTokenizer.prototype._cleanup = function() {\n    if (this._sectionStart < 0) {\n        this._buffer = \"\";\n        this._bufferOffset += this._index;\n        this._index = 0;\n    } else if (this._running) {\n        if (this._state === TEXT) {\n            if (this._sectionStart !== this._index) {\n                this._cbs.ontext(this._buffer.substr(this._sectionStart));\n            }\n            this._buffer = \"\";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else if (this._sectionStart === this._index) {\n            //the section just started\n            this._buffer = \"\";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else {\n            //remove everything unnecessary\n            this._buffer = this._buffer.substr(this._sectionStart);\n            this._index -= this._sectionStart;\n            this._bufferOffset += this._sectionStart;\n        }\n\n        this._sectionStart = 0;\n    }\n};\n\n//TODO make events conditional\nTokenizer.prototype.write = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(\".write() after done!\"));\n\n    this._buffer += chunk;\n    this._parse();\n};\n\nTokenizer.prototype._parse = function() {\n    while (this._index < this._buffer.length && this._running) {\n        var c = this._buffer.charAt(this._index);\n        if (this._state === TEXT) {\n            this._stateText(c);\n        } else if (this._state === BEFORE_TAG_NAME) {\n            this._stateBeforeTagName(c);\n        } else if (this._state === IN_TAG_NAME) {\n            this._stateInTagName(c);\n        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {\n            this._stateBeforeCloseingTagName(c);\n        } else if (this._state === IN_CLOSING_TAG_NAME) {\n            this._stateInCloseingTagName(c);\n        } else if (this._state === AFTER_CLOSING_TAG_NAME) {\n            this._stateAfterCloseingTagName(c);\n        } else if (this._state === IN_SELF_CLOSING_TAG) {\n            this._stateInSelfClosingTag(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {\n\n        /*\n\t\t*\tattributes\n\t\t*/\n            this._stateBeforeAttributeName(c);\n        } else if (this._state === IN_ATTRIBUTE_NAME) {\n            this._stateInAttributeName(c);\n        } else if (this._state === AFTER_ATTRIBUTE_NAME) {\n            this._stateAfterAttributeName(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {\n            this._stateBeforeAttributeValue(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {\n            this._stateInAttributeValueDoubleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {\n            this._stateInAttributeValueSingleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {\n            this._stateInAttributeValueNoQuotes(c);\n        } else if (this._state === BEFORE_DECLARATION) {\n\n        /*\n\t\t*\tdeclarations\n\t\t*/\n            this._stateBeforeDeclaration(c);\n        } else if (this._state === IN_DECLARATION) {\n            this._stateInDeclaration(c);\n        } else if (this._state === IN_PROCESSING_INSTRUCTION) {\n\n        /*\n\t\t*\tprocessing instructions\n\t\t*/\n            this._stateInProcessingInstruction(c);\n        } else if (this._state === BEFORE_COMMENT) {\n\n        /*\n\t\t*\tcomments\n\t\t*/\n            this._stateBeforeComment(c);\n        } else if (this._state === IN_COMMENT) {\n            this._stateInComment(c);\n        } else if (this._state === AFTER_COMMENT_1) {\n            this._stateAfterComment1(c);\n        } else if (this._state === AFTER_COMMENT_2) {\n            this._stateAfterComment2(c);\n        } else if (this._state === BEFORE_CDATA_1) {\n\n        /*\n\t\t*\tcdata\n\t\t*/\n            this._stateBeforeCdata1(c);\n        } else if (this._state === BEFORE_CDATA_2) {\n            this._stateBeforeCdata2(c);\n        } else if (this._state === BEFORE_CDATA_3) {\n            this._stateBeforeCdata3(c);\n        } else if (this._state === BEFORE_CDATA_4) {\n            this._stateBeforeCdata4(c);\n        } else if (this._state === BEFORE_CDATA_5) {\n            this._stateBeforeCdata5(c);\n        } else if (this._state === BEFORE_CDATA_6) {\n            this._stateBeforeCdata6(c);\n        } else if (this._state === IN_CDATA) {\n            this._stateInCdata(c);\n        } else if (this._state === AFTER_CDATA_1) {\n            this._stateAfterCdata1(c);\n        } else if (this._state === AFTER_CDATA_2) {\n            this._stateAfterCdata2(c);\n        } else if (this._state === BEFORE_SPECIAL) {\n\n        /*\n\t\t* special tags\n\t\t*/\n            this._stateBeforeSpecial(c);\n        } else if (this._state === BEFORE_SPECIAL_END) {\n            this._stateBeforeSpecialEnd(c);\n        } else if (this._state === BEFORE_SCRIPT_1) {\n\n        /*\n\t\t* script\n\t\t*/\n            this._stateBeforeScript1(c);\n        } else if (this._state === BEFORE_SCRIPT_2) {\n            this._stateBeforeScript2(c);\n        } else if (this._state === BEFORE_SCRIPT_3) {\n            this._stateBeforeScript3(c);\n        } else if (this._state === BEFORE_SCRIPT_4) {\n            this._stateBeforeScript4(c);\n        } else if (this._state === BEFORE_SCRIPT_5) {\n            this._stateBeforeScript5(c);\n        } else if (this._state === AFTER_SCRIPT_1) {\n            this._stateAfterScript1(c);\n        } else if (this._state === AFTER_SCRIPT_2) {\n            this._stateAfterScript2(c);\n        } else if (this._state === AFTER_SCRIPT_3) {\n            this._stateAfterScript3(c);\n        } else if (this._state === AFTER_SCRIPT_4) {\n            this._stateAfterScript4(c);\n        } else if (this._state === AFTER_SCRIPT_5) {\n            this._stateAfterScript5(c);\n        } else if (this._state === BEFORE_STYLE_1) {\n\n        /*\n\t\t* style\n\t\t*/\n            this._stateBeforeStyle1(c);\n        } else if (this._state === BEFORE_STYLE_2) {\n            this._stateBeforeStyle2(c);\n        } else if (this._state === BEFORE_STYLE_3) {\n            this._stateBeforeStyle3(c);\n        } else if (this._state === BEFORE_STYLE_4) {\n            this._stateBeforeStyle4(c);\n        } else if (this._state === AFTER_STYLE_1) {\n            this._stateAfterStyle1(c);\n        } else if (this._state === AFTER_STYLE_2) {\n            this._stateAfterStyle2(c);\n        } else if (this._state === AFTER_STYLE_3) {\n            this._stateAfterStyle3(c);\n        } else if (this._state === AFTER_STYLE_4) {\n            this._stateAfterStyle4(c);\n        } else if (this._state === BEFORE_ENTITY) {\n\n        /*\n\t\t* entities\n\t\t*/\n            this._stateBeforeEntity(c);\n        } else if (this._state === BEFORE_NUMERIC_ENTITY) {\n            this._stateBeforeNumericEntity(c);\n        } else if (this._state === IN_NAMED_ENTITY) {\n            this._stateInNamedEntity(c);\n        } else if (this._state === IN_NUMERIC_ENTITY) {\n            this._stateInNumericEntity(c);\n        } else if (this._state === IN_HEX_ENTITY) {\n            this._stateInHexEntity(c);\n        } else {\n            this._cbs.onerror(Error(\"unknown _state\"), this._state);\n        }\n\n        this._index++;\n    }\n\n    this._cleanup();\n};\n\nTokenizer.prototype.pause = function() {\n    this._running = false;\n};\nTokenizer.prototype.resume = function() {\n    this._running = true;\n\n    if (this._index < this._buffer.length) {\n        this._parse();\n    }\n    if (this._ended) {\n        this._finish();\n    }\n};\n\nTokenizer.prototype.end = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n\n    this._ended = true;\n\n    if (this._running) this._finish();\n};\n\nTokenizer.prototype._finish = function() {\n    //if there is remaining data, emit it in a reasonable way\n    if (this._sectionStart < this._index) {\n        this._handleTrailingData();\n    }\n\n    this._cbs.onend();\n};\n\nTokenizer.prototype._handleTrailingData = function() {\n    var data = this._buffer.substr(this._sectionStart);\n\n    if (\n        this._state === IN_CDATA ||\n        this._state === AFTER_CDATA_1 ||\n        this._state === AFTER_CDATA_2\n    ) {\n        this._cbs.oncdata(data);\n    } else if (\n        this._state === IN_COMMENT ||\n        this._state === AFTER_COMMENT_1 ||\n        this._state === AFTER_COMMENT_2\n    ) {\n        this._cbs.oncomment(data);\n    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {\n        this._parseLegacyEntity();\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(2, 10);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(3, 16);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (\n        this._state !== IN_TAG_NAME &&\n        this._state !== BEFORE_ATTRIBUTE_NAME &&\n        this._state !== BEFORE_ATTRIBUTE_VALUE &&\n        this._state !== AFTER_ATTRIBUTE_NAME &&\n        this._state !== IN_ATTRIBUTE_NAME &&\n        this._state !== IN_ATTRIBUTE_VALUE_SQ &&\n        this._state !== IN_ATTRIBUTE_VALUE_DQ &&\n        this._state !== IN_ATTRIBUTE_VALUE_NQ &&\n        this._state !== IN_CLOSING_TAG_NAME\n    ) {\n        this._cbs.ontext(data);\n    }\n    //else, ignore remaining data\n    //TODO add a way to remove current tag\n};\n\nTokenizer.prototype.reset = function() {\n    Tokenizer.call(\n        this,\n        { xmlMode: this._xmlMode, decodeEntities: this._decodeEntities },\n        this._cbs\n    );\n};\n\nTokenizer.prototype.getAbsoluteIndex = function() {\n    return this._bufferOffset + this._index;\n};\n\nTokenizer.prototype._getSection = function() {\n    return this._buffer.substring(this._sectionStart, this._index);\n};\n\nTokenizer.prototype._emitToken = function(name) {\n    this._cbs[name](this._getSection());\n    this._sectionStart = -1;\n};\n\nTokenizer.prototype._emitPartial = function(value) {\n    if (this._baseState !== TEXT) {\n        this._cbs.onattribdata(value); //TODO implement the new event\n    } else {\n        this._cbs.ontext(value);\n    }\n};\n","module.exports = Stream;\n\nvar Parser = require(\"./Parser.js\");\nvar WritableStream = require(\"readable-stream\").Writable;\nvar StringDecoder = require(\"string_decoder\").StringDecoder;\nvar Buffer = require(\"buffer\").Buffer;\n\nfunction Stream(cbs, options) {\n    var parser = (this._parser = new Parser(cbs, options));\n    var decoder = (this._decoder = new StringDecoder());\n\n    WritableStream.call(this, { decodeStrings: false });\n\n    this.once(\"finish\", function() {\n        parser.end(decoder.end());\n    });\n}\n\nrequire(\"inherits\")(Stream, WritableStream);\n\nStream.prototype._write = function(chunk, encoding, cb) {\n    if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);\n    this._parser.write(chunk);\n    cb();\n};\n","var Parser = require(\"./Parser.js\");\nvar DomHandler = require(\"domhandler\");\n\nfunction defineProp(name, value) {\n    delete module.exports[name];\n    module.exports[name] = value;\n    return value;\n}\n\nmodule.exports = {\n    Parser: Parser,\n    Tokenizer: require(\"./Tokenizer.js\"),\n    ElementType: require(\"domelementtype\"),\n    DomHandler: DomHandler,\n    get FeedHandler() {\n        return defineProp(\"FeedHandler\", require(\"./FeedHandler.js\"));\n    },\n    get Stream() {\n        return defineProp(\"Stream\", require(\"./Stream.js\"));\n    },\n    get WritableStream() {\n        return defineProp(\"WritableStream\", require(\"./WritableStream.js\"));\n    },\n    get ProxyHandler() {\n        return defineProp(\"ProxyHandler\", require(\"./ProxyHandler.js\"));\n    },\n    get DomUtils() {\n        return defineProp(\"DomUtils\", require(\"domutils\"));\n    },\n    get CollectingHandler() {\n        return defineProp(\n            \"CollectingHandler\",\n            require(\"./CollectingHandler.js\")\n        );\n    },\n    // For legacy support\n    DefaultHandler: DomHandler,\n    get RssHandler() {\n        return defineProp(\"RssHandler\", this.FeedHandler);\n    },\n    //helper methods\n    parseDOM: function(data, options) {\n        var handler = new DomHandler(options);\n        new Parser(handler, options).end(data);\n        return handler.dom;\n    },\n    parseFeed: function(feed, options) {\n        var handler = new module.exports.FeedHandler(options);\n        new Parser(handler, options).end(feed);\n        return handler.dom;\n    },\n    createDomStream: function(cb, options, elementCb) {\n        var handler = new DomHandler(cb, options, elementCb);\n        return new Parser(handler, options);\n    },\n    // List of all events that the parser emits\n    EVENTS: {\n        /* Format: eventname: number of arguments */\n        attribute: 2,\n        cdatastart: 0,\n        cdataend: 0,\n        text: 1,\n        processinginstruction: 2,\n        comment: 1,\n        commentend: 0,\n        closetag: 1,\n        opentag: 2,\n        opentagname: 1,\n        error: 1,\n        end: 0\n    }\n};\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :\n    typeof define === 'function' && define.amd ? define(['react'], factory) :\n    (global.ReactOwlCarousel = factory(global.React));\n}(this, (function (React) { 'use strict';\n\n    var React__default = 'default' in React ? React['default'] : React;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\n\n    /**\n     * Owl Carousel v2.3.4\n     * Copyright 2013-2018 David Deutsch\n     * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE\n     */\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates a carousel.\n    \t * @class The Owl Carousel.\n    \t * @public\n    \t * @param {HTMLElement|jQuery} element - The element to create the carousel for.\n    \t * @param {Object} [options] - The options\n    \t */\n    \tfunction Owl(element, options) {\n\n    \t\t/**\n    \t\t * Current settings for the carousel.\n    \t\t * @public\n    \t\t */\n    \t\tthis.settings = null;\n\n    \t\t/**\n    \t\t * Current options set by the caller including defaults.\n    \t\t * @public\n    \t\t */\n    \t\tthis.options = $.extend({}, Owl.Defaults, options);\n\n    \t\t/**\n    \t\t * Plugin element.\n    \t\t * @public\n    \t\t */\n    \t\tthis.$element = $(element);\n\n    \t\t/**\n    \t\t * Proxied event handlers.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._handlers = {};\n\n    \t\t/**\n    \t\t * References to the running plugins of this carousel.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._plugins = {};\n\n    \t\t/**\n    \t\t * Currently suppressed events to prevent them from being retriggered.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._supress = {};\n\n    \t\t/**\n    \t\t * Absolute current position.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._current = null;\n\n    \t\t/**\n    \t\t * Animation speed in milliseconds.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._speed = null;\n\n    \t\t/**\n    \t\t * Coordinates of all items in pixel.\n    \t\t * @todo The name of this member is missleading.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._coordinates = [];\n\n    \t\t/**\n    \t\t * Current breakpoint.\n    \t\t * @todo Real media queries would be nice.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._breakpoint = null;\n\n    \t\t/**\n    \t\t * Current width of the plugin element.\n    \t\t */\n    \t\tthis._width = null;\n\n    \t\t/**\n    \t\t * All real items.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._items = [];\n\n    \t\t/**\n    \t\t * All cloned items.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._clones = [];\n\n    \t\t/**\n    \t\t * Merge values of all items.\n    \t\t * @todo Maybe this could be part of a plugin.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._mergers = [];\n\n    \t\t/**\n    \t\t * Widths of all items.\n    \t\t */\n    \t\tthis._widths = [];\n\n    \t\t/**\n    \t\t * Invalidated parts within the update process.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._invalidated = {};\n\n    \t\t/**\n    \t\t * Ordered list of workers for the update process.\n    \t\t * @protected\n    \t\t */\n    \t\tthis._pipe = [];\n\n    \t\t/**\n    \t\t * Current state information for the drag operation.\n    \t\t * @todo #261\n    \t\t * @protected\n    \t\t */\n    \t\tthis._drag = {\n    \t\t\ttime: null,\n    \t\t\ttarget: null,\n    \t\t\tpointer: null,\n    \t\t\tstage: {\n    \t\t\t\tstart: null,\n    \t\t\t\tcurrent: null\n    \t\t\t},\n    \t\t\tdirection: null\n    \t\t};\n\n    \t\t/**\n    \t\t * Current state information and their tags.\n    \t\t * @type {Object}\n    \t\t * @protected\n    \t\t */\n    \t\tthis._states = {\n    \t\t\tcurrent: {},\n    \t\t\ttags: {\n    \t\t\t\t'initializing': [ 'busy' ],\n    \t\t\t\t'animating': [ 'busy' ],\n    \t\t\t\t'dragging': [ 'interacting' ]\n    \t\t\t}\n    \t\t};\n\n    \t\t$.each([ 'onResize', 'onThrottledResize' ], $.proxy(function(i, handler) {\n    \t\t\tthis._handlers[handler] = $.proxy(this[handler], this);\n    \t\t}, this));\n\n    \t\t$.each(Owl.Plugins, $.proxy(function(key, plugin) {\n    \t\t\tthis._plugins[key.charAt(0).toLowerCase() + key.slice(1)]\n    \t\t\t\t= new plugin(this);\n    \t\t}, this));\n\n    \t\t$.each(Owl.Workers, $.proxy(function(priority, worker) {\n    \t\t\tthis._pipe.push({\n    \t\t\t\t'filter': worker.filter,\n    \t\t\t\t'run': $.proxy(worker.run, this)\n    \t\t\t});\n    \t\t}, this));\n\n    \t\tthis.setup();\n    \t\tthis.initialize();\n    \t}\n\n    \t/**\n    \t * Default options for the carousel.\n    \t * @public\n    \t */\n    \tOwl.Defaults = {\n    \t\titems: 3,\n    \t\tloop: false,\n    \t\tcenter: false,\n    \t\trewind: false,\n    \t\tcheckVisibility: true,\n\n    \t\tmouseDrag: true,\n    \t\ttouchDrag: true,\n    \t\tpullDrag: true,\n    \t\tfreeDrag: false,\n\n    \t\tmargin: 0,\n    \t\tstagePadding: 0,\n\n    \t\tmerge: false,\n    \t\tmergeFit: true,\n    \t\tautoWidth: false,\n\n    \t\tstartPosition: 0,\n    \t\trtl: false,\n\n    \t\tsmartSpeed: 250,\n    \t\tfluidSpeed: false,\n    \t\tdragEndSpeed: false,\n\n    \t\tresponsive: {},\n    \t\tresponsiveRefreshRate: 200,\n    \t\tresponsiveBaseElement: window,\n\n    \t\tfallbackEasing: 'swing',\n    \t\tslideTransition: '',\n\n    \t\tinfo: false,\n\n    \t\tnestedItemSelector: false,\n    \t\titemElement: 'div',\n    \t\tstageElement: 'div',\n\n    \t\trefreshClass: 'owl-refresh',\n    \t\tloadedClass: 'owl-loaded',\n    \t\tloadingClass: 'owl-loading',\n    \t\trtlClass: 'owl-rtl',\n    \t\tresponsiveClass: 'owl-responsive',\n    \t\tdragClass: 'owl-drag',\n    \t\titemClass: 'owl-item',\n    \t\tstageClass: 'owl-stage',\n    \t\tstageOuterClass: 'owl-stage-outer',\n    \t\tgrabClass: 'owl-grab'\n    \t};\n\n    \t/**\n    \t * Enumeration for width.\n    \t * @public\n    \t * @readonly\n    \t * @enum {String}\n    \t */\n    \tOwl.Width = {\n    \t\tDefault: 'default',\n    \t\tInner: 'inner',\n    \t\tOuter: 'outer'\n    \t};\n\n    \t/**\n    \t * Enumeration for types.\n    \t * @public\n    \t * @readonly\n    \t * @enum {String}\n    \t */\n    \tOwl.Type = {\n    \t\tEvent: 'event',\n    \t\tState: 'state'\n    \t};\n\n    \t/**\n    \t * Contains all registered plugins.\n    \t * @public\n    \t */\n    \tOwl.Plugins = {};\n\n    \t/**\n    \t * List of workers involved in the update process.\n    \t */\n    \tOwl.Workers = [ {\n    \t\tfilter: [ 'width', 'settings' ],\n    \t\trun: function() {\n    \t\t\tthis._width = this.$element.width();\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function(cache) {\n    \t\t\tcache.current = this._items && this._items[this.relative(this._current)];\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'items', 'settings' ],\n    \t\trun: function() {\n    \t\t\tthis.$stage.children('.cloned').remove();\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function(cache) {\n    \t\t\tvar margin = this.settings.margin || '',\n    \t\t\t\tgrid = !this.settings.autoWidth,\n    \t\t\t\trtl = this.settings.rtl,\n    \t\t\t\tcss = {\n    \t\t\t\t\t'width': 'auto',\n    \t\t\t\t\t'margin-left': rtl ? margin : '',\n    \t\t\t\t\t'margin-right': rtl ? '' : margin\n    \t\t\t\t};\n\n    \t\t\t!grid && this.$stage.children().css(css);\n\n    \t\t\tcache.css = css;\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function(cache) {\n    \t\t\tvar width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n    \t\t\t\tmerge = null,\n    \t\t\t\titerator = this._items.length,\n    \t\t\t\tgrid = !this.settings.autoWidth,\n    \t\t\t\twidths = [];\n\n    \t\t\tcache.items = {\n    \t\t\t\tmerge: false,\n    \t\t\t\twidth: width\n    \t\t\t};\n\n    \t\t\twhile (iterator--) {\n    \t\t\t\tmerge = this._mergers[iterator];\n    \t\t\t\tmerge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n\n    \t\t\t\tcache.items.merge = merge > 1 || cache.items.merge;\n\n    \t\t\t\twidths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n    \t\t\t}\n\n    \t\t\tthis._widths = widths;\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'items', 'settings' ],\n    \t\trun: function() {\n    \t\t\tvar clones = [],\n    \t\t\t\titems = this._items,\n    \t\t\t\tsettings = this.settings,\n    \t\t\t\t// TODO: Should be computed from number of min width items in stage\n    \t\t\t\tview = Math.max(settings.items * 2, 4),\n    \t\t\t\tsize = Math.ceil(items.length / 2) * 2,\n    \t\t\t\trepeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,\n    \t\t\t\tappend = '',\n    \t\t\t\tprepend = '';\n\n    \t\t\trepeat /= 2;\n\n    \t\t\twhile (repeat > 0) {\n    \t\t\t\t// Switch to only using appended clones\n    \t\t\t\tclones.push(this.normalize(clones.length / 2, true));\n    \t\t\t\tappend = append + items[clones[clones.length - 1]][0].outerHTML;\n    \t\t\t\tclones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n    \t\t\t\tprepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n    \t\t\t\trepeat -= 1;\n    \t\t\t}\n\n    \t\t\tthis._clones = clones;\n\n    \t\t\t$(append).addClass('cloned').appendTo(this.$stage);\n    \t\t\t$(prepend).addClass('cloned').prependTo(this.$stage);\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function() {\n    \t\t\tvar rtl = this.settings.rtl ? 1 : -1,\n    \t\t\t\tsize = this._clones.length + this._items.length,\n    \t\t\t\titerator = -1,\n    \t\t\t\tprevious = 0,\n    \t\t\t\tcurrent = 0,\n    \t\t\t\tcoordinates = [];\n\n    \t\t\twhile (++iterator < size) {\n    \t\t\t\tprevious = coordinates[iterator - 1] || 0;\n    \t\t\t\tcurrent = this._widths[this.relative(iterator)] + this.settings.margin;\n    \t\t\t\tcoordinates.push(previous + current * rtl);\n    \t\t\t}\n\n    \t\t\tthis._coordinates = coordinates;\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function() {\n    \t\t\tvar padding = this.settings.stagePadding,\n    \t\t\t\tcoordinates = this._coordinates,\n    \t\t\t\tcss = {\n    \t\t\t\t\t'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n    \t\t\t\t\t'padding-left': padding || '',\n    \t\t\t\t\t'padding-right': padding || ''\n    \t\t\t\t};\n\n    \t\t\tthis.$stage.css(css);\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function(cache) {\n    \t\t\tvar iterator = this._coordinates.length,\n    \t\t\t\tgrid = !this.settings.autoWidth,\n    \t\t\t\titems = this.$stage.children();\n\n    \t\t\tif (grid && cache.items.merge) {\n    \t\t\t\twhile (iterator--) {\n    \t\t\t\t\tcache.css.width = this._widths[this.relative(iterator)];\n    \t\t\t\t\titems.eq(iterator).css(cache.css);\n    \t\t\t\t}\n    \t\t\t} else if (grid) {\n    \t\t\t\tcache.css.width = cache.items.width;\n    \t\t\t\titems.css(cache.css);\n    \t\t\t}\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'items' ],\n    \t\trun: function() {\n    \t\t\tthis._coordinates.length < 1 && this.$stage.removeAttr('style');\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'items', 'settings' ],\n    \t\trun: function(cache) {\n    \t\t\tcache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n    \t\t\tcache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n    \t\t\tthis.reset(cache.current);\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'position' ],\n    \t\trun: function() {\n    \t\t\tthis.animate(this.coordinates(this._current));\n    \t\t}\n    \t}, {\n    \t\tfilter: [ 'width', 'position', 'items', 'settings' ],\n    \t\trun: function() {\n    \t\t\tvar rtl = this.settings.rtl ? 1 : -1,\n    \t\t\t\tpadding = this.settings.stagePadding * 2,\n    \t\t\t\tbegin = this.coordinates(this.current()) + padding,\n    \t\t\t\tend = begin + this.width() * rtl,\n    \t\t\t\tinner, outer, matches = [], i, n;\n\n    \t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {\n    \t\t\t\tinner = this._coordinates[i - 1] || 0;\n    \t\t\t\touter = Math.abs(this._coordinates[i]) + padding * rtl;\n\n    \t\t\t\tif ((this.op(inner, '<=', begin) && (this.op(inner, '>', end)))\n    \t\t\t\t\t|| (this.op(outer, '<', begin) && this.op(outer, '>', end))) {\n    \t\t\t\t\tmatches.push(i);\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\tthis.$stage.children('.active').removeClass('active');\n    \t\t\tthis.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');\n\n    \t\t\tthis.$stage.children('.center').removeClass('center');\n    \t\t\tif (this.settings.center) {\n    \t\t\t\tthis.$stage.children().eq(this.current()).addClass('center');\n    \t\t\t}\n    \t\t}\n    \t} ];\n\n    \t/**\n    \t * Create the stage DOM element\n    \t */\n    \tOwl.prototype.initializeStage = function() {\n    \t\tthis.$stage = this.$element.find('.' + this.settings.stageClass);\n\n    \t\t// if the stage is already in the DOM, grab it and skip stage initialization\n    \t\tif (this.$stage.length) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis.$element.addClass(this.options.loadingClass);\n\n    \t\t// create stage\n    \t\tthis.$stage = $('<' + this.settings.stageElement + '>', {\n    \t\t\t\"class\": this.settings.stageClass\n    \t\t}).wrap( $( '<div/>', {\n    \t\t\t\"class\": this.settings.stageOuterClass\n    \t\t}));\n\n    \t\t// append stage\n    \t\tthis.$element.append(this.$stage.parent());\n    \t};\n\n    \t/**\n    \t * Create item DOM elements\n    \t */\n    \tOwl.prototype.initializeItems = function() {\n    \t\tvar $items = this.$element.find('.owl-item');\n\n    \t\t// if the items are already in the DOM, grab them and skip item initialization\n    \t\tif ($items.length) {\n    \t\t\tthis._items = $items.get().map(function(item) {\n    \t\t\t\treturn $(item);\n    \t\t\t});\n\n    \t\t\tthis._mergers = this._items.map(function() {\n    \t\t\t\treturn 1;\n    \t\t\t});\n\n    \t\t\tthis.refresh();\n\n    \t\t\treturn;\n    \t\t}\n\n    \t\t// append content\n    \t\tthis.replace(this.$element.children().not(this.$stage.parent()));\n\n    \t\t// check visibility\n    \t\tif (this.isVisible()) {\n    \t\t\t// update view\n    \t\t\tthis.refresh();\n    \t\t} else {\n    \t\t\t// invalidate width\n    \t\t\tthis.invalidate('width');\n    \t\t}\n\n    \t\tthis.$element\n    \t\t\t.removeClass(this.options.loadingClass)\n    \t\t\t.addClass(this.options.loadedClass);\n    \t};\n\n    \t/**\n    \t * Initializes the carousel.\n    \t * @protected\n    \t */\n    \tOwl.prototype.initialize = function() {\n    \t\tthis.enter('initializing');\n    \t\tthis.trigger('initialize');\n\n    \t\tthis.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n\n    \t\tif (this.settings.autoWidth && !this.is('pre-loading')) {\n    \t\t\tvar imgs, nestedSelector, width;\n    \t\t\timgs = this.$element.find('img');\n    \t\t\tnestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;\n    \t\t\twidth = this.$element.children(nestedSelector).width();\n\n    \t\t\tif (imgs.length && width <= 0) {\n    \t\t\t\tthis.preloadAutoWidthImages(imgs);\n    \t\t\t}\n    \t\t}\n\n    \t\tthis.initializeStage();\n    \t\tthis.initializeItems();\n\n    \t\t// register event handlers\n    \t\tthis.registerEventHandlers();\n\n    \t\tthis.leave('initializing');\n    \t\tthis.trigger('initialized');\n    \t};\n\n    \t/**\n    \t * @returns {Boolean} visibility of $element\n    \t *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to\n    \t *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does\n    \t */\n    \tOwl.prototype.isVisible = function() {\n    \t\treturn this.settings.checkVisibility\n    \t\t\t? this.$element.is(':visible')\n    \t\t\t: true;\n    \t};\n\n    \t/**\n    \t * Setups the current settings.\n    \t * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n    \t * @todo Support for media queries by using `matchMedia` would be nice.\n    \t * @public\n    \t */\n    \tOwl.prototype.setup = function() {\n    \t\tvar viewport = this.viewport(),\n    \t\t\toverwrites = this.options.responsive,\n    \t\t\tmatch = -1,\n    \t\t\tsettings = null;\n\n    \t\tif (!overwrites) {\n    \t\t\tsettings = $.extend({}, this.options);\n    \t\t} else {\n    \t\t\t$.each(overwrites, function(breakpoint) {\n    \t\t\t\tif (breakpoint <= viewport && breakpoint > match) {\n    \t\t\t\t\tmatch = Number(breakpoint);\n    \t\t\t\t}\n    \t\t\t});\n\n    \t\t\tsettings = $.extend({}, this.options, overwrites[match]);\n    \t\t\tif (typeof settings.stagePadding === 'function') {\n    \t\t\t\tsettings.stagePadding = settings.stagePadding();\n    \t\t\t}\n    \t\t\tdelete settings.responsive;\n\n    \t\t\t// responsive class\n    \t\t\tif (settings.responsiveClass) {\n    \t\t\t\tthis.$element.attr('class',\n    \t\t\t\t\tthis.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + match)\n    \t\t\t\t);\n    \t\t\t}\n    \t\t}\n\n    \t\tthis.trigger('change', { property: { name: 'settings', value: settings } });\n    \t\tthis._breakpoint = match;\n    \t\tthis.settings = settings;\n    \t\tthis.invalidate('settings');\n    \t\tthis.trigger('changed', { property: { name: 'settings', value: this.settings } });\n    \t};\n\n    \t/**\n    \t * Updates option logic if necessery.\n    \t * @protected\n    \t */\n    \tOwl.prototype.optionsLogic = function() {\n    \t\tif (this.settings.autoWidth) {\n    \t\t\tthis.settings.stagePadding = false;\n    \t\t\tthis.settings.merge = false;\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Prepares an item before add.\n    \t * @todo Rename event parameter `content` to `item`.\n    \t * @protected\n    \t * @returns {jQuery|HTMLElement} - The item container.\n    \t */\n    \tOwl.prototype.prepare = function(item) {\n    \t\tvar event = this.trigger('prepare', { content: item });\n\n    \t\tif (!event.data) {\n    \t\t\tevent.data = $('<' + this.settings.itemElement + '/>')\n    \t\t\t\t.addClass(this.options.itemClass).append(item);\n    \t\t}\n\n    \t\tthis.trigger('prepared', { content: event.data });\n\n    \t\treturn event.data;\n    \t};\n\n    \t/**\n    \t * Updates the view.\n    \t * @public\n    \t */\n    \tOwl.prototype.update = function() {\n    \t\tvar i = 0,\n    \t\t\tn = this._pipe.length,\n    \t\t\tfilter = $.proxy(function(p) { return this[p] }, this._invalidated),\n    \t\t\tcache = {};\n\n    \t\twhile (i < n) {\n    \t\t\tif (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n    \t\t\t\tthis._pipe[i].run(cache);\n    \t\t\t}\n    \t\t\ti++;\n    \t\t}\n\n    \t\tthis._invalidated = {};\n\n    \t\t!this.is('valid') && this.enter('valid');\n    \t};\n\n    \t/**\n    \t * Gets the width of the view.\n    \t * @public\n    \t * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\n    \t * @returns {Number} - The width of the view in pixel.\n    \t */\n    \tOwl.prototype.width = function(dimension) {\n    \t\tdimension = dimension || Owl.Width.Default;\n    \t\tswitch (dimension) {\n    \t\t\tcase Owl.Width.Inner:\n    \t\t\tcase Owl.Width.Outer:\n    \t\t\t\treturn this._width;\n    \t\t\tdefault:\n    \t\t\t\treturn this._width - this.settings.stagePadding * 2 + this.settings.margin;\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Refreshes the carousel primarily for adaptive purposes.\n    \t * @public\n    \t */\n    \tOwl.prototype.refresh = function() {\n    \t\tthis.enter('refreshing');\n    \t\tthis.trigger('refresh');\n\n    \t\tthis.setup();\n\n    \t\tthis.optionsLogic();\n\n    \t\tthis.$element.addClass(this.options.refreshClass);\n\n    \t\tthis.update();\n\n    \t\tthis.$element.removeClass(this.options.refreshClass);\n\n    \t\tthis.leave('refreshing');\n    \t\tthis.trigger('refreshed');\n    \t};\n\n    \t/**\n    \t * Checks window `resize` event.\n    \t * @protected\n    \t */\n    \tOwl.prototype.onThrottledResize = function() {\n    \t\twindow.clearTimeout(this.resizeTimer);\n    \t\tthis.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n    \t};\n\n    \t/**\n    \t * Checks window `resize` event.\n    \t * @protected\n    \t */\n    \tOwl.prototype.onResize = function() {\n    \t\tif (!this._items.length) {\n    \t\t\treturn false;\n    \t\t}\n\n    \t\tif (this._width === this.$element.width()) {\n    \t\t\treturn false;\n    \t\t}\n\n    \t\tif (!this.isVisible()) {\n    \t\t\treturn false;\n    \t\t}\n\n    \t\tthis.enter('resizing');\n\n    \t\tif (this.trigger('resize').isDefaultPrevented()) {\n    \t\t\tthis.leave('resizing');\n    \t\t\treturn false;\n    \t\t}\n\n    \t\tthis.invalidate('width');\n\n    \t\tthis.refresh();\n\n    \t\tthis.leave('resizing');\n    \t\tthis.trigger('resized');\n    \t};\n\n    \t/**\n    \t * Registers event handlers.\n    \t * @todo Check `msPointerEnabled`\n    \t * @todo #261\n    \t * @protected\n    \t */\n    \tOwl.prototype.registerEventHandlers = function() {\n    \t\tif ($.support.transition) {\n    \t\t\tthis.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));\n    \t\t}\n\n    \t\tif (this.settings.responsive !== false) {\n    \t\t\tthis.on(window, 'resize', this._handlers.onThrottledResize);\n    \t\t}\n\n    \t\tif (this.settings.mouseDrag) {\n    \t\t\tthis.$element.addClass(this.options.dragClass);\n    \t\t\tthis.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));\n    \t\t\tthis.$stage.on('dragstart.owl.core selectstart.owl.core', function() { return false });\n    \t\t}\n\n    \t\tif (this.settings.touchDrag){\n    \t\t\tthis.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));\n    \t\t\tthis.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Handles `touchstart` and `mousedown` events.\n    \t * @todo Horizontal swipe threshold as option\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */\n    \tOwl.prototype.onDragStart = function(event) {\n    \t\tvar stage = null;\n\n    \t\tif (event.which === 3) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tif ($.support.transform) {\n    \t\t\tstage = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(',');\n    \t\t\tstage = {\n    \t\t\t\tx: stage[stage.length === 16 ? 12 : 4],\n    \t\t\t\ty: stage[stage.length === 16 ? 13 : 5]\n    \t\t\t};\n    \t\t} else {\n    \t\t\tstage = this.$stage.position();\n    \t\t\tstage = {\n    \t\t\t\tx: this.settings.rtl ?\n    \t\t\t\t\tstage.left + this.$stage.width() - this.width() + this.settings.margin :\n    \t\t\t\t\tstage.left,\n    \t\t\t\ty: stage.top\n    \t\t\t};\n    \t\t}\n\n    \t\tif (this.is('animating')) {\n    \t\t\t$.support.transform ? this.animate(stage.x) : this.$stage.stop();\n    \t\t\tthis.invalidate('position');\n    \t\t}\n\n    \t\tthis.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');\n\n    \t\tthis.speed(0);\n\n    \t\tthis._drag.time = new Date().getTime();\n    \t\tthis._drag.target = $(event.target);\n    \t\tthis._drag.stage.start = stage;\n    \t\tthis._drag.stage.current = stage;\n    \t\tthis._drag.pointer = this.pointer(event);\n\n    \t\t$(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));\n\n    \t\t$(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function(event) {\n    \t\t\tvar delta = this.difference(this._drag.pointer, this.pointer(event));\n\n    \t\t\t$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));\n\n    \t\t\tif (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {\n    \t\t\t\treturn;\n    \t\t\t}\n\n    \t\t\tevent.preventDefault();\n\n    \t\t\tthis.enter('dragging');\n    \t\t\tthis.trigger('drag');\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Handles the `touchmove` and `mousemove` events.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */\n    \tOwl.prototype.onDragMove = function(event) {\n    \t\tvar minimum = null,\n    \t\t\tmaximum = null,\n    \t\t\tpull = null,\n    \t\t\tdelta = this.difference(this._drag.pointer, this.pointer(event)),\n    \t\t\tstage = this.difference(this._drag.stage.start, delta);\n\n    \t\tif (!this.is('dragging')) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tevent.preventDefault();\n\n    \t\tif (this.settings.loop) {\n    \t\t\tminimum = this.coordinates(this.minimum());\n    \t\t\tmaximum = this.coordinates(this.maximum() + 1) - minimum;\n    \t\t\tstage.x = (((stage.x - minimum) % maximum + maximum) % maximum) + minimum;\n    \t\t} else {\n    \t\t\tminimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n    \t\t\tmaximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n    \t\t\tpull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n    \t\t\tstage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n    \t\t}\n\n    \t\tthis._drag.stage.current = stage;\n\n    \t\tthis.animate(stage.x);\n    \t};\n\n    \t/**\n    \t * Handles the `touchend` and `mouseup` events.\n    \t * @todo #261\n    \t * @todo Threshold for click event\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */\n    \tOwl.prototype.onDragEnd = function(event) {\n    \t\tvar delta = this.difference(this._drag.pointer, this.pointer(event)),\n    \t\t\tstage = this._drag.stage.current,\n    \t\t\tdirection = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';\n\n    \t\t$(document).off('.owl.core');\n\n    \t\tthis.$element.removeClass(this.options.grabClass);\n\n    \t\tif (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\n    \t\t\tthis.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n    \t\t\tthis.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n    \t\t\tthis.invalidate('position');\n    \t\t\tthis.update();\n\n    \t\t\tthis._drag.direction = direction;\n\n    \t\t\tif (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n    \t\t\t\tthis._drag.target.one('click.owl.core', function() { return false; });\n    \t\t\t}\n    \t\t}\n\n    \t\tif (!this.is('dragging')) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis.leave('dragging');\n    \t\tthis.trigger('dragged');\n    \t};\n\n    \t/**\n    \t * Gets absolute position of the closest item for a coordinate.\n    \t * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n    \t * @protected\n    \t * @param {Number} coordinate - The coordinate in pixel.\n    \t * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\n    \t * @return {Number} - The absolute position of the closest item.\n    \t */\n    \tOwl.prototype.closest = function(coordinate, direction) {\n    \t\tvar position = -1,\n    \t\t\tpull = 30,\n    \t\t\twidth = this.width(),\n    \t\t\tcoordinates = this.coordinates();\n\n    \t\tif (!this.settings.freeDrag) {\n    \t\t\t// check closest item\n    \t\t\t$.each(coordinates, $.proxy(function(index, value) {\n    \t\t\t\t// on a left pull, check on current index\n    \t\t\t\tif (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {\n    \t\t\t\t\tposition = index;\n    \t\t\t\t// on a right pull, check on previous index\n    \t\t\t\t// to do so, subtract width from value and set position = index + 1\n    \t\t\t\t} else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {\n    \t\t\t\t\tposition = index + 1;\n    \t\t\t\t} else if (this.op(coordinate, '<', value)\n    \t\t\t\t\t&& this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {\n    \t\t\t\t\tposition = direction === 'left' ? index + 1 : index;\n    \t\t\t\t}\n    \t\t\t\treturn position === -1;\n    \t\t\t}, this));\n    \t\t}\n\n    \t\tif (!this.settings.loop) {\n    \t\t\t// non loop boundries\n    \t\t\tif (this.op(coordinate, '>', coordinates[this.minimum()])) {\n    \t\t\t\tposition = coordinate = this.minimum();\n    \t\t\t} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {\n    \t\t\t\tposition = coordinate = this.maximum();\n    \t\t\t}\n    \t\t}\n\n    \t\treturn position;\n    \t};\n\n    \t/**\n    \t * Animates the stage.\n    \t * @todo #270\n    \t * @public\n    \t * @param {Number} coordinate - The coordinate in pixels.\n    \t */\n    \tOwl.prototype.animate = function(coordinate) {\n    \t\tvar animate = this.speed() > 0;\n\n    \t\tthis.is('animating') && this.onTransitionEnd();\n\n    \t\tif (animate) {\n    \t\t\tthis.enter('animating');\n    \t\t\tthis.trigger('translate');\n    \t\t}\n\n    \t\tif ($.support.transform3d && $.support.transition) {\n    \t\t\tthis.$stage.css({\n    \t\t\t\ttransform: 'translate3d(' + coordinate + 'px,0px,0px)',\n    \t\t\t\ttransition: (this.speed() / 1000) + 's' + (\n    \t\t\t\t\tthis.settings.slideTransition ? ' ' + this.settings.slideTransition : ''\n    \t\t\t\t)\n    \t\t\t});\n    \t\t} else if (animate) {\n    \t\t\tthis.$stage.animate({\n    \t\t\t\tleft: coordinate + 'px'\n    \t\t\t}, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n    \t\t} else {\n    \t\t\tthis.$stage.css({\n    \t\t\t\tleft: coordinate + 'px'\n    \t\t\t});\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Checks whether the carousel is in a specific state or not.\n    \t * @param {String} state - The state to check.\n    \t * @returns {Boolean} - The flag which indicates if the carousel is busy.\n    \t */\n    \tOwl.prototype.is = function(state) {\n    \t\treturn this._states.current[state] && this._states.current[state] > 0;\n    \t};\n\n    \t/**\n    \t * Sets the absolute position of the current item.\n    \t * @public\n    \t * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\n    \t * @returns {Number} - The absolute position of the current item.\n    \t */\n    \tOwl.prototype.current = function(position) {\n    \t\tif (position === undefined) {\n    \t\t\treturn this._current;\n    \t\t}\n\n    \t\tif (this._items.length === 0) {\n    \t\t\treturn undefined;\n    \t\t}\n\n    \t\tposition = this.normalize(position);\n\n    \t\tif (this._current !== position) {\n    \t\t\tvar event = this.trigger('change', { property: { name: 'position', value: position } });\n\n    \t\t\tif (event.data !== undefined) {\n    \t\t\t\tposition = this.normalize(event.data);\n    \t\t\t}\n\n    \t\t\tthis._current = position;\n\n    \t\t\tthis.invalidate('position');\n\n    \t\t\tthis.trigger('changed', { property: { name: 'position', value: this._current } });\n    \t\t}\n\n    \t\treturn this._current;\n    \t};\n\n    \t/**\n    \t * Invalidates the given part of the update routine.\n    \t * @param {String} [part] - The part to invalidate.\n    \t * @returns {Array.<String>} - The invalidated parts.\n    \t */\n    \tOwl.prototype.invalidate = function(part) {\n    \t\tif ($.type(part) === 'string') {\n    \t\t\tthis._invalidated[part] = true;\n    \t\t\tthis.is('valid') && this.leave('valid');\n    \t\t}\n    \t\treturn $.map(this._invalidated, function(v, i) { return i });\n    \t};\n\n    \t/**\n    \t * Resets the absolute position of the current item.\n    \t * @public\n    \t * @param {Number} position - The absolute position of the new item.\n    \t */\n    \tOwl.prototype.reset = function(position) {\n    \t\tposition = this.normalize(position);\n\n    \t\tif (position === undefined) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis._speed = 0;\n    \t\tthis._current = position;\n\n    \t\tthis.suppress([ 'translate', 'translated' ]);\n\n    \t\tthis.animate(this.coordinates(position));\n\n    \t\tthis.release([ 'translate', 'translated' ]);\n    \t};\n\n    \t/**\n    \t * Normalizes an absolute or a relative position of an item.\n    \t * @public\n    \t * @param {Number} position - The absolute or relative position to normalize.\n    \t * @param {Boolean} [relative=false] - Whether the given position is relative or not.\n    \t * @returns {Number} - The normalized position.\n    \t */\n    \tOwl.prototype.normalize = function(position, relative) {\n    \t\tvar n = this._items.length,\n    \t\t\tm = relative ? 0 : this._clones.length;\n\n    \t\tif (!this.isNumeric(position) || n < 1) {\n    \t\t\tposition = undefined;\n    \t\t} else if (position < 0 || position >= n + m) {\n    \t\t\tposition = ((position - m / 2) % n + n) % n + m / 2;\n    \t\t}\n\n    \t\treturn position;\n    \t};\n\n    \t/**\n    \t * Converts an absolute position of an item into a relative one.\n    \t * @public\n    \t * @param {Number} position - The absolute position to convert.\n    \t * @returns {Number} - The converted position.\n    \t */\n    \tOwl.prototype.relative = function(position) {\n    \t\tposition -= this._clones.length / 2;\n    \t\treturn this.normalize(position, true);\n    \t};\n\n    \t/**\n    \t * Gets the maximum position for the current item.\n    \t * @public\n    \t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n    \t * @returns {Number}\n    \t */\n    \tOwl.prototype.maximum = function(relative) {\n    \t\tvar settings = this.settings,\n    \t\t\tmaximum = this._coordinates.length,\n    \t\t\titerator,\n    \t\t\treciprocalItemsWidth,\n    \t\t\telementWidth;\n\n    \t\tif (settings.loop) {\n    \t\t\tmaximum = this._clones.length / 2 + this._items.length - 1;\n    \t\t} else if (settings.autoWidth || settings.merge) {\n    \t\t\titerator = this._items.length;\n    \t\t\tif (iterator) {\n    \t\t\t\treciprocalItemsWidth = this._items[--iterator].width();\n    \t\t\t\telementWidth = this.$element.width();\n    \t\t\t\twhile (iterator--) {\n    \t\t\t\t\treciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n    \t\t\t\t\tif (reciprocalItemsWidth > elementWidth) {\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\tmaximum = iterator + 1;\n    \t\t} else if (settings.center) {\n    \t\t\tmaximum = this._items.length - 1;\n    \t\t} else {\n    \t\t\tmaximum = this._items.length - settings.items;\n    \t\t}\n\n    \t\tif (relative) {\n    \t\t\tmaximum -= this._clones.length / 2;\n    \t\t}\n\n    \t\treturn Math.max(maximum, 0);\n    \t};\n\n    \t/**\n    \t * Gets the minimum position for the current item.\n    \t * @public\n    \t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n    \t * @returns {Number}\n    \t */\n    \tOwl.prototype.minimum = function(relative) {\n    \t\treturn relative ? 0 : this._clones.length / 2;\n    \t};\n\n    \t/**\n    \t * Gets an item at the specified relative position.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n    \t */\n    \tOwl.prototype.items = function(position) {\n    \t\tif (position === undefined) {\n    \t\t\treturn this._items.slice();\n    \t\t}\n\n    \t\tposition = this.normalize(position, true);\n    \t\treturn this._items[position];\n    \t};\n\n    \t/**\n    \t * Gets an item at the specified relative position.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n    \t */\n    \tOwl.prototype.mergers = function(position) {\n    \t\tif (position === undefined) {\n    \t\t\treturn this._mergers.slice();\n    \t\t}\n\n    \t\tposition = this.normalize(position, true);\n    \t\treturn this._mergers[position];\n    \t};\n\n    \t/**\n    \t * Gets the absolute positions of clones for an item.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\n    \t */\n    \tOwl.prototype.clones = function(position) {\n    \t\tvar odd = this._clones.length / 2,\n    \t\t\teven = odd + this._items.length,\n    \t\t\tmap = function(index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 };\n\n    \t\tif (position === undefined) {\n    \t\t\treturn $.map(this._clones, function(v, i) { return map(i) });\n    \t\t}\n\n    \t\treturn $.map(this._clones, function(v, i) { return v === position ? map(i) : null });\n    \t};\n\n    \t/**\n    \t * Sets the current animation speed.\n    \t * @public\n    \t * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\n    \t * @returns {Number} - The current animation speed in milliseconds.\n    \t */\n    \tOwl.prototype.speed = function(speed) {\n    \t\tif (speed !== undefined) {\n    \t\t\tthis._speed = speed;\n    \t\t}\n\n    \t\treturn this._speed;\n    \t};\n\n    \t/**\n    \t * Gets the coordinate of an item.\n    \t * @todo The name of this method is missleanding.\n    \t * @public\n    \t * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\n    \t * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\n    \t */\n    \tOwl.prototype.coordinates = function(position) {\n    \t\tvar multiplier = 1,\n    \t\t\tnewPosition = position - 1,\n    \t\t\tcoordinate;\n\n    \t\tif (position === undefined) {\n    \t\t\treturn $.map(this._coordinates, $.proxy(function(coordinate, index) {\n    \t\t\t\treturn this.coordinates(index);\n    \t\t\t}, this));\n    \t\t}\n\n    \t\tif (this.settings.center) {\n    \t\t\tif (this.settings.rtl) {\n    \t\t\t\tmultiplier = -1;\n    \t\t\t\tnewPosition = position + 1;\n    \t\t\t}\n\n    \t\t\tcoordinate = this._coordinates[position];\n    \t\t\tcoordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n    \t\t} else {\n    \t\t\tcoordinate = this._coordinates[newPosition] || 0;\n    \t\t}\n\n    \t\tcoordinate = Math.ceil(coordinate);\n\n    \t\treturn coordinate;\n    \t};\n\n    \t/**\n    \t * Calculates the speed for a translation.\n    \t * @protected\n    \t * @param {Number} from - The absolute position of the start item.\n    \t * @param {Number} to - The absolute position of the target item.\n    \t * @param {Number} [factor=undefined] - The time factor in milliseconds.\n    \t * @returns {Number} - The time in milliseconds for the translation.\n    \t */\n    \tOwl.prototype.duration = function(from, to, factor) {\n    \t\tif (factor === 0) {\n    \t\t\treturn 0;\n    \t\t}\n\n    \t\treturn Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));\n    \t};\n\n    \t/**\n    \t * Slides to the specified item.\n    \t * @public\n    \t * @param {Number} position - The position of the item.\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */\n    \tOwl.prototype.to = function(position, speed) {\n    \t\tvar current = this.current(),\n    \t\t\trevert = null,\n    \t\t\tdistance = position - this.relative(current),\n    \t\t\tdirection = (distance > 0) - (distance < 0),\n    \t\t\titems = this._items.length,\n    \t\t\tminimum = this.minimum(),\n    \t\t\tmaximum = this.maximum();\n\n    \t\tif (this.settings.loop) {\n    \t\t\tif (!this.settings.rewind && Math.abs(distance) > items / 2) {\n    \t\t\t\tdistance += direction * -1 * items;\n    \t\t\t}\n\n    \t\t\tposition = current + distance;\n    \t\t\trevert = ((position - minimum) % items + items) % items + minimum;\n\n    \t\t\tif (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n    \t\t\t\tcurrent = revert - distance;\n    \t\t\t\tposition = revert;\n    \t\t\t\tthis.reset(current);\n    \t\t\t}\n    \t\t} else if (this.settings.rewind) {\n    \t\t\tmaximum += 1;\n    \t\t\tposition = (position % maximum + maximum) % maximum;\n    \t\t} else {\n    \t\t\tposition = Math.max(minimum, Math.min(maximum, position));\n    \t\t}\n\n    \t\tthis.speed(this.duration(current, position, speed));\n    \t\tthis.current(position);\n\n    \t\tif (this.isVisible()) {\n    \t\t\tthis.update();\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Slides to the next item.\n    \t * @public\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */\n    \tOwl.prototype.next = function(speed) {\n    \t\tspeed = speed || false;\n    \t\tthis.to(this.relative(this.current()) + 1, speed);\n    \t};\n\n    \t/**\n    \t * Slides to the previous item.\n    \t * @public\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */\n    \tOwl.prototype.prev = function(speed) {\n    \t\tspeed = speed || false;\n    \t\tthis.to(this.relative(this.current()) - 1, speed);\n    \t};\n\n    \t/**\n    \t * Handles the end of an animation.\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */\n    \tOwl.prototype.onTransitionEnd = function(event) {\n\n    \t\t// if css2 animation then event object is undefined\n    \t\tif (event !== undefined) {\n    \t\t\tevent.stopPropagation();\n\n    \t\t\t// Catch only owl-stage transitionEnd event\n    \t\t\tif ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t}\n\n    \t\tthis.leave('animating');\n    \t\tthis.trigger('translated');\n    \t};\n\n    \t/**\n    \t * Gets viewport width.\n    \t * @protected\n    \t * @return {Number} - The width in pixel.\n    \t */\n    \tOwl.prototype.viewport = function() {\n    \t\tvar width;\n    \t\tif (this.options.responsiveBaseElement !== window) {\n    \t\t\twidth = $(this.options.responsiveBaseElement).width();\n    \t\t} else if (window.innerWidth) {\n    \t\t\twidth = window.innerWidth;\n    \t\t} else if (document.documentElement && document.documentElement.clientWidth) {\n    \t\t\twidth = document.documentElement.clientWidth;\n    \t\t} else {\n    \t\t\tconsole.warn('Can not detect viewport width.');\n    \t\t}\n    \t\treturn width;\n    \t};\n\n    \t/**\n    \t * Replaces the current content.\n    \t * @public\n    \t * @param {HTMLElement|jQuery|String} content - The new content.\n    \t */\n    \tOwl.prototype.replace = function(content) {\n    \t\tthis.$stage.empty();\n    \t\tthis._items = [];\n\n    \t\tif (content) {\n    \t\t\tcontent = (content instanceof jQuery) ? content : $(content);\n    \t\t}\n\n    \t\tif (this.settings.nestedItemSelector) {\n    \t\t\tcontent = content.find('.' + this.settings.nestedItemSelector);\n    \t\t}\n\n    \t\tcontent.filter(function() {\n    \t\t\treturn this.nodeType === 1;\n    \t\t}).each($.proxy(function(index, item) {\n    \t\t\titem = this.prepare(item);\n    \t\t\tthis.$stage.append(item);\n    \t\t\tthis._items.push(item);\n    \t\t\tthis._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    \t\t}, this));\n\n    \t\tthis.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n\n    \t\tthis.invalidate('items');\n    \t};\n\n    \t/**\n    \t * Adds an item.\n    \t * @todo Use `item` instead of `content` for the event arguments.\n    \t * @public\n    \t * @param {HTMLElement|jQuery|String} content - The item content to add.\n    \t * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\n    \t */\n    \tOwl.prototype.add = function(content, position) {\n    \t\tvar current = this.relative(this._current);\n\n    \t\tposition = position === undefined ? this._items.length : this.normalize(position, true);\n    \t\tcontent = content instanceof jQuery ? content : $(content);\n\n    \t\tthis.trigger('add', { content: content, position: position });\n\n    \t\tcontent = this.prepare(content);\n\n    \t\tif (this._items.length === 0 || position === this._items.length) {\n    \t\t\tthis._items.length === 0 && this.$stage.append(content);\n    \t\t\tthis._items.length !== 0 && this._items[position - 1].after(content);\n    \t\t\tthis._items.push(content);\n    \t\t\tthis._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    \t\t} else {\n    \t\t\tthis._items[position].before(content);\n    \t\t\tthis._items.splice(position, 0, content);\n    \t\t\tthis._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    \t\t}\n\n    \t\tthis._items[current] && this.reset(this._items[current].index());\n\n    \t\tthis.invalidate('items');\n\n    \t\tthis.trigger('added', { content: content, position: position });\n    \t};\n\n    \t/**\n    \t * Removes an item by its position.\n    \t * @todo Use `item` instead of `content` for the event arguments.\n    \t * @public\n    \t * @param {Number} position - The relative position of the item to remove.\n    \t */\n    \tOwl.prototype.remove = function(position) {\n    \t\tposition = this.normalize(position, true);\n\n    \t\tif (position === undefined) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis.trigger('remove', { content: this._items[position], position: position });\n\n    \t\tthis._items[position].remove();\n    \t\tthis._items.splice(position, 1);\n    \t\tthis._mergers.splice(position, 1);\n\n    \t\tthis.invalidate('items');\n\n    \t\tthis.trigger('removed', { content: null, position: position });\n    \t};\n\n    \t/**\n    \t * Preloads images with auto width.\n    \t * @todo Replace by a more generic approach\n    \t * @protected\n    \t */\n    \tOwl.prototype.preloadAutoWidthImages = function(images) {\n    \t\timages.each($.proxy(function(i, element) {\n    \t\t\tthis.enter('pre-loading');\n    \t\t\telement = $(element);\n    \t\t\t$(new Image()).one('load', $.proxy(function(e) {\n    \t\t\t\telement.attr('src', e.target.src);\n    \t\t\t\telement.css('opacity', 1);\n    \t\t\t\tthis.leave('pre-loading');\n    \t\t\t\t!this.is('pre-loading') && !this.is('initializing') && this.refresh();\n    \t\t\t}, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Destroys the carousel.\n    \t * @public\n    \t */\n    \tOwl.prototype.destroy = function() {\n\n    \t\tthis.$element.off('.owl.core');\n    \t\tthis.$stage.off('.owl.core');\n    \t\t$(document).off('.owl.core');\n\n    \t\tif (this.settings.responsive !== false) {\n    \t\t\twindow.clearTimeout(this.resizeTimer);\n    \t\t\tthis.off(window, 'resize', this._handlers.onThrottledResize);\n    \t\t}\n\n    \t\tfor (var i in this._plugins) {\n    \t\t\tthis._plugins[i].destroy();\n    \t\t}\n\n    \t\tthis.$stage.children('.cloned').remove();\n\n    \t\tthis.$stage.unwrap();\n    \t\tthis.$stage.children().contents().unwrap();\n    \t\tthis.$stage.children().unwrap();\n    \t\tthis.$stage.remove();\n    \t\tthis.$element\n    \t\t\t.removeClass(this.options.refreshClass)\n    \t\t\t.removeClass(this.options.loadingClass)\n    \t\t\t.removeClass(this.options.loadedClass)\n    \t\t\t.removeClass(this.options.rtlClass)\n    \t\t\t.removeClass(this.options.dragClass)\n    \t\t\t.removeClass(this.options.grabClass)\n    \t\t\t.attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), ''))\n    \t\t\t.removeData('owl.carousel');\n    \t};\n\n    \t/**\n    \t * Operators to calculate right-to-left and left-to-right.\n    \t * @protected\n    \t * @param {Number} [a] - The left side operand.\n    \t * @param {String} [o] - The operator.\n    \t * @param {Number} [b] - The right side operand.\n    \t */\n    \tOwl.prototype.op = function(a, o, b) {\n    \t\tvar rtl = this.settings.rtl;\n    \t\tswitch (o) {\n    \t\t\tcase '<':\n    \t\t\t\treturn rtl ? a > b : a < b;\n    \t\t\tcase '>':\n    \t\t\t\treturn rtl ? a < b : a > b;\n    \t\t\tcase '>=':\n    \t\t\t\treturn rtl ? a <= b : a >= b;\n    \t\t\tcase '<=':\n    \t\t\t\treturn rtl ? a >= b : a <= b;\n    \t\t\tdefault:\n    \t\t\t\tbreak;\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Attaches to an internal event.\n    \t * @protected\n    \t * @param {HTMLElement} element - The event source.\n    \t * @param {String} event - The event name.\n    \t * @param {Function} listener - The event handler to attach.\n    \t * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\n    \t */\n    \tOwl.prototype.on = function(element, event, listener, capture) {\n    \t\tif (element.addEventListener) {\n    \t\t\telement.addEventListener(event, listener, capture);\n    \t\t} else if (element.attachEvent) {\n    \t\t\telement.attachEvent('on' + event, listener);\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Detaches from an internal event.\n    \t * @protected\n    \t * @param {HTMLElement} element - The event source.\n    \t * @param {String} event - The event name.\n    \t * @param {Function} listener - The attached event handler to detach.\n    \t * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\n    \t */\n    \tOwl.prototype.off = function(element, event, listener, capture) {\n    \t\tif (element.removeEventListener) {\n    \t\t\telement.removeEventListener(event, listener, capture);\n    \t\t} else if (element.detachEvent) {\n    \t\t\telement.detachEvent('on' + event, listener);\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Triggers a public event.\n    \t * @todo Remove `status`, `relatedTarget` should be used instead.\n    \t * @protected\n    \t * @param {String} name - The event name.\n    \t * @param {*} [data=null] - The event data.\n    \t * @param {String} [namespace=carousel] - The event namespace.\n    \t * @param {String} [state] - The state which is associated with the event.\n    \t * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\n    \t * @returns {Event} - The event arguments.\n    \t */\n    \tOwl.prototype.trigger = function(name, data, namespace, state, enter) {\n    \t\tvar status = {\n    \t\t\titem: { count: this._items.length, index: this.current() }\n    \t\t}, handler = $.camelCase(\n    \t\t\t$.grep([ 'on', name, namespace ], function(v) { return v })\n    \t\t\t\t.join('-').toLowerCase()\n    \t\t), event = $.Event(\n    \t\t\t[ name, 'owl', namespace || 'carousel' ].join('.').toLowerCase(),\n    \t\t\t$.extend({ relatedTarget: this }, status, data)\n    \t\t);\n\n    \t\tif (!this._supress[name]) {\n    \t\t\t$.each(this._plugins, function(name, plugin) {\n    \t\t\t\tif (plugin.onTrigger) {\n    \t\t\t\t\tplugin.onTrigger(event);\n    \t\t\t\t}\n    \t\t\t});\n\n    \t\t\tthis.register({ type: Owl.Type.Event, name: name });\n    \t\t\tthis.$element.trigger(event);\n\n    \t\t\tif (this.settings && typeof this.settings[handler] === 'function') {\n    \t\t\t\tthis.settings[handler].call(this, event);\n    \t\t\t}\n    \t\t}\n\n    \t\treturn event;\n    \t};\n\n    \t/**\n    \t * Enters a state.\n    \t * @param name - The state name.\n    \t */\n    \tOwl.prototype.enter = function(name) {\n    \t\t$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n    \t\t\tif (this._states.current[name] === undefined) {\n    \t\t\t\tthis._states.current[name] = 0;\n    \t\t\t}\n\n    \t\t\tthis._states.current[name]++;\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Leaves a state.\n    \t * @param name - The state name.\n    \t */\n    \tOwl.prototype.leave = function(name) {\n    \t\t$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n    \t\t\tthis._states.current[name]--;\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Registers an event or state.\n    \t * @public\n    \t * @param {Object} object - The event or state to register.\n    \t */\n    \tOwl.prototype.register = function(object) {\n    \t\tif (object.type === Owl.Type.Event) {\n    \t\t\tif (!$.event.special[object.name]) {\n    \t\t\t\t$.event.special[object.name] = {};\n    \t\t\t}\n\n    \t\t\tif (!$.event.special[object.name].owl) {\n    \t\t\t\tvar _default = $.event.special[object.name]._default;\n    \t\t\t\t$.event.special[object.name]._default = function(e) {\n    \t\t\t\t\tif (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {\n    \t\t\t\t\t\treturn _default.apply(this, arguments);\n    \t\t\t\t\t}\n    \t\t\t\t\treturn e.namespace && e.namespace.indexOf('owl') > -1;\n    \t\t\t\t};\n    \t\t\t\t$.event.special[object.name].owl = true;\n    \t\t\t}\n    \t\t} else if (object.type === Owl.Type.State) {\n    \t\t\tif (!this._states.tags[object.name]) {\n    \t\t\t\tthis._states.tags[object.name] = object.tags;\n    \t\t\t} else {\n    \t\t\t\tthis._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n    \t\t\t}\n\n    \t\t\tthis._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function(tag, i) {\n    \t\t\t\treturn $.inArray(tag, this._states.tags[object.name]) === i;\n    \t\t\t}, this));\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Suppresses events.\n    \t * @protected\n    \t * @param {Array.<String>} events - The events to suppress.\n    \t */\n    \tOwl.prototype.suppress = function(events) {\n    \t\t$.each(events, $.proxy(function(index, event) {\n    \t\t\tthis._supress[event] = true;\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Releases suppressed events.\n    \t * @protected\n    \t * @param {Array.<String>} events - The events to release.\n    \t */\n    \tOwl.prototype.release = function(events) {\n    \t\t$.each(events, $.proxy(function(index, event) {\n    \t\t\tdelete this._supress[event];\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Gets unified pointer coordinates from event.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} - The `mousedown` or `touchstart` event.\n    \t * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\n    \t */\n    \tOwl.prototype.pointer = function(event) {\n    \t\tvar result = { x: null, y: null };\n\n    \t\tevent = event.originalEvent || event || window.event;\n\n    \t\tevent = event.touches && event.touches.length ?\n    \t\t\tevent.touches[0] : event.changedTouches && event.changedTouches.length ?\n    \t\t\t\tevent.changedTouches[0] : event;\n\n    \t\tif (event.pageX) {\n    \t\t\tresult.x = event.pageX;\n    \t\t\tresult.y = event.pageY;\n    \t\t} else {\n    \t\t\tresult.x = event.clientX;\n    \t\t\tresult.y = event.clientY;\n    \t\t}\n\n    \t\treturn result;\n    \t};\n\n    \t/**\n    \t * Determines if the input is a Number or something that can be coerced to a Number\n    \t * @protected\n    \t * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\n    \t * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\n    \t */\n    \tOwl.prototype.isNumeric = function(number) {\n    \t\treturn !isNaN(parseFloat(number));\n    \t};\n\n    \t/**\n    \t * Gets the difference of two vectors.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Object} - The first vector.\n    \t * @param {Object} - The second vector.\n    \t * @returns {Object} - The difference.\n    \t */\n    \tOwl.prototype.difference = function(first, second) {\n    \t\treturn {\n    \t\t\tx: first.x - second.x,\n    \t\t\ty: first.y - second.y\n    \t\t};\n    \t};\n\n    \t/**\n    \t * The jQuery Plugin for the Owl Carousel\n    \t * @todo Navigation plugin `next` and `prev`\n    \t * @public\n    \t */\n    \t$.fn.owlCarousel = function(option) {\n    \t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n    \t\treturn this.each(function() {\n    \t\t\tvar $this = $(this),\n    \t\t\t\tdata = $this.data('owl.carousel');\n\n    \t\t\tif (!data) {\n    \t\t\t\tdata = new Owl(this, typeof option == 'object' && option);\n    \t\t\t\t$this.data('owl.carousel', data);\n\n    \t\t\t\t$.each([\n    \t\t\t\t\t'next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'\n    \t\t\t\t], function(i, event) {\n    \t\t\t\t\tdata.register({ type: Owl.Type.Event, name: event });\n    \t\t\t\t\tdata.$element.on(event + '.owl.carousel.core', $.proxy(function(e) {\n    \t\t\t\t\t\tif (e.namespace && e.relatedTarget !== this) {\n    \t\t\t\t\t\t\tthis.suppress([ event ]);\n    \t\t\t\t\t\t\tdata[event].apply(this, [].slice.call(arguments, 1));\n    \t\t\t\t\t\t\tthis.release([ event ]);\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}, data));\n    \t\t\t\t});\n    \t\t\t}\n\n    \t\t\tif (typeof option == 'string' && option.charAt(0) !== '_') {\n    \t\t\t\tdata[option].apply(data, args);\n    \t\t\t}\n    \t\t});\n    \t};\n\n    \t/**\n    \t * The constructor for the jQuery Plugin\n    \t * @public\n    \t */\n    \t$.fn.owlCarousel.Constructor = Owl;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the auto refresh plugin.\n    \t * @class The Auto Refresh Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */\n    \tvar AutoRefresh = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * Refresh interval.\n    \t\t * @protected\n    \t\t * @type {number}\n    \t\t */\n    \t\tthis._interval = null;\n\n    \t\t/**\n    \t\t * Whether the element is currently visible or not.\n    \t\t * @protected\n    \t\t * @type {Boolean}\n    \t\t */\n    \t\tthis._visible = null;\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.autoRefresh) {\n    \t\t\t\t\tthis.watch();\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);\n\n    \t\t// register event handlers\n    \t\tthis._core.$element.on(this._handlers);\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tAutoRefresh.Defaults = {\n    \t\tautoRefresh: true,\n    \t\tautoRefreshInterval: 500\n    \t};\n\n    \t/**\n    \t * Watches the element.\n    \t */\n    \tAutoRefresh.prototype.watch = function() {\n    \t\tif (this._interval) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis._visible = this._core.isVisible();\n    \t\tthis._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n    \t};\n\n    \t/**\n    \t * Refreshes the element.\n    \t */\n    \tAutoRefresh.prototype.refresh = function() {\n    \t\tif (this._core.isVisible() === this._visible) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis._visible = !this._visible;\n\n    \t\tthis._core.$element.toggleClass('owl-hidden', !this._visible);\n\n    \t\tthis._visible && (this._core.invalidate('width') && this._core.refresh());\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t */\n    \tAutoRefresh.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\twindow.clearInterval(this._interval);\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the lazy plugin.\n    \t * @class The Lazy Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */\n    \tvar Lazy = function(carousel) {\n\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * Already loaded items.\n    \t\t * @protected\n    \t\t * @type {Array.<jQuery>}\n    \t\t */\n    \t\tthis._loaded = [];\n\n    \t\t/**\n    \t\t * Event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (!e.namespace) {\n    \t\t\t\t\treturn;\n    \t\t\t\t}\n\n    \t\t\t\tif (!this._core.settings || !this._core.settings.lazyLoad) {\n    \t\t\t\t\treturn;\n    \t\t\t\t}\n\n    \t\t\t\tif ((e.property && e.property.name == 'position') || e.type == 'initialized') {\n    \t\t\t\t\tvar settings = this._core.settings,\n    \t\t\t\t\t\tn = (settings.center && Math.ceil(settings.items / 2) || settings.items),\n    \t\t\t\t\t\ti = ((settings.center && n * -1) || 0),\n    \t\t\t\t\t\tposition = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,\n    \t\t\t\t\t\tclones = this._core.clones().length,\n    \t\t\t\t\t\tload = $.proxy(function(i, v) { this.load(v); }, this);\n    \t\t\t\t\t//TODO: Need documentation for this new option\n    \t\t\t\t\tif (settings.lazyLoadEager > 0) {\n    \t\t\t\t\t\tn += settings.lazyLoadEager;\n    \t\t\t\t\t\t// If the carousel is looping also preload images that are to the \"left\"\n    \t\t\t\t\t\tif (settings.loop) {\n                  position -= settings.lazyLoadEager;\n                  n++;\n                }\n    \t\t\t\t\t}\n\n    \t\t\t\t\twhile (i++ < n) {\n    \t\t\t\t\t\tthis.load(clones / 2 + this._core.relative(position));\n    \t\t\t\t\t\tclones && $.each(this._core.clones(this._core.relative(position)), load);\n    \t\t\t\t\t\tposition++;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set the default options\n    \t\tthis._core.options = $.extend({}, Lazy.Defaults, this._core.options);\n\n    \t\t// register event handler\n    \t\tthis._core.$element.on(this._handlers);\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tLazy.Defaults = {\n    \t\tlazyLoad: false,\n    \t\tlazyLoadEager: 0\n    \t};\n\n    \t/**\n    \t * Loads all resources of an item at the specified position.\n    \t * @param {Number} position - The absolute position of the item.\n    \t * @protected\n    \t */\n    \tLazy.prototype.load = function(position) {\n    \t\tvar $item = this._core.$stage.children().eq(position),\n    \t\t\t$elements = $item && $item.find('.owl-lazy');\n\n    \t\tif (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\t$elements.each($.proxy(function(index, element) {\n    \t\t\tvar $element = $(element), image,\n                    url = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src') || $element.attr('data-srcset');\n\n    \t\t\tthis._core.trigger('load', { element: $element, url: url }, 'lazy');\n\n    \t\t\tif ($element.is('img')) {\n    \t\t\t\t$element.one('load.owl.lazy', $.proxy(function() {\n    \t\t\t\t\t$element.css('opacity', 1);\n    \t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n    \t\t\t\t}, this)).attr('src', url);\n                } else if ($element.is('source')) {\n                    $element.one('load.owl.lazy', $.proxy(function() {\n                        this._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n                    }, this)).attr('srcset', url);\n    \t\t\t} else {\n    \t\t\t\timage = new Image();\n    \t\t\t\timage.onload = $.proxy(function() {\n    \t\t\t\t\t$element.css({\n    \t\t\t\t\t\t'background-image': 'url(\"' + url + '\")',\n    \t\t\t\t\t\t'opacity': '1'\n    \t\t\t\t\t});\n    \t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n    \t\t\t\t}, this);\n    \t\t\t\timage.src = url;\n    \t\t\t}\n    \t\t}, this));\n\n    \t\tthis._loaded.push($item.get(0));\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */\n    \tLazy.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\tfor (handler in this.handlers) {\n    \t\t\tthis._core.$element.off(handler, this.handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the auto height plugin.\n    \t * @class The Auto Height Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */\n    \tvar AutoHeight = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\tthis._previousHeight = null;\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.autoHeight) {\n    \t\t\t\t\tthis.update();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'changed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.autoHeight && e.property.name === 'position'){\n    \t\t\t\t\tthis.update();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'loaded.owl.lazy': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.autoHeight\n    \t\t\t\t\t&& e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {\n    \t\t\t\t\tthis.update();\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);\n\n    \t\t// register event handlers\n    \t\tthis._core.$element.on(this._handlers);\n    \t\tthis._intervalId = null;\n    \t\tvar refThis = this;\n\n    \t\t// These changes have been taken from a PR by gavrochelegnou proposed in #1575\n    \t\t// and have been made compatible with the latest jQuery version\n    \t\t$(window).on('load', function() {\n    \t\t\tif (refThis._core.settings.autoHeight) {\n    \t\t\t\trefThis.update();\n    \t\t\t}\n    \t\t});\n\n    \t\t// Autoresize the height of the carousel when window is resized\n    \t\t// When carousel has images, the height is dependent on the width\n    \t\t// and should also change on resize\n    \t\t$(window).resize(function() {\n    \t\t\tif (refThis._core.settings.autoHeight) {\n    \t\t\t\tif (refThis._intervalId != null) {\n    \t\t\t\t\tclearTimeout(refThis._intervalId);\n    \t\t\t\t}\n\n    \t\t\t\trefThis._intervalId = setTimeout(function() {\n    \t\t\t\t\trefThis.update();\n    \t\t\t\t}, 250);\n    \t\t\t}\n    \t\t});\n\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tAutoHeight.Defaults = {\n    \t\tautoHeight: false,\n    \t\tautoHeightClass: 'owl-height'\n    \t};\n\n    \t/**\n    \t * Updates the view.\n    \t */\n    \tAutoHeight.prototype.update = function() {\n    \t\tvar start = this._core._current,\n    \t\t\tend = start + this._core.settings.items,\n    \t\t\tlazyLoadEnabled = this._core.settings.lazyLoad,\n    \t\t\tvisible = this._core.$stage.children().toArray().slice(start, end),\n    \t\t\theights = [],\n    \t\t\tmaxheight = 0;\n\n    \t\t$.each(visible, function(index, item) {\n    \t\t\theights.push($(item).height());\n    \t\t});\n\n    \t\tmaxheight = Math.max.apply(null, heights);\n\n    \t\tif (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {\n    \t\t\tmaxheight = this._previousHeight;\n    \t\t}\n\n    \t\tthis._previousHeight = maxheight;\n\n    \t\tthis._core.$stage.parent()\n    \t\t\t.height(maxheight)\n    \t\t\t.addClass(this._core.settings.autoHeightClass);\n    \t};\n\n    \tAutoHeight.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] !== 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the video plugin.\n    \t * @class The Video Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */\n    \tvar Video = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * Cache all video URLs.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._videos = {};\n\n    \t\t/**\n    \t\t * Current playing item.\n    \t\t * @protected\n    \t\t * @type {jQuery}\n    \t\t */\n    \t\tthis._playing = null;\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @todo The cloned content removale is too late\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace) {\n    \t\t\t\t\tthis._core.register({ type: 'state', name: 'playing', tags: [ 'interacting' ] });\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'resize.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n    \t\t\t\t\te.preventDefault();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'refreshed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.is('resizing')) {\n    \t\t\t\t\tthis._core.$stage.find('.cloned .owl-video-frame').remove();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'changed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && e.property.name === 'position' && this._playing) {\n    \t\t\t\t\tthis.stop();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (!e.namespace) {\n    \t\t\t\t\treturn;\n    \t\t\t\t}\n\n    \t\t\t\tvar $element = $(e.content).find('.owl-video');\n\n    \t\t\t\tif ($element.length) {\n    \t\t\t\t\t$element.css('display', 'none');\n    \t\t\t\t\tthis.fetch($element, $(e.content));\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, Video.Defaults, this._core.options);\n\n    \t\t// register event handlers\n    \t\tthis._core.$element.on(this._handlers);\n\n    \t\tthis._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {\n    \t\t\tthis.play(e);\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tVideo.Defaults = {\n    \t\tvideo: false,\n    \t\tvideoHeight: false,\n    \t\tvideoWidth: false\n    \t};\n\n    \t/**\n    \t * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\n    \t * @protected\n    \t * @param {jQuery} target - The target containing the video data.\n    \t * @param {jQuery} item - The item containing the video.\n    \t */\n    \tVideo.prototype.fetch = function(target, item) {\n    \t\t\tvar type = (function() {\n    \t\t\t\t\tif (target.attr('data-vimeo-id')) {\n    \t\t\t\t\t\treturn 'vimeo';\n    \t\t\t\t\t} else if (target.attr('data-vzaar-id')) {\n    \t\t\t\t\t\treturn 'vzaar'\n    \t\t\t\t\t} else {\n    \t\t\t\t\t\treturn 'youtube';\n    \t\t\t\t\t}\n    \t\t\t\t})(),\n    \t\t\t\tid = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),\n    \t\t\t\twidth = target.attr('data-width') || this._core.settings.videoWidth,\n    \t\t\t\theight = target.attr('data-height') || this._core.settings.videoHeight,\n    \t\t\t\turl = target.attr('href');\n\n    \t\tif (url) {\n\n    \t\t\t/*\n    \t\t\t\t\tParses the id's out of the following urls (and probably more):\n    \t\t\t\t\thttps://www.youtube.com/watch?v=:id\n    \t\t\t\t\thttps://youtu.be/:id\n    \t\t\t\t\thttps://vimeo.com/:id\n    \t\t\t\t\thttps://vimeo.com/channels/:channel/:id\n    \t\t\t\t\thttps://vimeo.com/groups/:group/videos/:id\n    \t\t\t\t\thttps://app.vzaar.com/videos/:id\n\n    \t\t\t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\n    \t\t\t*/\n\n    \t\t\tid = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com|be\\-nocookie\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n\n    \t\t\tif (id[3].indexOf('youtu') > -1) {\n    \t\t\t\ttype = 'youtube';\n    \t\t\t} else if (id[3].indexOf('vimeo') > -1) {\n    \t\t\t\ttype = 'vimeo';\n    \t\t\t} else if (id[3].indexOf('vzaar') > -1) {\n    \t\t\t\ttype = 'vzaar';\n    \t\t\t} else {\n    \t\t\t\tthrow new Error('Video URL not supported.');\n    \t\t\t}\n    \t\t\tid = id[6];\n    \t\t} else {\n    \t\t\tthrow new Error('Missing video URL.');\n    \t\t}\n\n    \t\tthis._videos[url] = {\n    \t\t\ttype: type,\n    \t\t\tid: id,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\titem.attr('data-video', url);\n\n    \t\tthis.thumbnail(target, this._videos[url]);\n    \t};\n\n    \t/**\n    \t * Creates video thumbnail.\n    \t * @protected\n    \t * @param {jQuery} target - The target containing the video data.\n    \t * @param {Object} info - The video info object.\n    \t * @see `fetch`\n    \t */\n    \tVideo.prototype.thumbnail = function(target, video) {\n    \t\tvar tnLink,\n    \t\t\ticon,\n    \t\t\tpath,\n    \t\t\tdimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',\n    \t\t\tcustomTn = target.find('img'),\n    \t\t\tsrcType = 'src',\n    \t\t\tlazyClass = '',\n    \t\t\tsettings = this._core.settings,\n    \t\t\tcreate = function(path) {\n    \t\t\t\ticon = '<div class=\"owl-video-play-icon\"></div>';\n\n    \t\t\t\tif (settings.lazyLoad) {\n    \t\t\t\t\ttnLink = $('<div/>',{\n    \t\t\t\t\t\t\"class\": 'owl-video-tn ' + lazyClass,\n    \t\t\t\t\t\t\"srcType\": path\n    \t\t\t\t\t});\n    \t\t\t\t} else {\n    \t\t\t\t\ttnLink = $( '<div/>', {\n    \t\t\t\t\t\t\"class\": \"owl-video-tn\",\n    \t\t\t\t\t\t\"style\": 'opacity:1;background-image:url(' + path + ')'\n    \t\t\t\t\t});\n    \t\t\t\t}\n    \t\t\t\ttarget.after(tnLink);\n    \t\t\t\ttarget.after(icon);\n    \t\t\t};\n\n    \t\t// wrap video content into owl-video-wrapper div\n    \t\ttarget.wrap( $( '<div/>', {\n    \t\t\t\"class\": \"owl-video-wrapper\",\n    \t\t\t\"style\": dimensions\n    \t\t}));\n\n    \t\tif (this._core.settings.lazyLoad) {\n    \t\t\tsrcType = 'data-src';\n    \t\t\tlazyClass = 'owl-lazy';\n    \t\t}\n\n    \t\t// custom thumbnail\n    \t\tif (customTn.length) {\n    \t\t\tcreate(customTn.attr(srcType));\n    \t\t\tcustomTn.remove();\n    \t\t\treturn false;\n    \t\t}\n\n    \t\tif (video.type === 'youtube') {\n    \t\t\tpath = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n    \t\t\tcreate(path);\n    \t\t} else if (video.type === 'vimeo') {\n    \t\t\t$.ajax({\n    \t\t\t\ttype: 'GET',\n    \t\t\t\turl: '//vimeo.com/api/v2/video/' + video.id + '.json',\n    \t\t\t\tjsonp: 'callback',\n    \t\t\t\tdataType: 'jsonp',\n    \t\t\t\tsuccess: function(data) {\n    \t\t\t\t\tpath = data[0].thumbnail_large;\n    \t\t\t\t\tcreate(path);\n    \t\t\t\t}\n    \t\t\t});\n    \t\t} else if (video.type === 'vzaar') {\n    \t\t\t$.ajax({\n    \t\t\t\ttype: 'GET',\n    \t\t\t\turl: '//vzaar.com/api/videos/' + video.id + '.json',\n    \t\t\t\tjsonp: 'callback',\n    \t\t\t\tdataType: 'jsonp',\n    \t\t\t\tsuccess: function(data) {\n    \t\t\t\t\tpath = data.framegrab_url;\n    \t\t\t\t\tcreate(path);\n    \t\t\t\t}\n    \t\t\t});\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Stops the current video.\n    \t * @public\n    \t */\n    \tVideo.prototype.stop = function() {\n    \t\tthis._core.trigger('stop', null, 'video');\n    \t\tthis._playing.find('.owl-video-frame').remove();\n    \t\tthis._playing.removeClass('owl-video-playing');\n    \t\tthis._playing = null;\n    \t\tthis._core.leave('playing');\n    \t\tthis._core.trigger('stopped', null, 'video');\n    \t};\n\n    \t/**\n    \t * Starts the current video.\n    \t * @public\n    \t * @param {Event} event - The event arguments.\n    \t */\n    \tVideo.prototype.play = function(event) {\n    \t\tvar target = $(event.target),\n    \t\t\titem = target.closest('.' + this._core.settings.itemClass),\n    \t\t\tvideo = this._videos[item.attr('data-video')],\n    \t\t\twidth = video.width || '100%',\n    \t\t\theight = video.height || this._core.$stage.height(),\n    \t\t\thtml,\n    \t\t\tiframe;\n\n    \t\tif (this._playing) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis._core.enter('playing');\n    \t\tthis._core.trigger('play', null, 'video');\n\n    \t\titem = this._core.items(this._core.relative(item.index()));\n\n    \t\tthis._core.reset(item.index());\n\n    \t\thtml = $( '<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>' );\n    \t\thtml.attr( 'height', height );\n    \t\thtml.attr( 'width', width );\n    \t\tif (video.type === 'youtube') {\n    \t\t\thtml.attr( 'src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id );\n    \t\t} else if (video.type === 'vimeo') {\n    \t\t\thtml.attr( 'src', '//player.vimeo.com/video/' + video.id + '?autoplay=1' );\n    \t\t} else if (video.type === 'vzaar') {\n    \t\t\thtml.attr( 'src', '//view.vzaar.com/' + video.id + '/player?autoplay=true' );\n    \t\t}\n\n    \t\tiframe = $(html).wrap( '<div class=\"owl-video-frame\" />' ).insertAfter(item.find('.owl-video'));\n\n    \t\tthis._playing = item.addClass('owl-video-playing');\n    \t};\n\n    \t/**\n    \t * Checks whether an video is currently in full screen mode or not.\n    \t * @todo Bad style because looks like a readonly method but changes members.\n    \t * @protected\n    \t * @returns {Boolean}\n    \t */\n    \tVideo.prototype.isInFullScreen = function() {\n    \t\tvar element = document.fullscreenElement || document.mozFullScreenElement ||\n    \t\t\t\tdocument.webkitFullscreenElement;\n\n    \t\treturn element && $(element).parent().hasClass('owl-video-frame');\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t */\n    \tVideo.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\tthis._core.$element.off('click.owl.video');\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.Video = Video;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the animate plugin.\n    \t * @class The Navigation Plugin\n    \t * @param {Owl} scope - The Owl Carousel\n    \t */\n    \tvar Animate = function(scope) {\n    \t\tthis.core = scope;\n    \t\tthis.core.options = $.extend({}, Animate.Defaults, this.core.options);\n    \t\tthis.swapping = true;\n    \t\tthis.previous = undefined;\n    \t\tthis.next = undefined;\n\n    \t\tthis.handlers = {\n    \t\t\t'change.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && e.property.name == 'position') {\n    \t\t\t\t\tthis.previous = this.core.current();\n    \t\t\t\t\tthis.next = e.property.value;\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace) {\n    \t\t\t\t\tthis.swapping = e.type == 'translated';\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'translate.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n    \t\t\t\t\tthis.swap();\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\tthis.core.$element.on(this.handlers);\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tAnimate.Defaults = {\n    \t\tanimateOut: false,\n    \t\tanimateIn: false\n    \t};\n\n    \t/**\n    \t * Toggles the animation classes whenever an translations starts.\n    \t * @protected\n    \t * @returns {Boolean|undefined}\n    \t */\n    \tAnimate.prototype.swap = function() {\n\n    \t\tif (this.core.settings.items !== 1) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tif (!$.support.animation || !$.support.transition) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tthis.core.speed(0);\n\n    \t\tvar left,\n    \t\t\tclear = $.proxy(this.clear, this),\n    \t\t\tprevious = this.core.$stage.children().eq(this.previous),\n    \t\t\tnext = this.core.$stage.children().eq(this.next),\n    \t\t\tincoming = this.core.settings.animateIn,\n    \t\t\toutgoing = this.core.settings.animateOut;\n\n    \t\tif (this.core.current() === this.previous) {\n    \t\t\treturn;\n    \t\t}\n\n    \t\tif (outgoing) {\n    \t\t\tleft = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n    \t\t\tprevious.one($.support.animation.end, clear)\n    \t\t\t\t.css( { 'left': left + 'px' } )\n    \t\t\t\t.addClass('animated owl-animated-out')\n    \t\t\t\t.addClass(outgoing);\n    \t\t}\n\n    \t\tif (incoming) {\n    \t\t\tnext.one($.support.animation.end, clear)\n    \t\t\t\t.addClass('animated owl-animated-in')\n    \t\t\t\t.addClass(incoming);\n    \t\t}\n    \t};\n\n    \tAnimate.prototype.clear = function(e) {\n    \t\t$(e.target).css( { 'left': '' } )\n    \t\t\t.removeClass('animated owl-animated-out owl-animated-in')\n    \t\t\t.removeClass(this.core.settings.animateIn)\n    \t\t\t.removeClass(this.core.settings.animateOut);\n    \t\tthis.core.onTransitionEnd();\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */\n    \tAnimate.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\tfor (handler in this.handlers) {\n    \t\t\tthis.core.$element.off(handler, this.handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the autoplay plugin.\n    \t * @class The Autoplay Plugin\n    \t * @param {Owl} scope - The Owl Carousel\n    \t */\n    \tvar Autoplay = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * The autoplay timeout id.\n    \t\t * @type {Number}\n    \t\t */\n    \t\tthis._call = null;\n\n    \t\t/**\n    \t\t * Depending on the state of the plugin, this variable contains either\n    \t\t * the start time of the timer or the current timer value if it's\n    \t\t * paused. Since we start in a paused state we initialize the timer\n    \t\t * value.\n    \t\t * @type {Number}\n    \t\t */\n    \t\tthis._time = 0;\n\n    \t\t/**\n    \t\t * Stores the timeout currently used.\n    \t\t * @type {Number}\n    \t\t */\n    \t\tthis._timeout = 0;\n\n    \t\t/**\n    \t\t * Indicates whenever the autoplay is paused.\n    \t\t * @type {Boolean}\n    \t\t */\n    \t\tthis._paused = true;\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'changed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && e.property.name === 'settings') {\n    \t\t\t\t\tif (this._core.settings.autoplay) {\n    \t\t\t\t\t\tthis.play();\n    \t\t\t\t\t} else {\n    \t\t\t\t\t\tthis.stop();\n    \t\t\t\t\t}\n    \t\t\t\t} else if (e.namespace && e.property.name === 'position' && this._paused) {\n    \t\t\t\t\t// Reset the timer. This code is triggered when the position\n    \t\t\t\t\t// of the carousel was changed through user interaction.\n    \t\t\t\t\tthis._time = 0;\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.autoplay) {\n    \t\t\t\t\tthis.play();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'play.owl.autoplay': $.proxy(function(e, t, s) {\n    \t\t\t\tif (e.namespace) {\n    \t\t\t\t\tthis.play(t, s);\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'stop.owl.autoplay': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace) {\n    \t\t\t\t\tthis.stop();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'mouseover.owl.autoplay': $.proxy(function() {\n    \t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n    \t\t\t\t\tthis.pause();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'mouseleave.owl.autoplay': $.proxy(function() {\n    \t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n    \t\t\t\t\tthis.play();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'touchstart.owl.core': $.proxy(function() {\n    \t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n    \t\t\t\t\tthis.pause();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'touchend.owl.core': $.proxy(function() {\n    \t\t\t\tif (this._core.settings.autoplayHoverPause) {\n    \t\t\t\t\tthis.play();\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// register event handlers\n    \t\tthis._core.$element.on(this._handlers);\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tAutoplay.Defaults = {\n    \t\tautoplay: false,\n    \t\tautoplayTimeout: 5000,\n    \t\tautoplayHoverPause: false,\n    \t\tautoplaySpeed: false\n    \t};\n\n    \t/**\n    \t * Transition to the next slide and set a timeout for the next transition.\n    \t * @private\n    \t * @param {Number} [speed] - The animation speed for the animations.\n    \t */\n    \tAutoplay.prototype._next = function(speed) {\n    \t\tthis._call = window.setTimeout(\n    \t\t\t$.proxy(this._next, this, speed),\n    \t\t\tthis._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()\n    \t\t);\n\n    \t\tif (this._core.is('interacting') || document.hidden) {\n    \t\t\treturn;\n    \t\t}\n    \t\tthis._core.next(speed || this._core.settings.autoplaySpeed);\n    \t};\n\n    \t/**\n    \t * Reads the current timer value when the timer is playing.\n    \t * @public\n    \t */\n    \tAutoplay.prototype.read = function() {\n    \t\treturn new Date().getTime() - this._time;\n    \t};\n\n    \t/**\n    \t * Starts the autoplay.\n    \t * @public\n    \t * @param {Number} [timeout] - The interval before the next animation starts.\n    \t * @param {Number} [speed] - The animation speed for the animations.\n    \t */\n    \tAutoplay.prototype.play = function(timeout, speed) {\n    \t\tvar elapsed;\n\n    \t\tif (!this._core.is('rotating')) {\n    \t\t\tthis._core.enter('rotating');\n    \t\t}\n\n    \t\ttimeout = timeout || this._core.settings.autoplayTimeout;\n\n    \t\t// Calculate the elapsed time since the last transition. If the carousel\n    \t\t// wasn't playing this calculation will yield zero.\n    \t\telapsed = Math.min(this._time % (this._timeout || timeout), timeout);\n\n    \t\tif (this._paused) {\n    \t\t\t// Start the clock.\n    \t\t\tthis._time = this.read();\n    \t\t\tthis._paused = false;\n    \t\t} else {\n    \t\t\t// Clear the active timeout to allow replacement.\n    \t\t\twindow.clearTimeout(this._call);\n    \t\t}\n\n    \t\t// Adjust the origin of the timer to match the new timeout value.\n    \t\tthis._time += this.read() % timeout - elapsed;\n\n    \t\tthis._timeout = timeout;\n    \t\tthis._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);\n    \t};\n\n    \t/**\n    \t * Stops the autoplay.\n    \t * @public\n    \t */\n    \tAutoplay.prototype.stop = function() {\n    \t\tif (this._core.is('rotating')) {\n    \t\t\t// Reset the clock.\n    \t\t\tthis._time = 0;\n    \t\t\tthis._paused = true;\n\n    \t\t\twindow.clearTimeout(this._call);\n    \t\t\tthis._core.leave('rotating');\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Pauses the autoplay.\n    \t * @public\n    \t */\n    \tAutoplay.prototype.pause = function() {\n    \t\tif (this._core.is('rotating') && !this._paused) {\n    \t\t\t// Pause the clock.\n    \t\t\tthis._time = this.read();\n    \t\t\tthis._paused = true;\n\n    \t\t\twindow.clearTimeout(this._call);\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t */\n    \tAutoplay.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\tthis.stop();\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the navigation plugin.\n    \t * @class The Navigation Plugin\n    \t * @param {Owl} carousel - The Owl Carousel.\n    \t */\n    \tvar Navigation = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * Indicates whether the plugin is initialized or not.\n    \t\t * @protected\n    \t\t * @type {Boolean}\n    \t\t */\n    \t\tthis._initialized = false;\n\n    \t\t/**\n    \t\t * The current paging indexes.\n    \t\t * @protected\n    \t\t * @type {Array}\n    \t\t */\n    \t\tthis._pages = [];\n\n    \t\t/**\n    \t\t * All DOM elements of the user interface.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._controls = {};\n\n    \t\t/**\n    \t\t * Markup for an indicator.\n    \t\t * @protected\n    \t\t * @type {Array.<String>}\n    \t\t */\n    \t\tthis._templates = [];\n\n    \t\t/**\n    \t\t * The carousel element.\n    \t\t * @type {jQuery}\n    \t\t */\n    \t\tthis.$element = this._core.$element;\n\n    \t\t/**\n    \t\t * Overridden methods of the carousel.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._overrides = {\n    \t\t\tnext: this._core.next,\n    \t\t\tprev: this._core.prev,\n    \t\t\tto: this._core.to\n    \t\t};\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n    \t\t\t\t\tthis._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' +\n    \t\t\t\t\t\t$(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'added.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n    \t\t\t\t\tthis._templates.splice(e.position, 0, this._templates.pop());\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'remove.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n    \t\t\t\t\tthis._templates.splice(e.position, 1);\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'changed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && e.property.name == 'position') {\n    \t\t\t\t\tthis.draw();\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && !this._initialized) {\n    \t\t\t\t\tthis._core.trigger('initialize', null, 'navigation');\n    \t\t\t\t\tthis.initialize();\n    \t\t\t\t\tthis.update();\n    \t\t\t\t\tthis.draw();\n    \t\t\t\t\tthis._initialized = true;\n    \t\t\t\t\tthis._core.trigger('initialized', null, 'navigation');\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'refreshed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._initialized) {\n    \t\t\t\t\tthis._core.trigger('refresh', null, 'navigation');\n    \t\t\t\t\tthis.update();\n    \t\t\t\t\tthis.draw();\n    \t\t\t\t\tthis._core.trigger('refreshed', null, 'navigation');\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, Navigation.Defaults, this._core.options);\n\n    \t\t// register event handlers\n    \t\tthis.$element.on(this._handlers);\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t * @todo Rename `slideBy` to `navBy`\n    \t */\n    \tNavigation.Defaults = {\n    \t\tnav: false,\n    \t\tnavText: [\n    \t\t\t'<span aria-label=\"' + 'Previous' + '\">&#x2039;</span>',\n    \t\t\t'<span aria-label=\"' + 'Next' + '\">&#x203a;</span>'\n    \t\t],\n    \t\tnavSpeed: false,\n    \t\tnavElement: 'button type=\"button\" role=\"presentation\"',\n    \t\tnavContainer: false,\n    \t\tnavContainerClass: 'owl-nav',\n    \t\tnavClass: [\n    \t\t\t'owl-prev',\n    \t\t\t'owl-next'\n    \t\t],\n    \t\tslideBy: 1,\n    \t\tdotClass: 'owl-dot',\n    \t\tdotsClass: 'owl-dots',\n    \t\tdots: true,\n    \t\tdotsEach: false,\n    \t\tdotsData: false,\n    \t\tdotsSpeed: false,\n    \t\tdotsContainer: false\n    \t};\n\n    \t/**\n    \t * Initializes the layout of the plugin and extends the carousel.\n    \t * @protected\n    \t */\n    \tNavigation.prototype.initialize = function() {\n    \t\tvar override,\n    \t\t\tsettings = this._core.settings;\n\n    \t\t// create DOM structure for relative navigation\n    \t\tthis._controls.$relative = (settings.navContainer ? $(settings.navContainer)\n    \t\t\t: $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');\n\n    \t\tthis._controls.$previous = $('<' + settings.navElement + '>')\n    \t\t\t.addClass(settings.navClass[0])\n    \t\t\t.html(settings.navText[0])\n    \t\t\t.prependTo(this._controls.$relative)\n    \t\t\t.on('click', $.proxy(function(e) {\n    \t\t\t\tthis.prev(settings.navSpeed);\n    \t\t\t}, this));\n    \t\tthis._controls.$next = $('<' + settings.navElement + '>')\n    \t\t\t.addClass(settings.navClass[1])\n    \t\t\t.html(settings.navText[1])\n    \t\t\t.appendTo(this._controls.$relative)\n    \t\t\t.on('click', $.proxy(function(e) {\n    \t\t\t\tthis.next(settings.navSpeed);\n    \t\t\t}, this));\n\n    \t\t// create DOM structure for absolute navigation\n    \t\tif (!settings.dotsData) {\n    \t\t\tthis._templates = [ $('<button role=\"button\">')\n    \t\t\t\t.addClass(settings.dotClass)\n    \t\t\t\t.append($('<span>'))\n    \t\t\t\t.prop('outerHTML') ];\n    \t\t}\n\n    \t\tthis._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer)\n    \t\t\t: $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');\n\n    \t\tthis._controls.$absolute.on('click', 'button', $.proxy(function(e) {\n    \t\t\tvar index = $(e.target).parent().is(this._controls.$absolute)\n    \t\t\t\t? $(e.target).index() : $(e.target).parent().index();\n\n    \t\t\te.preventDefault();\n\n    \t\t\tthis.to(index, settings.dotsSpeed);\n    \t\t}, this));\n\n    \t\t/*$el.on('focusin', function() {\n    \t\t\t$(document).off(\".carousel\");\n\n    \t\t\t$(document).on('keydown.carousel', function(e) {\n    \t\t\t\tif(e.keyCode == 37) {\n    \t\t\t\t\t$el.trigger('prev.owl')\n    \t\t\t\t}\n    \t\t\t\tif(e.keyCode == 39) {\n    \t\t\t\t\t$el.trigger('next.owl')\n    \t\t\t\t}\n    \t\t\t});\n    \t\t});*/\n\n    \t\t// override public methods of the carousel\n    \t\tfor (override in this._overrides) {\n    \t\t\tthis._core[override] = $.proxy(this[override], this);\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t * @protected\n    \t */\n    \tNavigation.prototype.destroy = function() {\n    \t\tvar handler, control, property, override, settings;\n    \t\tsettings = this._core.settings;\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (control in this._controls) {\n    \t\t\tif (control === '$relative' && settings.navContainer) {\n    \t\t\t\tthis._controls[control].html('');\n    \t\t\t} else {\n    \t\t\t\tthis._controls[control].remove();\n    \t\t\t}\n    \t\t}\n    \t\tfor (override in this.overides) {\n    \t\t\tthis._core[override] = this._overrides[override];\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Updates the internal state.\n    \t * @protected\n    \t */\n    \tNavigation.prototype.update = function() {\n    \t\tvar i, j, k,\n    \t\t\tlower = this._core.clones().length / 2,\n    \t\t\tupper = lower + this._core.items().length,\n    \t\t\tmaximum = this._core.maximum(true),\n    \t\t\tsettings = this._core.settings,\n    \t\t\tsize = settings.center || settings.autoWidth || settings.dotsData\n    \t\t\t\t? 1 : settings.dotsEach || settings.items;\n\n    \t\tif (settings.slideBy !== 'page') {\n    \t\t\tsettings.slideBy = Math.min(settings.slideBy, settings.items);\n    \t\t}\n\n    \t\tif (settings.dots || settings.slideBy == 'page') {\n    \t\t\tthis._pages = [];\n\n    \t\t\tfor (i = lower, j = 0, k = 0; i < upper; i++) {\n    \t\t\t\tif (j >= size || j === 0) {\n    \t\t\t\t\tthis._pages.push({\n    \t\t\t\t\t\tstart: Math.min(maximum, i - lower),\n    \t\t\t\t\t\tend: i - lower + size - 1\n    \t\t\t\t\t});\n    \t\t\t\t\tif (Math.min(maximum, i - lower) === maximum) {\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\t}\n    \t\t\t\t\tj = 0, ++k;\n    \t\t\t\t}\n    \t\t\t\tj += this._core.mergers(this._core.relative(i));\n    \t\t\t}\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Draws the user interface.\n    \t * @todo The option `dotsData` wont work.\n    \t * @protected\n    \t */\n    \tNavigation.prototype.draw = function() {\n    \t\tvar difference,\n    \t\t\tsettings = this._core.settings,\n    \t\t\tdisabled = this._core.items().length <= settings.items,\n    \t\t\tindex = this._core.relative(this._core.current()),\n    \t\t\tloop = settings.loop || settings.rewind;\n\n    \t\tthis._controls.$relative.toggleClass('disabled', !settings.nav || disabled);\n\n    \t\tif (settings.nav) {\n    \t\t\tthis._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));\n    \t\t\tthis._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));\n    \t\t}\n\n    \t\tthis._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);\n\n    \t\tif (settings.dots) {\n    \t\t\tdifference = this._pages.length - this._controls.$absolute.children().length;\n\n    \t\t\tif (settings.dotsData && difference !== 0) {\n    \t\t\t\tthis._controls.$absolute.html(this._templates.join(''));\n    \t\t\t} else if (difference > 0) {\n    \t\t\t\tthis._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n    \t\t\t} else if (difference < 0) {\n    \t\t\t\tthis._controls.$absolute.children().slice(difference).remove();\n    \t\t\t}\n\n    \t\t\tthis._controls.$absolute.find('.active').removeClass('active');\n    \t\t\tthis._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');\n    \t\t}\n    \t};\n\n    \t/**\n    \t * Extends event data.\n    \t * @protected\n    \t * @param {Event} event - The event object which gets thrown.\n    \t */\n    \tNavigation.prototype.onTrigger = function(event) {\n    \t\tvar settings = this._core.settings;\n\n    \t\tevent.page = {\n    \t\t\tindex: $.inArray(this.current(), this._pages),\n    \t\t\tcount: this._pages.length,\n    \t\t\tsize: settings && (settings.center || settings.autoWidth || settings.dotsData\n    \t\t\t\t? 1 : settings.dotsEach || settings.items)\n    \t\t};\n    \t};\n\n    \t/**\n    \t * Gets the current page position of the carousel.\n    \t * @protected\n    \t * @returns {Number}\n    \t */\n    \tNavigation.prototype.current = function() {\n    \t\tvar current = this._core.relative(this._core.current());\n    \t\treturn $.grep(this._pages, $.proxy(function(page, index) {\n    \t\t\treturn page.start <= current && page.end >= current;\n    \t\t}, this)).pop();\n    \t};\n\n    \t/**\n    \t * Gets the current succesor/predecessor position.\n    \t * @protected\n    \t * @returns {Number}\n    \t */\n    \tNavigation.prototype.getPosition = function(successor) {\n    \t\tvar position, length,\n    \t\t\tsettings = this._core.settings;\n\n    \t\tif (settings.slideBy == 'page') {\n    \t\t\tposition = $.inArray(this.current(), this._pages);\n    \t\t\tlength = this._pages.length;\n    \t\t\tsuccessor ? ++position : --position;\n    \t\t\tposition = this._pages[((position % length) + length) % length].start;\n    \t\t} else {\n    \t\t\tposition = this._core.relative(this._core.current());\n    \t\t\tlength = this._core.items().length;\n    \t\t\tsuccessor ? position += settings.slideBy : position -= settings.slideBy;\n    \t\t}\n\n    \t\treturn position;\n    \t};\n\n    \t/**\n    \t * Slides to the next item or page.\n    \t * @public\n    \t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n    \t */\n    \tNavigation.prototype.next = function(speed) {\n    \t\t$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n    \t};\n\n    \t/**\n    \t * Slides to the previous item or page.\n    \t * @public\n    \t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n    \t */\n    \tNavigation.prototype.prev = function(speed) {\n    \t\t$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n    \t};\n\n    \t/**\n    \t * Slides to the specified item or page.\n    \t * @public\n    \t * @param {Number} position - The position of the item or page.\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\n    \t */\n    \tNavigation.prototype.to = function(position, speed, standard) {\n    \t\tvar length;\n\n    \t\tif (!standard && this._pages.length) {\n    \t\t\tlength = this._pages.length;\n    \t\t\t$.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);\n    \t\t} else {\n    \t\t\t$.proxy(this._overrides.to, this._core)(position, speed);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \t/**\n    \t * Creates the hash plugin.\n    \t * @class The Hash Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */\n    \tvar Hash = function(carousel) {\n    \t\t/**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */\n    \t\tthis._core = carousel;\n\n    \t\t/**\n    \t\t * Hash index for the items.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._hashes = {};\n\n    \t\t/**\n    \t\t * The carousel element.\n    \t\t * @type {jQuery}\n    \t\t */\n    \t\tthis.$element = this._core.$element;\n\n    \t\t/**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */\n    \t\tthis._handlers = {\n    \t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && this._core.settings.startPosition === 'URLHash') {\n    \t\t\t\t\t$(window).trigger('hashchange.owl.navigation');\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace) {\n    \t\t\t\t\tvar hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');\n\n    \t\t\t\t\tif (!hash) {\n    \t\t\t\t\t\treturn;\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._hashes[hash] = e.content;\n    \t\t\t\t}\n    \t\t\t}, this),\n    \t\t\t'changed.owl.carousel': $.proxy(function(e) {\n    \t\t\t\tif (e.namespace && e.property.name === 'position') {\n    \t\t\t\t\tvar current = this._core.items(this._core.relative(this._core.current())),\n    \t\t\t\t\t\thash = $.map(this._hashes, function(item, hash) {\n    \t\t\t\t\t\t\treturn item === current ? hash : null;\n    \t\t\t\t\t\t}).join();\n\n    \t\t\t\t\tif (!hash || window.location.hash.slice(1) === hash) {\n    \t\t\t\t\t\treturn;\n    \t\t\t\t\t}\n\n    \t\t\t\t\twindow.location.hash = hash;\n    \t\t\t\t}\n    \t\t\t}, this)\n    \t\t};\n\n    \t\t// set default options\n    \t\tthis._core.options = $.extend({}, Hash.Defaults, this._core.options);\n\n    \t\t// register the event handlers\n    \t\tthis.$element.on(this._handlers);\n\n    \t\t// register event listener for hash navigation\n    \t\t$(window).on('hashchange.owl.navigation', $.proxy(function(e) {\n    \t\t\tvar hash = window.location.hash.substring(1),\n    \t\t\t\titems = this._core.$stage.children(),\n    \t\t\t\tposition = this._hashes[hash] && items.index(this._hashes[hash]);\n\n    \t\t\tif (position === undefined || position === this._core.current()) {\n    \t\t\t\treturn;\n    \t\t\t}\n\n    \t\t\tthis._core.to(this._core.relative(position), false, true);\n    \t\t}, this));\n    \t};\n\n    \t/**\n    \t * Default options.\n    \t * @public\n    \t */\n    \tHash.Defaults = {\n    \t\tURLhashListener: false\n    \t};\n\n    \t/**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */\n    \tHash.prototype.destroy = function() {\n    \t\tvar handler, property;\n\n    \t\t$(window).off('hashchange.owl.navigation');\n\n    \t\tfor (handler in this._handlers) {\n    \t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n    \t\t}\n    \t\tfor (property in Object.getOwnPropertyNames(this)) {\n    \t\t\ttypeof this[property] != 'function' && (this[property] = null);\n    \t\t}\n    \t};\n\n    \t$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n\n    })(window.Zepto || window.jQuery, window, document);\n    (function($, window, document, undefined) {\n\n    \tvar style = $('<support>').get(0).style,\n    \t\tprefixes = 'Webkit Moz O ms'.split(' '),\n    \t\tevents = {\n    \t\t\ttransition: {\n    \t\t\t\tend: {\n    \t\t\t\t\tWebkitTransition: 'webkitTransitionEnd',\n    \t\t\t\t\tMozTransition: 'transitionend',\n    \t\t\t\t\tOTransition: 'oTransitionEnd',\n    \t\t\t\t\ttransition: 'transitionend'\n    \t\t\t\t}\n    \t\t\t},\n    \t\t\tanimation: {\n    \t\t\t\tend: {\n    \t\t\t\t\tWebkitAnimation: 'webkitAnimationEnd',\n    \t\t\t\t\tMozAnimation: 'animationend',\n    \t\t\t\t\tOAnimation: 'oAnimationEnd',\n    \t\t\t\t\tanimation: 'animationend'\n    \t\t\t\t}\n    \t\t\t}\n    \t\t},\n    \t\ttests = {\n    \t\t\tcsstransforms: function() {\n    \t\t\t\treturn !!test('transform');\n    \t\t\t},\n    \t\t\tcsstransforms3d: function() {\n    \t\t\t\treturn !!test('perspective');\n    \t\t\t},\n    \t\t\tcsstransitions: function() {\n    \t\t\t\treturn !!test('transition');\n    \t\t\t},\n    \t\t\tcssanimations: function() {\n    \t\t\t\treturn !!test('animation');\n    \t\t\t}\n    \t\t};\n\n    \tfunction test(property, prefixed) {\n    \t\tvar result = false,\n    \t\t\tupper = property.charAt(0).toUpperCase() + property.slice(1);\n\n    \t\t$.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function(i, property) {\n    \t\t\tif (style[property] !== undefined) {\n    \t\t\t\tresult = prefixed ? property : true;\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t});\n\n    \t\treturn result;\n    \t}\n\n    \tfunction prefixed(property) {\n    \t\treturn test(property, true);\n    \t}\n\n    \tif (tests.csstransitions()) {\n    \t\t/* jshint -W053 */\n    \t\t$.support.transition = new String(prefixed('transition'));\n    \t\t$.support.transition.end = events.transition.end[ $.support.transition ];\n    \t}\n\n    \tif (tests.cssanimations()) {\n    \t\t/* jshint -W053 */\n    \t\t$.support.animation = new String(prefixed('animation'));\n    \t\t$.support.animation.end = events.animation.end[ $.support.animation ];\n    \t}\n\n    \tif (tests.csstransforms()) {\n    \t\t/* jshint -W053 */\n    \t\t$.support.transform = new String(prefixed('transform'));\n    \t\t$.support.transform3d = tests.csstransforms3d();\n    \t}\n\n    })(window.Zepto || window.jQuery, window, document);\n\n    var $ = window.jQuery;\r\n    var ReactOwlCarousel = /** @class */ (function (_super) {\r\n        __extends(ReactOwlCarousel, _super);\r\n        function ReactOwlCarousel(props) {\r\n            var _this = _super.call(this, props) || this;\r\n            _this.containerRef = function (inst) {\r\n                _this.container = inst;\r\n            };\r\n            var _a = filterOptions(_this.props), options = _a[0], propsWithoutOptions = _a[1];\r\n            _this.options = options;\r\n            _this.propsWithoutOptions = propsWithoutOptions;\r\n            return _this;\r\n        }\r\n        ReactOwlCarousel.prototype.componentDidMount = function () {\r\n            this.$ele = $(this.container);\r\n            this.create();\r\n        };\r\n        ReactOwlCarousel.prototype.UNSAFE_componentWillReceiveProps = function () {\r\n            this.destory();\r\n        };\r\n        ReactOwlCarousel.prototype.componentDidUpdate = function () {\r\n            var _a = filterOptions(this.props), options = _a[0], propsWithoutOptions = _a[1];\r\n            this.options = options;\r\n            this.propsWithoutOptions = propsWithoutOptions;\r\n            this.create();\r\n        };\r\n        ReactOwlCarousel.prototype.next = function (speed) {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            if (typeof speed === 'number') {\r\n                this.$ele.trigger('next.owl.carousel', [speed]);\r\n            }\r\n            else {\r\n                this.$ele.trigger('next.owl.carousel', speed);\r\n            }\r\n        };\r\n        ReactOwlCarousel.prototype.prev = function (speed) {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            if (typeof speed === 'number') {\r\n                this.$ele.trigger('prev.owl.carousel', [speed]);\r\n            }\r\n            else {\r\n                this.$ele.trigger('prev.owl.carousel', speed);\r\n            }\r\n        };\r\n        ReactOwlCarousel.prototype.to = function (position, speed) {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            if (typeof position === 'number' && typeof speed === 'number') {\r\n                this.$ele.trigger('to.owl.carousel', [position, speed]);\r\n            }\r\n            else {\r\n                this.$ele.trigger('to.owl.carousel');\r\n            }\r\n        };\r\n        ReactOwlCarousel.prototype.create = function (options) {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            this.$ele.owlCarousel(options || this.options);\r\n        };\r\n        ReactOwlCarousel.prototype.destory = function () {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            this.$ele.trigger('destroy.owl.carousel');\r\n        };\r\n        ReactOwlCarousel.prototype.play = function (timeout, speed) {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            if (typeof timeout === 'number' && typeof speed === 'number') {\r\n                this.$ele.trigger('play.owl.autoplay', [timeout, speed]);\r\n            }\r\n            else {\r\n                this.$ele.trigger('play.owl.autoplay');\r\n            }\r\n        };\r\n        ReactOwlCarousel.prototype.stop = function () {\r\n            if (!this.$ele)\r\n                throw new Error('OwlCarousel is not created');\r\n            this.$ele.trigger('stop.owl.autoplay');\r\n        };\r\n        ReactOwlCarousel.prototype.render = function () {\r\n            var _a = this.propsWithoutOptions, className = _a.className, props = __rest(_a, [\"className\"]);\r\n            return (React__default.createElement(\"div\", __assign({ className: \"owl-carousel \" + className, ref: this.containerRef }, props)));\r\n        };\r\n        return ReactOwlCarousel;\r\n    }(React.Component));\r\n    var OPTIONS = new Set([\r\n        'items',\r\n        'margin',\r\n        'loop',\r\n        'center',\r\n        'mouseDrag',\r\n        'touchDrag',\r\n        'pullDrag',\r\n        'freeDrag',\r\n        'stagePadding',\r\n        'merge',\r\n        'mergeFit',\r\n        'autoWidth',\r\n        'startPosition',\r\n        'URLhashListener',\r\n        'nav',\r\n        'rewind',\r\n        'navText',\r\n        'navElement',\r\n        'slideBy',\r\n        'dots',\r\n        'dotsEach',\r\n        'dotData',\r\n        'lazyLoad',\r\n        'lazyContent',\r\n        'autoplay',\r\n        'autoplayTimeout',\r\n        'autoplayHoverPause',\r\n        'smartSpeed',\r\n        'fluidSpeed',\r\n        'autoplaySpeed',\r\n        'navSpeed',\r\n        'dotsSpeed',\r\n        'dragEndSpeed',\r\n        'callbacks',\r\n        'responsive',\r\n        'responsiveRefreshRate',\r\n        'responsiveBaseElement',\r\n        'video',\r\n        'videoHeight',\r\n        'videoWidth',\r\n        'animateOut',\r\n        'animateIn',\r\n        'fallbackEasing',\r\n        'info',\r\n        'nestedItemSelector',\r\n        'itemElement',\r\n        'stageElement',\r\n        'navContainer',\r\n        'dotsContainer',\r\n        // 'CLASSES'\r\n        'refreshClass',\r\n        'loadingClass',\r\n        'loadedClass',\r\n        'rtlClass',\r\n        'dragClass',\r\n        'grabClass',\r\n        'stageClass',\r\n        'stageOuterClass',\r\n        'navContainerClass',\r\n        'navClass',\r\n        'controlsClass',\r\n        'dotClass',\r\n        'dotsClass',\r\n        'autoHeightClass',\r\n        'responsiveClass',\r\n        // 'EVENTS'\r\n        'onInitialize',\r\n        'onInitialized',\r\n        'onResize',\r\n        'onResized',\r\n        'onRefresh',\r\n        'onRefreshed',\r\n        'onDrag',\r\n        'onDragged',\r\n        'onTranslate',\r\n        'onTranslated',\r\n        'onChange',\r\n        'onChanged',\r\n        'onLoadLazy',\r\n        'onLoadedLazy',\r\n        'onStopVideo',\r\n        'onPlayVideo',\r\n    ]);\r\n    function filterOptions(item) {\r\n        var options = {};\r\n        var propsWithoutOptions = {};\r\n        Object.keys(item).forEach(function (key) {\r\n            if (OPTIONS.has(key)) {\r\n                options[key] = item[key];\r\n            }\r\n            else {\r\n                propsWithoutOptions[key] = item[key];\r\n            }\r\n        });\r\n        return [options, propsWithoutOptions];\r\n    }\n\n    return ReactOwlCarousel;\n\n})));\n","/** @license React v16.14.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\nvar checkPropTypes = require('prop-types/checkPropTypes');\n\nvar ReactVersion = '16.14.0';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  suspense: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\nfunction describeComponentFrame (name, source, ownerName) {\n  var sourceInfo = '';\n\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n\n        if (match) {\n          var pathBeforeSlash = match[1];\n\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nvar Resolved = 1;\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type.render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\nvar currentlyValidatingElement = null;\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\\n    in') === 0;\n\n    if (!hasExistingStack) {\n      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n      var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n      if (stack !== '') {\n        format += '%s';\n        args = args.concat([stack]);\n      }\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error( \"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\" );\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error( \"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\" );\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\n\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error( \"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n  func.call(context, child, bookKeeping.count++);\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error( \"React.Children.only expected to receive a single React element child.\" );\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (unstable_observedBits !== undefined) {\n      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');\n    } // TODO: add a more generic warning for invalid values.\n\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  setCurrentlyValidatingElement(element);\n\n  {\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var name = getComponentName(type);\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      setCurrentlyValidatingElement(element);\n      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n      setCurrentlyValidatingElement(null);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true;\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    setCurrentlyValidatingElement(fragment);\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n    }\n\n    setCurrentlyValidatingElement(null);\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n{\n\n  try {\n    var frozenObject = Object.freeze({});\n    var testMap = new Map([[frozenObject, null]]);\n    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = ReactVersion;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","let ContentStyler = (name_, selector = false, setyl_ = false) => {\n  if (selector && setyl_) {\n    let textStyle = `${selector}{${setyl_};}`;\n    let addStyleHead = document.getElementById(name_);\n    if (!addStyleHead) {\n      let element = document.createElement(\"style\");\n      element.type = \"text/css\";\n      element.textContent = textStyle;\n      element.setAttribute(\"id\", name_);\n      document.getElementsByTagName(\"head\")[0].appendChild(element);\n    } else if (addStyleHead.tagName == \"STYLE\") {\n      addStyleHead.textContent = textStyle;\n    }\n  }\n};\nexport default ContentStyler;\n","import { __ } from \"@wordpress/i18n\";\nexport const blocksDetail = {\n  block_layout_pre: {\n    title: __(\"Unlimited Blocks Templates\", \"unlimited-blocks\"),\n    keywords: [],\n    description: __(\n      \"This block allows you to display predefined Unlimited Blocks templates. (E.g- post, page, template)\",\n      \"unlimited-blocks\"\n    ),\n    icon: \"album\",\n  },\n  column_blocks_column: {\n    title: __(\"Unlimited Blocks Column\", \"unlimited-blocks\"),\n    description: __(\"Add a pre-defined column layout.\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: \"editor-table\",\n  },\n  column_wrapper: {\n    title: __(\"Advance Column\", \"unlimited-blocks\"),\n    description: __(\"Add a pre-defined column layout.\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M4 5v13h17V5H4zm2 11V7h3v9H6zm5 0v-3.5h3V16h-3zm8 0h-3v-3.5h3V16zm-8-5.5V7h8v3.5h-8z\"></path>\n      </svg>\n    ),\n  },\n  icon_block: {\n    title: __(\"Icon\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert an icon (E.g- icon, image)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [\"icon\", \"iconbox\"],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" tabindex=\"-1\">\n        <path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"></path>\n      </svg>\n    ),\n  },\n  post_category_layout: {\n    title: __(\"Post Category Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display image based posts layout of posts from your selected categories (E.g- post category)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        role=\"img\"\n        aria-hidden=\"true\"\n        focusable=\"false\"\n      >\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\"></path>\n      </svg>\n    ),\n  },\n  post_grid_layouts: {\n    title: __(\"Post Grid Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display grid type post layout from your blog posts. (E.g- display post, grid post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\"></path>\n      </svg>\n    ),\n  },\n  post_list_layout: {\n    title: __(\"Post List Layout\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display list based post layout. (E.g- Post list)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M13 9.5h5v-2h-5v2zm0 7h5v-2h-5v2zm6 4.5H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2v14c0 1.1-.9 2-2 2zM6 11h5V6H6v5zm1-4h3v3H7V7zM6 18h5v-5H6v5zm1-4h3v3H7v-3z\"\n        ></path>\n      </svg>\n    ),\n  },\n  post_image_layout: {\n    title: __(\"Post Layout 1\", \"unlimited-blocks\"),\n    description: __(\"\", \"unlimited-blocks\"),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_two_post: {\n    title: __(\"Post Layout 2\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based two post layouts. (E.g- two column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_three_post: {\n    title: __(\"Post Layout 3\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based Three post layouts. (E.g- three column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_four_post: {\n    title: __(\"post Layout 4\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based four post layouts. (E.g- four column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_five_post: {\n    title: \"Post Layout 5\",\n    description: __(\n      \"This block allows you to display column based five post layouts. (E.g- five column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  post_image_layout_six_post: {\n    title: __(\"Post Layout 6\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to display column based six post layouts. (E.g- six column post)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"></path>\n      </svg>\n    ),\n  },\n  ubl_post_slider: {\n    title: \"Post Slider Layout\",\n    description: __(\n      \"This block allows you to display post based sliders. (E.g- post slider, blog slider)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        id=\"_x31__x2C_5\"\n        enable-background=\"new 0 0 24 24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"m6.251 13c-.242 0-.48-.117-.625-.334l-1.5-2.25c-.168-.252-.168-.58 0-.832l1.5-2.25c.229-.345.695-.438 1.04-.208s.438.695.208 1.04l-1.223 1.834 1.223 1.834c.229.345.137.81-.208 1.04-.128.085-.272.126-.415.126z\" />\n        <path d=\"m17.749 13c-.143 0-.287-.041-.415-.126-.345-.23-.438-.695-.208-1.04l1.223-1.834-1.223-1.834c-.229-.345-.137-.81.208-1.04.346-.23.811-.137 1.04.208l1.5 2.25c.168.252.168.58 0 .832l-1.5 2.25c-.145.217-.383.334-.625.334z\" />\n        <path d=\"m7 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m12 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m17 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m21.25 24h-18.5c-1.517 0-2.75-1.233-2.75-2.75v-18.5c0-1.517 1.233-2.75 2.75-2.75h18.5c1.517 0 2.75 1.233 2.75 2.75v18.5c0 1.517-1.233 2.75-2.75 2.75zm-18.5-22.5c-.689 0-1.25.561-1.25 1.25v18.5c0 .689.561 1.25 1.25 1.25h18.5c.689 0 1.25-.561 1.25-1.25v-18.5c0-.689-.561-1.25-1.25-1.25z\" />\n      </svg>\n    ),\n  },\n  pricing_table: {\n    title: __(\"Price Box\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert beautiful pricing table. (E.g- price, rate, features)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M11 17h2v-1h1c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1h-3v-1h4V8h-2V7h-2v1h-1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h3v1H9v2h2v1zm9-13H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4V6h16v12z\"></path>\n      </svg>\n    ),\n  },\n  linear_progress: {\n    title: __(\"Linear Progress Bar\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert linear progress bar anywhere in the page or post. (E.g-  progress bar)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M19.5 9.5c-1.03 0-1.9.62-2.29 1.5h-2.92c-.39-.88-1.26-1.5-2.29-1.5s-1.9.62-2.29 1.5H6.79c-.39-.88-1.26-1.5-2.29-1.5C3.12 9.5 2 10.62 2 12s1.12 2.5 2.5 2.5c1.03 0 1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5s1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5 1.38 0 2.5-1.12 2.5-2.5s-1.12-2.5-2.5-2.5z\"></path>\n      </svg>\n    ),\n  },\n  progress_bar_pie: {\n    title: __(\"Circular Progress Bar\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert circular progress bar anywhere in the page or post. (E.g-  progress bar)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg fill=\"#f8c045\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path d=\"M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.48 2.54l2.6 1.53c.56-1.24.88-2.62.88-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z\"></path>\n      </svg>\n    ),\n  },\n  service_section: {\n    title: __(\"Service Section\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert columns based image and texts. (E.g- service, image, icon)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        class=\"MuiSvgIcon-root jss174\"\n        focusable=\"false\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M3 15h8v-2H3v2zm0 4h8v-2H3v2zm0-8h8V9H3v2zm0-6v2h8V5H3zm10 0h8v14h-8V5z\"></path>\n      </svg>\n    ),\n  },\n  ubl_block_slider: {\n    title: __(\"Slider\", \"unlimited-blocks\"),\n    description: __(\n      \"This block allows you to insert content and image slides. (E.g- Image slider, content slider)\",\n      \"unlimited-blocks\"\n    ),\n    keywords: [],\n    icon: (\n      <svg\n        id=\"_x31__x2C_5\"\n        enable-background=\"new 0 0 24 24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"m6.251 13c-.242 0-.48-.117-.625-.334l-1.5-2.25c-.168-.252-.168-.58 0-.832l1.5-2.25c.229-.345.695-.438 1.04-.208s.438.695.208 1.04l-1.223 1.834 1.223 1.834c.229.345.137.81-.208 1.04-.128.085-.272.126-.415.126z\" />\n        <path d=\"m17.749 13c-.143 0-.287-.041-.415-.126-.345-.23-.438-.695-.208-1.04l1.223-1.834-1.223-1.834c-.229-.345-.137-.81.208-1.04.346-.23.811-.137 1.04.208l1.5 2.25c.168.252.168.58 0 .832l-1.5 2.25c-.145.217-.383.334-.625.334z\" />\n        <path d=\"m7 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m12 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m17 20.25c-.689 0-1.25-.561-1.25-1.25s.561-1.25 1.25-1.25 1.25.561 1.25 1.25-.561 1.25-1.25 1.25zm0-1.5c-.138 0-.25.112-.25.25 0 .275.5.275.5 0 0-.138-.112-.25-.25-.25z\" />\n        <path d=\"m21.25 24h-18.5c-1.517 0-2.75-1.233-2.75-2.75v-18.5c0-1.517 1.233-2.75 2.75-2.75h18.5c1.517 0 2.75 1.233 2.75 2.75v18.5c0 1.517-1.233 2.75-2.75 2.75zm-18.5-22.5c-.689 0-1.25.561-1.25 1.25v18.5c0 .689.561 1.25 1.25 1.25h18.5c.689 0 1.25-.561 1.25-1.25v-18.5c0-.689-.561-1.25-1.25-1.25z\" />\n      </svg>\n    ),\n  },\n  ubl_block_product: {\n    title: __(\"Th Product\", \"unlimited-blocks\"),\n    description: __(\"This block is for Product Blocks.\", \"unlimited-blocks\"),\n    keywords: [\"product\"],\n    icon: (\n      <svg\n        focusable=\"false\"\n        aria-hidden=\"true\"\n        viewBox=\"0 0 24 24\"\n        data-testid=\"LocalGroceryStoreIcon\"\n      >\n        <path d=\"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\"></path>\n      </svg>\n    ),\n  },\n};\n","// extracted by mini-css-extract-plugin","const fontFmily = \n[\"ABeeZee\",\n\"Abel\",\n\"Aclonica\",\n\"Acme\",\n\"Aguafina Script\",\n\"Akronim\",\n\"Aladin\",\n\"Alegreya SC\",\n\"Alex Brush\",\n\"Allura\",\n\"Almendra\",\n\"Almendra Display\",\n\"Amatic SC\",\n\"Amita\",\n\"Arizonia\",\n\"Arimo\",\n\"Arvo\",\n\"Asap Condensed\",\n\"Bad Script\",\n\"Balsamiq Sans\",\n\"Barrio\",\n\"Berkshire Swash\",\n\"Bubblegum Sans\",\n\"Bungee Hairline\",\n\"Butcherman\",\n\"Catamaran\",\n\"Dancing Script\",\n\"Do Hyeon\",\n\"Dokdo\",\n\"Dosis\",\n\"Dr Sugiyama\",\n\"Eater\",\n\"Ewert\",\n\"Fascinate Inline\",\n\"Faster One\",\n\"Finger Paint\",\n\"Gorditas\",\n\"Great Vibes\",\n\"Habibi\",\n\"Hanuman\",\n\"Hanalei\",\n\"IM Fell Great Primer SC\",\n\"Iceberg\",\n\"Iceland\",\n\"Indie Flower\",\n\"Inter\",\n\"Irish Grover\",\n\"Italianno\",\n\"Itim\",\n\"Jacques Francois\",\n\"Jacques Francois Shadow\",\n\"Jim Nightshade\",\n\"Joti One\",\n\"Julius Sans One\",\n\"Just Me Again Down Here\",\n\"Kaushan Script\",\n\"Keania One\",\n\"Kirang Haerang\",\n\"Kite One\",\n\"Kristi\",\n\"Kumar One Outline\",\n\"Lakki Reddy\",\n\"Leckerli One\",\n\"Lily Script One\",\n\"Liu Jian Mao Cao\",\n\"Londrina Shadow\",\n\"Love Ya Like A Sister\",\n\"Major Mono Display\",\n\"Mandali\",\n\"Marck Script\",\n\"Merienda\",\n\"Merienda One\",\n\"Merriweather Sans\",\n\"Michroma\",\n\"Miltonian Tattoo\",\n\"Mountains of Christmas\",\n\"Mukta Vaani\",\n\"Niramit\",\n\"Nosifer\",\n\"Nova Script\",\n\"Norican\",\n\"Offside\",\n\"Orbitron\",\n\"PT Sans Caption\",\n\"Pacifico\",\n\"Palanquin Dark\",\n\"Piedra\",\n\"Playfair Display\",\n\"Poiret One\",\n\"Princess Sofia\",\n\"Zilla Slab\",\n\"Zhi Mang Xing\",\n\"Zeyada\",\n\"ZCOOL XiaoWei\",\n\"ZCOOL KuaiLe\",\n\"Yeon Sung\",\n\"Yellowtail\",\n\"Yatra One\",\n\"Yanone Kaffeesatz\",\n\"Yesteryear\",\n\"Wire One\",\n\"Wendy One\",\n\"Wellfleet\",\n\"Warnes\",\n\"Walter Turncoat\",\n\"Wallpoet\",\n\"Waiting for the Sunrise\",\n\"Volkhov\",\n\"Viga\",\n\"Vibur\",\n\"Vibes\",\n\"Vast Shadow\",\n\"Vampiro One\",\n\"VT323\",\n\"Unlock\",\n\"Unkempt\",\n\"UnifrakturMaguntia\",\n\"Unica One\",\n\"Underdog\",\n\"Uncial Antiqua\",\n\"Ultra\",\n\"Ubuntu\",\n\"Ubuntu Mono\",\n\"Turret Road\",\n\"Turret Road\",\n\"Tulpen One\",\n\"Trochut\",\n\"Trocchi\",\n\"Trade Winds\",\n\"Tomorrow\",\n\"Titan One\",\n\"Timmana\",\n\"Tillana\",\n\"The Girl Next Door\",\n\"Text Me One\",\n\"Tenali Ramakrishna\",\n\"Tauri\",\n\"Tangerine\",\n\"Syncopate\",\n\"Swanky and Moo Moo\",\n\"Suravaram\",\n\"Supermercado One\",\n\"Sunshiney\",\n\"Sulphur Point\",\n\"Sue Ellen Francisco\",\n\"Stylish\",\n\"Stint Ultra Expanded\",\n\"Stardos Stencil\",\n\"Stalinist One\",\n\"Stalemate\",\n\"Srisakdi\",\n\"Sriracha\",\n\"Spirax\",\n\"Spicy Rice\",\n\"Special Elite\",\n\"Space Mono\",\n\"Source Code Pro\",\n\"Sonsie One\",\n\"Sofia\",\n\"Sofadi One\",\n\"Snowburst One\",\n\"Snippet\",\n\"Sniglet\",\n\"Smokum\",\n\"Slackey\",\n\"Skranji\",\n\"Six Caps\",\n\"Sirin Stencil\",\n\"Simonetta\",\n\"Sigmar One\",\n\"Shrikhand\",\n\"Short Stack\",\n\"Shojumaru\",\n\"Shadows Into Light Two\",\n\"Shadows Into Light\",\n\"Seymour One\",\n\"Sevillana\",\n\"Sedgwick Ave Display\",\n\"Sedgwick Ave\",\n\"Seaweed Script\",\n\"Satisfy\",\n\"Sarina\",\n\"Sancreek\",\n\"Saira Stencil One\",\n\"Sail\",\n\"Sacramento\",\n\"Rye\",\n\"Ruthie\",\n\"Ruslan Display\",\n\"Rum Raisin\",\n\"Ruge Boogie\",\n\"Rubik Mono One\",\n\"Rouge Script\",\n\"Rosarivo\",\n\"Romanesco\",\n\"Rock Salt\",\n\"Rochester\",\n\"Roboto\",\n\"Risque\",\n\"Ribeye Marrow\",\n\"Ribeye\",\n\"Revalia\",\n\"Reenie Beanie\",\n\"Redressed\",\n\"Red Rose\",\n\"Ravi Prakash\",\n\"Ranga\",\n\"Rancho\",\n\"Ranchers\",\n\"Raleway Dots\",\n\"Rakkas\",\n\"Rajdhani\",\n\"Racing Sans One\",\n\"Quintessential\",\n\"Qwigley\",\n\"Quicksand\"];\nexport default fontFmily;\n","let icons_ = [\n    \"fas fa-ad\",\n    \"fas fa-address-book\",\n    \"fas fa-address-card\",\n    \"fas fa-adjust\",\n    \"fas fa-air-freshener\",\n    \"fas fa-align-center\",\n    \"fas fa-align-justify\",\n    \"fas fa-align-left\",\n    \"fas fa-align-right\",\n    \"fas fa-allergies\",\n    \"fas fa-ambulance\",\n    \"fas fa-american-sign-language-interpreting\",\n    \"fas fa-anchor\",\n    \"fas fa-angle-double-down\",\n    \"fas fa-angle-double-left\",\n    \"fas fa-angle-double-right\",\n    \"fas fa-angle-double-up\",\n    \"fas fa-angle-down\",\n    \"fas fa-angle-left\",\n    \"fas fa-angle-right\",\n    \"fas fa-angle-up\",\n    \"fas fa-angry\",\n    \"fas fa-ankh\",\n    \"fas fa-apple-alt\",\n    \"fas fa-archive\",\n    \"fas fa-archway\",\n    \"fas fa-arrow-alt-circle-down\",\n    \"fas fa-arrow-alt-circle-left\",\n    \"fas fa-arrow-alt-circle-right\",\n    \"fas fa-arrow-alt-circle-up\",\n    \"fas fa-arrow-circle-down\",\n    \"fas fa-arrow-circle-left\",\n    \"fas fa-arrow-circle-right\",\n    \"fas fa-arrow-circle-up\",\n    \"fas fa-arrow-down\",\n    \"fas fa-arrow-left\",\n    \"fas fa-arrow-right\",\n    \"fas fa-arrow-up\",\n    \"fas fa-arrows-alt\",\n    \"fas fa-arrows-alt-h\",\n    \"fas fa-arrows-alt-v\",\n    \"fas fa-assistive-listening-systems\",\n    \"fas fa-asterisk\",\n    \"fas fa-at\",\n    \"fas fa-atlas\",\n    \"fas fa-atom\",\n    \"fas fa-audio-description\",\n    \"fas fa-award\",\n    \"fas fa-baby\",\n    \"fas fa-baby-carriage\",\n    \"fas fa-backspace\",\n    \"fas fa-backward\",\n    \"fas fa-balance-scale\",\n    \"fas fa-ban\",\n    \"fas fa-band-aid\",\n    \"fas fa-barcode\",\n    \"fas fa-bars\",\n    \"fas fa-baseball-ball\",\n    \"fas fa-basketball-ball\",\n    \"fas fa-bath\",\n    \"fas fa-battery-empty\",\n    \"fas fa-battery-full\",\n    \"fas fa-battery-half\",\n    \"fas fa-battery-quarter\",\n    \"fas fa-battery-three-quarters\",\n    \"fas fa-bed\",\n    \"fas fa-beer\",\n    \"fas fa-bell\",\n    \"fas fa-bell-slash\",\n    \"fas fa-bezier-curve\",\n    \"fas fa-bible\",\n    \"fas fa-bicycle\",\n    \"fas fa-binoculars\",\n    \"fas fa-biohazard\",\n    \"fas fa-birthday-cake\",\n    \"fas fa-blender\",\n    \"fas fa-blender-phone\",\n    \"fas fa-blind\",\n    \"fas fa-blog\",\n    \"fas fa-bold\",\n    \"fas fa-bolt\",\n    \"fas fa-bomb\",\n    \"fas fa-bone\",\n    \"fas fa-bong\",\n    \"fas fa-book\",\n    \"fas fa-book-dead\",\n    \"fas fa-book-open\",\n    \"fas fa-book-reader\",\n    \"fas fa-bookmark\",\n    \"fas fa-bowling-ball\",\n    \"fas fa-box\",\n    \"fas fa-box-open\",\n    \"fas fa-boxes\",\n    \"fas fa-braille\",\n    \"fas fa-brain\",\n    \"fas fa-briefcase\",\n    \"fas fa-briefcase-medical\",\n    \"fas fa-broadcast-tower\",\n    \"fas fa-broom\",\n    \"fas fa-brush\",\n    \"fas fa-bug\",\n    \"fas fa-building\",\n    \"fas fa-bullhorn\",\n    \"fas fa-bullseye\",\n    \"fas fa-burn\",\n    \"fas fa-bus\",\n    \"fas fa-bus-alt\",\n    \"fas fa-business-time\",\n    \"fas fa-calculator\",\n    \"fas fa-calendar\",\n    \"fas fa-calendar-alt\",\n    \"fas fa-calendar-check\",\n    \"fas fa-calendar-day\",\n    \"fas fa-calendar-minus\",\n    \"fas fa-calendar-plus\",\n    \"fas fa-calendar-times\",\n    \"fas fa-calendar-week\",\n    \"fas fa-camera\",\n    \"fas fa-camera-retro\",\n    \"fas fa-campground\",\n    \"fas fa-candy-cane\",\n    \"fas fa-cannabis\",\n    \"fas fa-capsules\",\n    \"fas fa-car\",\n    \"fas fa-car-alt\",\n    \"fas fa-car-battery\",\n    \"fas fa-car-crash\",\n    \"fas fa-car-side\",\n    \"fas fa-caret-down\",\n    \"fas fa-caret-left\",\n    \"fas fa-caret-right\",\n    \"fas fa-caret-square-down\",\n    \"fas fa-caret-square-left\",\n    \"fas fa-caret-square-right\",\n    \"fas fa-caret-square-up\",\n    \"fas fa-caret-up\",\n    \"fas fa-carrot\",\n    \"fas fa-cart-arrow-down\",\n    \"fas fa-cart-plus\",\n    \"fas fa-cash-register\",\n    \"fas fa-cat\",\n    \"fas fa-certificate\",\n    \"fas fa-chair\",\n    \"fas fa-chalkboard\",\n    \"fas fa-chalkboard-teacher\",\n    \"fas fa-charging-station\",\n    \"fas fa-chart-area\",\n    \"fas fa-chart-bar\",\n    \"fas fa-chart-line\",\n    \"fas fa-chart-pie\",\n    \"fas fa-check\",\n    \"fas fa-check-circle\",\n    \"fas fa-check-double\",\n    \"fas fa-check-square\",\n    \"fas fa-chess\",\n    \"fas fa-chess-bishop\",\n    \"fas fa-chess-board\",\n    \"fas fa-chess-king\",\n    \"fas fa-chess-knight\",\n    \"fas fa-chess-pawn\",\n    \"fas fa-chess-queen\",\n    \"fas fa-chess-rook\",\n    \"fas fa-chevron-circle-down\",\n    \"fas fa-chevron-circle-left\",\n    \"fas fa-chevron-circle-right\",\n    \"fas fa-chevron-circle-up\",\n    \"fas fa-chevron-down\",\n    \"fas fa-chevron-left\",\n    \"fas fa-chevron-right\",\n    \"fas fa-chevron-up\",\n    \"fas fa-child\",\n    \"fas fa-church\",\n    \"fas fa-circle\",\n    \"fas fa-circle-notch\",\n    \"fas fa-city\",\n    \"fas fa-clipboard\",\n    \"fas fa-clipboard-check\",\n    \"fas fa-clipboard-list\",\n    \"fas fa-clock\",\n    \"fas fa-clone\",\n    \"fas fa-closed-captioning\",\n    \"fas fa-cloud\",\n    \"fas fa-cloud-download-alt\",\n    \"fas fa-cloud-meatball\",\n    \"fas fa-cloud-moon\",\n    \"fas fa-cloud-moon-rain\",\n    \"fas fa-cloud-rain\",\n    \"fas fa-cloud-showers-heavy\",\n    \"fas fa-cloud-sun\",\n    \"fas fa-cloud-sun-rain\",\n    \"fas fa-cloud-upload-alt\",\n    \"fas fa-cocktail\",\n    \"fas fa-code\",\n    \"fas fa-code-branch\",\n    \"fas fa-coffee\",\n    \"fas fa-cog\",\n    \"fas fa-cogs\",\n    \"fas fa-coins\",\n    \"fas fa-columns\",\n    \"fas fa-comment\",\n    \"fas fa-comment-alt\",\n    \"fas fa-comment-dollar\",\n    \"fas fa-comment-dots\",\n    \"fas fa-comment-slash\",\n    \"fas fa-comments\",\n    \"fas fa-comments-dollar\",\n    \"fas fa-compact-disc\",\n    \"fas fa-compass\",\n    \"fas fa-compress\",\n    \"fas fa-compress-arrows-alt\",\n    \"fas fa-concierge-bell\",\n    \"fas fa-cookie\",\n    \"fas fa-cookie-bite\",\n    \"fas fa-copy\",\n    \"fas fa-copyright\",\n    \"fas fa-couch\",\n    \"fas fa-credit-card\",\n    \"fas fa-crop\",\n    \"fas fa-crop-alt\",\n    \"fas fa-cross\",\n    \"fas fa-crosshairs\",\n    \"fas fa-crow\",\n    \"fas fa-crown\",\n    \"fas fa-cube\",\n    \"fas fa-cubes\",\n    \"fas fa-cut\",\n    \"fas fa-database\",\n    \"fas fa-deaf\",\n    \"fas fa-democrat\",\n    \"fas fa-desktop\",\n    \"fas fa-dharmachakra\",\n    \"fas fa-diagnoses\",\n    \"fas fa-dice\",\n    \"fas fa-dice-d20\",\n    \"fas fa-dice-d6\",\n    \"fas fa-dice-five\",\n    \"fas fa-dice-four\",\n    \"fas fa-dice-one\",\n    \"fas fa-dice-six\",\n    \"fas fa-dice-three\",\n    \"fas fa-dice-two\",\n    \"fas fa-digital-tachograph\",\n    \"fas fa-directions\",\n    \"fas fa-divide\",\n    \"fas fa-dizzy\",\n    \"fas fa-dna\",\n    \"fas fa-dog\",\n    \"fas fa-dollar-sign\",\n    \"fas fa-dolly\",\n    \"fas fa-dolly-flatbed\",\n    \"fas fa-donate\",\n    \"fas fa-door-closed\",\n    \"fas fa-door-open\",\n    \"fas fa-dot-circle\",\n    \"fas fa-dove\",\n    \"fas fa-download\",\n    \"fas fa-drafting-compass\",\n    \"fas fa-dragon\",\n    \"fas fa-draw-polygon\",\n    \"fas fa-drum\",\n    \"fas fa-drum-steelpan\",\n    \"fas fa-drumstick-bite\",\n    \"fas fa-dumbbell\",\n    \"fas fa-dumpster\",\n    \"fas fa-dumpster-fire\",\n    \"fas fa-dungeon\",\n    \"fas fa-edit\",\n    \"fas fa-eject\",\n    \"fas fa-ellipsis-h\",\n    \"fas fa-ellipsis-v\",\n    \"fas fa-envelope\",\n    \"fas fa-envelope-open\",\n    \"fas fa-envelope-open-text\",\n    \"fas fa-envelope-square\",\n    \"fas fa-equals\",\n    \"fas fa-eraser\",\n    \"fas fa-ethernet\",\n    \"fas fa-euro-sign\",\n    \"fas fa-exchange-alt\",\n    \"fas fa-exclamation\",\n    \"fas fa-exclamation-circle\",\n    \"fas fa-exclamation-triangle\",\n    \"fas fa-expand\",\n    \"fas fa-expand-arrows-alt\",\n    \"fas fa-external-link-alt\",\n    \"fas fa-external-link-square-alt\",\n    \"fas fa-eye\",\n    \"fas fa-eye-dropper\",\n    \"fas fa-eye-slash\",\n    \"fas fa-fast-backward\",\n    \"fas fa-fast-forward\",\n    \"fas fa-fax\",\n    \"fas fa-feather\",\n    \"fas fa-feather-alt\",\n    \"fas fa-female\",\n    \"fas fa-fighter-jet\",\n    \"fas fa-file\",\n    \"fas fa-file-alt\",\n    \"fas fa-file-archive\",\n    \"fas fa-file-audio\",\n    \"fas fa-file-code\",\n    \"fas fa-file-contract\",\n    \"fas fa-file-csv\",\n    \"fas fa-file-download\",\n    \"fas fa-file-excel\",\n    \"fas fa-file-export\",\n    \"fas fa-file-image\",\n    \"fas fa-file-import\",\n    \"fas fa-file-invoice\",\n    \"fas fa-file-invoice-dollar\",\n    \"fas fa-file-medical\",\n    \"fas fa-file-medical-alt\",\n    \"fas fa-file-pdf\",\n    \"fas fa-file-powerpoint\",\n    \"fas fa-file-prescription\",\n    \"fas fa-file-signature\",\n    \"fas fa-file-upload\",\n    \"fas fa-file-video\",\n    \"fas fa-file-word\",\n    \"fas fa-fill\",\n    \"fas fa-fill-drip\",\n    \"fas fa-film\",\n    \"fas fa-filter\",\n    \"fas fa-fingerprint\",\n    \"fas fa-fire\",\n    \"fas fa-fire-alt\",\n    \"fas fa-fire-extinguisher\",\n    \"fas fa-first-aid\",\n    \"fas fa-fish\",\n    \"fas fa-fist-raised\",\n    \"fas fa-flag\",\n    \"fas fa-flag-checkered\",\n    \"fas fa-flag-usa\",\n    \"fas fa-flask\",\n    \"fas fa-flushed\",\n    \"fas fa-folder\",\n    \"fas fa-folder-minus\",\n    \"fas fa-folder-open\",\n    \"fas fa-folder-plus\",\n    \"fas fa-font\",\n    \"fas fa-football-ball\",\n    \"fas fa-forward\",\n    \"fas fa-frog\",\n    \"fas fa-frown\",\n    \"fas fa-frown-open\",\n    \"fas fa-funnel-dollar\",\n    \"fas fa-futbol\",\n    \"fas fa-gamepad\",\n    \"fas fa-gas-pump\",\n    \"fas fa-gavel\",\n    \"fas fa-gem\",\n    \"fas fa-genderless\",\n    \"fas fa-ghost\",\n    \"fas fa-gift\",\n    \"fas fa-gifts\",\n    \"fas fa-glass-cheers\",\n    \"fas fa-glass-martini\",\n    \"fas fa-glass-martini-alt\",\n    \"fas fa-glass-whiskey\",\n    \"fas fa-glasses\",\n    \"fas fa-globe\",\n    \"fas fa-globe-africa\",\n    \"fas fa-globe-americas\",\n    \"fas fa-globe-asia\",\n    \"fas fa-globe-europe\",\n    \"fas fa-golf-ball\",\n    \"fas fa-gopuram\",\n    \"fas fa-graduation-cap\",\n    \"fas fa-greater-than\",\n    \"fas fa-greater-than-equal\",\n    \"fas fa-grimace\",\n    \"fas fa-grin\",\n    \"fas fa-grin-alt\",\n    \"fas fa-grin-beam\",\n    \"fas fa-grin-beam-sweat\",\n    \"fas fa-grin-hearts\",\n    \"fas fa-grin-squint\",\n    \"fas fa-grin-squint-tears\",\n    \"fas fa-grin-stars\",\n    \"fas fa-grin-tears\",\n    \"fas fa-grin-tongue\",\n    \"fas fa-grin-tongue-squint\",\n    \"fas fa-grin-tongue-wink\",\n    \"fas fa-grin-wink\",\n    \"fas fa-grip-horizontal\",\n    \"fas fa-grip-lines\",\n    \"fas fa-grip-lines-vertical\",\n    \"fas fa-grip-vertical\",\n    \"fas fa-guitar\",\n    \"fas fa-h-square\",\n    \"fas fa-hammer\",\n    \"fas fa-hamsa\",\n    \"fas fa-hand-holding\",\n    \"fas fa-hand-holding-heart\",\n    \"fas fa-hand-holding-usd\",\n    \"fas fa-hand-lizard\",\n    \"fas fa-hand-paper\",\n    \"fas fa-hand-peace\",\n    \"fas fa-hand-point-down\",\n    \"fas fa-hand-point-left\",\n    \"fas fa-hand-point-right\",\n    \"fas fa-hand-point-up\",\n    \"fas fa-hand-pointer\",\n    \"fas fa-hand-rock\",\n    \"fas fa-hand-scissors\",\n    \"fas fa-hand-spock\",\n    \"fas fa-hands\",\n    \"fas fa-hands-helping\",\n    \"fas fa-handshake\",\n    \"fas fa-hanukiah\",\n    \"fas fa-hashtag\",\n    \"fas fa-hat-wizard\",\n    \"fas fa-haykal\",\n    \"fas fa-hdd\",\n    \"fas fa-heading\",\n    \"fas fa-headphones\",\n    \"fas fa-headphones-alt\",\n    \"fas fa-headset\",\n    \"fas fa-heart\",\n    \"fas fa-heart-broken\",\n    \"fas fa-heartbeat\",\n    \"fas fa-helicopter\",\n    \"fas fa-highlighter\",\n    \"fas fa-hiking\",\n    \"fas fa-hippo\",\n    \"fas fa-history\",\n    \"fas fa-hockey-puck\",\n    \"fas fa-holly-berry\",\n    \"fas fa-home\",\n    \"fas fa-horse\",\n    \"fas fa-horse-head\",\n    \"fas fa-hospital\",\n    \"fas fa-hospital-alt\",\n    \"fas fa-hospital-symbol\",\n    \"fas fa-hot-tub\",\n    \"fas fa-hotel\",\n    \"fas fa-hourglass\",\n    \"fas fa-hourglass-end\",\n    \"fas fa-hourglass-half\",\n    \"fas fa-hourglass-start\",\n    \"fas fa-house-damage\",\n    \"fas fa-hryvnia\",\n    \"fas fa-i-cursor\",\n    \"fas fa-icicles\",\n    \"fas fa-id-badge\",\n    \"fas fa-id-card\",\n    \"fas fa-id-card-alt\",\n    \"fas fa-igloo\",\n    \"fas fa-image\",\n    \"fas fa-images\",\n    \"fas fa-inbox\",\n    \"fas fa-indent\",\n    \"fas fa-industry\",\n    \"fas fa-infinity\",\n    \"fas fa-info\",\n    \"fas fa-info-circle\",\n    \"fas fa-italic\",\n    \"fas fa-jedi\",\n    \"fas fa-joint\",\n    \"fas fa-journal-whills\",\n    \"fas fa-kaaba\",\n    \"fas fa-key\",\n    \"fas fa-keyboard\",\n    \"fas fa-khanda\",\n    \"fas fa-kiss\",\n    \"fas fa-kiss-beam\",\n    \"fas fa-kiss-wink-heart\",\n    \"fas fa-kiwi-bird\",\n    \"fas fa-landmark\",\n    \"fas fa-language\",\n    \"fas fa-laptop\",\n    \"fas fa-laptop-code\",\n    \"fas fa-laugh\",\n    \"fas fa-laugh-beam\",\n    \"fas fa-laugh-squint\",\n    \"fas fa-laugh-wink\",\n    \"fas fa-layer-group\",\n    \"fas fa-leaf\",\n    \"fas fa-lemon\",\n    \"fas fa-less-than\",\n    \"fas fa-less-than-equal\",\n    \"fas fa-level-down-alt\",\n    \"fas fa-level-up-alt\",\n    \"fas fa-life-ring\",\n    \"fas fa-lightbulb\",\n    \"fas fa-link\",\n    \"fas fa-lira-sign\",\n    \"fas fa-list\",\n    \"fas fa-list-alt\",\n    \"fas fa-list-ol\",\n    \"fas fa-list-ul\",\n    \"fas fa-location-arrow\",\n    \"fas fa-lock\",\n    \"fas fa-lock-open\",\n    \"fas fa-long-arrow-alt-down\",\n    \"fas fa-long-arrow-alt-left\",\n    \"fas fa-long-arrow-alt-right\",\n    \"fas fa-long-arrow-alt-up\",\n    \"fas fa-low-vision\",\n    \"fas fa-luggage-cart\",\n    \"fas fa-magic\",\n    \"fas fa-magnet\",\n    \"fas fa-mail-bulk\",\n    \"fas fa-male\",\n    \"fas fa-map\",\n    \"fas fa-map-marked\",\n    \"fas fa-map-marked-alt\",\n    \"fas fa-map-marker\",\n    \"fas fa-map-marker-alt\",\n    \"fas fa-map-pin\",\n    \"fas fa-map-signs\",\n    \"fas fa-marker\",\n    \"fas fa-mars\",\n    \"fas fa-mars-double\",\n    \"fas fa-mars-stroke\",\n    \"fas fa-mars-stroke-h\",\n    \"fas fa-mars-stroke-v\",\n    \"fas fa-mask\",\n    \"fas fa-medal\",\n    \"fas fa-medkit\",\n    \"fas fa-meh\",\n    \"fas fa-meh-blank\",\n    \"fas fa-meh-rolling-eyes\",\n    \"fas fa-memory\",\n    \"fas fa-menorah\",\n    \"fas fa-mercury\",\n    \"fas fa-meteor\",\n    \"fas fa-microchip\",\n    \"fas fa-microphone\",\n    \"fas fa-microphone-alt\",\n    \"fas fa-microphone-alt-slash\",\n    \"fas fa-microphone-slash\",\n    \"fas fa-microscope\",\n    \"fas fa-minus\",\n    \"fas fa-minus-circle\",\n    \"fas fa-minus-square\",\n    \"fas fa-mitten\",\n    \"fas fa-mobile\",\n    \"fas fa-mobile-alt\",\n    \"fas fa-money-bill\",\n    \"fas fa-money-bill-alt\",\n    \"fas fa-money-bill-wave\",\n    \"fas fa-money-bill-wave-alt\",\n    \"fas fa-money-check\",\n    \"fas fa-money-check-alt\",\n    \"fas fa-monument\",\n    \"fas fa-moon\",\n    \"fas fa-mortar-pestle\",\n    \"fas fa-mosque\",\n    \"fas fa-motorcycle\",\n    \"fas fa-mountain\",\n    \"fas fa-mouse-pointer\",\n    \"fas fa-mug-hot\",\n    \"fas fa-music\",\n    \"fas fa-network-wired\",\n    \"fas fa-neuter\",\n    \"fas fa-newspaper\",\n    \"fas fa-not-equal\",\n    \"fas fa-notes-medical\",\n    \"fas fa-object-group\",\n    \"fas fa-object-ungroup\",\n    \"fas fa-oil-can\",\n    \"fas fa-om\",\n    \"fas fa-otter\",\n    \"fas fa-outdent\",\n    \"fas fa-paint-brush\",\n    \"fas fa-paint-roller\",\n    \"fas fa-palette\",\n    \"fas fa-pallet\",\n    \"fas fa-paper-plane\",\n    \"fas fa-paperclip\",\n    \"fas fa-parachute-box\",\n    \"fas fa-paragraph\",\n    \"fas fa-parking\",\n    \"fas fa-passport\",\n    \"fas fa-pastafarianism\",\n    \"fas fa-paste\",\n    \"fas fa-pause\",\n    \"fas fa-pause-circle\",\n    \"fas fa-paw\",\n    \"fas fa-peace\",\n    \"fas fa-pen\",\n    \"fas fa-pen-alt\",\n    \"fas fa-pen-fancy\",\n    \"fas fa-pen-nib\",\n    \"fas fa-pen-square\",\n    \"fas fa-pencil-alt\",\n    \"fas fa-pencil-ruler\",\n    \"fas fa-people-carry\",\n    \"fas fa-percent\",\n    \"fas fa-percentage\",\n    \"fas fa-person-booth\",\n    \"fas fa-phone\",\n    \"fas fa-phone-slash\",\n    \"fas fa-phone-square\",\n    \"fas fa-phone-volume\",\n    \"fas fa-piggy-bank\",\n    \"fas fa-pills\",\n    \"fas fa-place-of-worship\",\n    \"fas fa-plane\",\n    \"fas fa-plane-arrival\",\n    \"fas fa-plane-departure\",\n    \"fas fa-play\",\n    \"fas fa-play-circle\",\n    \"fas fa-plug\",\n    \"fas fa-plus\",\n    \"fas fa-plus-circle\",\n    \"fas fa-plus-square\",\n    \"fas fa-podcast\",\n    \"fas fa-poll\",\n    \"fas fa-poll-h\",\n    \"fas fa-poo\",\n    \"fas fa-poo-storm\",\n    \"fas fa-poop\",\n    \"fas fa-portrait\",\n    \"fas fa-pound-sign\",\n    \"fas fa-power-off\",\n    \"fas fa-pray\",\n    \"fas fa-praying-hands\",\n    \"fas fa-prescription\",\n    \"fas fa-prescription-bottle\",\n    \"fas fa-prescription-bottle-alt\",\n    \"fas fa-print\",\n    \"fas fa-procedures\",\n    \"fas fa-project-diagram\",\n    \"fas fa-puzzle-piece\",\n    \"fas fa-qrcode\",\n    \"fas fa-question\",\n    \"fas fa-question-circle\",\n    \"fas fa-quidditch\",\n    \"fas fa-quote-left\",\n    \"fas fa-quote-right\",\n    \"fas fa-quran\",\n    \"fas fa-radiation\",\n    \"fas fa-radiation-alt\",\n    \"fas fa-rainbow\",\n    \"fas fa-random\",\n    \"fas fa-receipt\",\n    \"fas fa-recycle\",\n    \"fas fa-redo\",\n    \"fas fa-redo-alt\",\n    \"fas fa-registered\",\n    \"fas fa-reply\",\n    \"fas fa-reply-all\",\n    \"fas fa-republican\",\n    \"fas fa-restroom\",\n    \"fas fa-retweet\",\n    \"fas fa-ribbon\",\n    \"fas fa-ring\",\n    \"fas fa-road\",\n    \"fas fa-robot\",\n    \"fas fa-rocket\",\n    \"fas fa-route\",\n    \"fas fa-rss\",\n    \"fas fa-rss-square\",\n    \"fas fa-ruble-sign\",\n    \"fas fa-ruler\",\n    \"fas fa-ruler-combined\",\n    \"fas fa-ruler-horizontal\",\n    \"fas fa-ruler-vertical\",\n    \"fas fa-running\",\n    \"fas fa-rupee-sign\",\n    \"fas fa-sad-cry\",\n    \"fas fa-sad-tear\",\n    \"fas fa-satellite\",\n    \"fas fa-satellite-dish\",\n    \"fas fa-save\",\n    \"fas fa-school\",\n    \"fas fa-screwdriver\",\n    \"fas fa-scroll\",\n    \"fas fa-sd-card\",\n    \"fas fa-search\",\n    \"fas fa-search-dollar\",\n    \"fas fa-search-location\",\n    \"fas fa-search-minus\",\n    \"fas fa-search-plus\",\n    \"fas fa-seedling\",\n    \"fas fa-server\",\n    \"fas fa-shapes\",\n    \"fas fa-share\",\n    \"fas fa-share-alt\",\n    \"fas fa-share-alt-square\",\n    \"fas fa-share-square\",\n    \"fas fa-shekel-sign\",\n    \"fas fa-shield-alt\",\n    \"fas fa-ship\",\n    \"fas fa-shipping-fast\",\n    \"fas fa-shoe-prints\",\n    \"fas fa-shopping-bag\",\n    \"fas fa-shopping-basket\",\n    \"fas fa-shopping-cart\",\n    \"fas fa-shower\",\n    \"fas fa-shuttle-van\",\n    \"fas fa-sign\",\n    \"fas fa-sign-in-alt\",\n    \"fas fa-sign-language\",\n    \"fas fa-sign-out-alt\",\n    \"fas fa-signal\",\n    \"fas fa-signature\",\n    \"fas fa-sim-card\",\n    \"fas fa-sitemap\",\n    \"fas fa-skating\",\n    \"fas fa-skiing\",\n    \"fas fa-skiing-nordic\",\n    \"fas fa-skull\",\n    \"fas fa-skull-crossbones\",\n    \"fas fa-slash\",\n    \"fas fa-sleigh\",\n    \"fas fa-sliders-h\",\n    \"fas fa-smile\",\n    \"fas fa-smile-beam\",\n    \"fas fa-smile-wink\",\n    \"fas fa-smog\",\n    \"fas fa-smoking\",\n    \"fas fa-smoking-ban\",\n    \"fas fa-sms\",\n    \"fas fa-snowboarding\",\n    \"fas fa-snowflake\",\n    \"fas fa-snowman\",\n    \"fas fa-snowplow\",\n    \"fas fa-socks\",\n    \"fas fa-solar-panel\",\n    \"fas fa-sort\",\n    \"fas fa-sort-alpha-down\",\n    \"fas fa-sort-alpha-up\",\n    \"fas fa-sort-amount-down\",\n    \"fas fa-sort-amount-up\",\n    \"fas fa-sort-down\",\n    \"fas fa-sort-numeric-down\",\n    \"fas fa-sort-numeric-up\",\n    \"fas fa-sort-up\",\n    \"fas fa-spa\",\n    \"fas fa-space-shuttle\",\n    \"fas fa-spider\",\n    \"fas fa-spinner\",\n    \"fas fa-splotch\",\n    \"fas fa-spray-can\",\n    \"fas fa-square\",\n    \"fas fa-square-full\",\n    \"fas fa-square-root-alt\",\n    \"fas fa-stamp\",\n    \"fas fa-star\",\n    \"fas fa-star-and-crescent\",\n    \"fas fa-star-half\",\n    \"fas fa-star-half-alt\",\n    \"fas fa-star-of-david\",\n    \"fas fa-star-of-life\",\n    \"fas fa-step-backward\",\n    \"fas fa-step-forward\",\n    \"fas fa-stethoscope\",\n    \"fas fa-sticky-note\",\n    \"fas fa-stop\",\n    \"fas fa-stop-circle\",\n    \"fas fa-stopwatch\",\n    \"fas fa-store\",\n    \"fas fa-store-alt\",\n    \"fas fa-stream\",\n    \"fas fa-street-view\",\n    \"fas fa-strikethrough\",\n    \"fas fa-stroopwafel\",\n    \"fas fa-subscript\",\n    \"fas fa-subway\",\n    \"fas fa-suitcase\",\n    \"fas fa-suitcase-rolling\",\n    \"fas fa-sun\",\n    \"fas fa-superscript\",\n    \"fas fa-surprise\",\n    \"fas fa-swatchbook\",\n    \"fas fa-swimmer\",\n    \"fas fa-swimming-pool\",\n    \"fas fa-synagogue\",\n    \"fas fa-sync\",\n    \"fas fa-sync-alt\",\n    \"fas fa-syringe\",\n    \"fas fa-table\",\n    \"fas fa-table-tennis\",\n    \"fas fa-tablet\",\n    \"fas fa-tablet-alt\",\n    \"fas fa-tablets\",\n    \"fas fa-tachometer-alt\",\n    \"fas fa-tag\",\n    \"fas fa-tags\",\n    \"fas fa-tape\",\n    \"fas fa-tasks\",\n    \"fas fa-taxi\",\n    \"fas fa-teeth\",\n    \"fas fa-teeth-open\",\n    \"fas fa-temperature-high\",\n    \"fas fa-temperature-low\",\n    \"fas fa-tenge\",\n    \"fas fa-terminal\",\n    \"fas fa-text-height\",\n    \"fas fa-text-width\",\n    \"fas fa-th\",\n    \"fas fa-th-large\",\n    \"fas fa-th-list\",\n    \"fas fa-theater-masks\",\n    \"fas fa-thermometer\",\n    \"fas fa-thermometer-empty\",\n    \"fas fa-thermometer-full\",\n    \"fas fa-thermometer-half\",\n    \"fas fa-thermometer-quarter\",\n    \"fas fa-thermometer-three-quarters\",\n    \"fas fa-thumbs-down\",\n    \"fas fa-thumbs-up\",\n    \"fas fa-thumbtack\",\n    \"fas fa-ticket-alt\",\n    \"fas fa-times\",\n    \"fas fa-times-circle\",\n    \"fas fa-tint\",\n    \"fas fa-tint-slash\",\n    \"fas fa-tired\",\n    \"fas fa-toggle-off\",\n    \"fas fa-toggle-on\",\n    \"fas fa-toilet\",\n    \"fas fa-toilet-paper\",\n    \"fas fa-toolbox\",\n    \"fas fa-tools\",\n    \"fas fa-tooth\",\n    \"fas fa-torah\",\n    \"fas fa-torii-gate\",\n    \"fas fa-tractor\",\n    \"fas fa-trademark\",\n    \"fas fa-traffic-light\",\n    \"fas fa-train\",\n    \"fas fa-tram\",\n    \"fas fa-transgender\",\n    \"fas fa-transgender-alt\",\n    \"fas fa-trash\",\n    \"fas fa-trash-alt\",\n    \"fas fa-tree\",\n    \"fas fa-trophy\",\n    \"fas fa-truck\",\n    \"fas fa-truck-loading\",\n    \"fas fa-truck-monster\",\n    \"fas fa-truck-moving\",\n    \"fas fa-truck-pickup\",\n    \"fas fa-tshirt\",\n    \"fas fa-tty\",\n    \"fas fa-tv\",\n    \"fas fa-umbrella\",\n    \"fas fa-umbrella-beach\",\n    \"fas fa-underline\",\n    \"fas fa-undo\",\n    \"fas fa-undo-alt\",\n    \"fas fa-universal-access\",\n    \"fas fa-university\",\n    \"fas fa-unlink\",\n    \"fas fa-unlock\",\n    \"fas fa-unlock-alt\",\n    \"fas fa-upload\",\n    \"fas fa-user\",\n    \"fas fa-user-alt\",\n    \"fas fa-user-alt-slash\",\n    \"fas fa-user-astronaut\",\n    \"fas fa-user-check\",\n    \"fas fa-user-circle\",\n    \"fas fa-user-clock\",\n    \"fas fa-user-cog\",\n    \"fas fa-user-edit\",\n    \"fas fa-user-friends\",\n    \"fas fa-user-graduate\",\n    \"fas fa-user-injured\",\n    \"fas fa-user-lock\",\n    \"fas fa-user-md\",\n    \"fas fa-user-minus\",\n    \"fas fa-user-ninja\",\n    \"fas fa-user-plus\",\n    \"fas fa-user-secret\",\n    \"fas fa-user-shield\",\n    \"fas fa-user-slash\",\n    \"fas fa-user-tag\",\n    \"fas fa-user-tie\",\n    \"fas fa-user-times\",\n    \"fas fa-users\",\n    \"fas fa-users-cog\",\n    \"fas fa-utensil-spoon\",\n    \"fas fa-utensils\",\n    \"fas fa-vector-square\",\n    \"fas fa-venus\",\n    \"fas fa-venus-double\",\n    \"fas fa-venus-mars\",\n    \"fas fa-vial\",\n    \"fas fa-vials\",\n    \"fas fa-video\",\n    \"fas fa-video-slash\",\n    \"fas fa-vihara\",\n    \"fas fa-volleyball-ball\",\n    \"fas fa-volume-down\",\n    \"fas fa-volume-mute\",\n    \"fas fa-volume-off\",\n    \"fas fa-volume-up\",\n    \"fas fa-vote-yea\",\n    \"fas fa-vr-cardboard\",\n    \"fas fa-walking\",\n    \"fas fa-wallet\",\n    \"fas fa-warehouse\",\n    \"fas fa-water\",\n    \"fas fa-weight\",\n    \"fas fa-weight-hanging\",\n    \"fas fa-wheelchair\",\n    \"fas fa-wifi\",\n    \"fas fa-wind\",\n    \"fas fa-window-close\",\n    \"fas fa-window-maximize\",\n    \"fas fa-window-minimize\",\n    \"fas fa-window-restore\",\n    \"fas fa-wine-bottle\",\n    \"fas fa-wine-glass\",\n    \"fas fa-wine-glass-alt\",\n    \"fas fa-won-sign\",\n    \"fas fa-wrench\",\n    \"fas fa-x-ray\",\n    \"fas fa-yen-sign\",\n    \"fas fa-yin-yang\",\n    \"far fa-address-book\",\n    \"far fa-address-card\",\n    \"far fa-angry\",\n    \"far fa-arrow-alt-circle-down\",\n    \"far fa-arrow-alt-circle-left\",\n    \"far fa-arrow-alt-circle-right\",\n    \"far fa-arrow-alt-circle-up\",\n    \"far fa-bell\",\n    \"far fa-bell-slash\",\n    \"far fa-bookmark\",\n    \"far fa-building\",\n    \"far fa-calendar\",\n    \"far fa-calendar-alt\",\n    \"far fa-calendar-check\",\n    \"far fa-calendar-minus\",\n    \"far fa-calendar-plus\",\n    \"far fa-calendar-times\",\n    \"far fa-caret-square-down\",\n    \"far fa-caret-square-left\",\n    \"far fa-caret-square-right\",\n    \"far fa-caret-square-up\",\n    \"far fa-chart-bar\",\n    \"far fa-check-circle\",\n    \"far fa-check-square\",\n    \"far fa-circle\",\n    \"far fa-clipboard\",\n    \"far fa-clock\",\n    \"far fa-clone\",\n    \"far fa-closed-captioning\",\n    \"far fa-comment\",\n    \"far fa-comment-alt\",\n    \"far fa-comment-dots\",\n    \"far fa-comments\",\n    \"far fa-compass\",\n    \"far fa-copy\",\n    \"far fa-copyright\",\n    \"far fa-credit-card\",\n    \"far fa-dizzy\",\n    \"far fa-dot-circle\",\n    \"far fa-edit\",\n    \"far fa-envelope\",\n    \"far fa-envelope-open\",\n    \"far fa-eye\",\n    \"far fa-eye-slash\",\n    \"far fa-file\",\n    \"far fa-file-alt\",\n    \"far fa-file-archive\",\n    \"far fa-file-audio\",\n    \"far fa-file-code\",\n    \"far fa-file-excel\",\n    \"far fa-file-image\",\n    \"far fa-file-pdf\",\n    \"far fa-file-powerpoint\",\n    \"far fa-file-video\",\n    \"far fa-file-word\",\n    \"far fa-flag\",\n    \"far fa-flushed\",\n    \"far fa-folder\",\n    \"far fa-folder-open\",\n    \"far fa-frown\",\n    \"far fa-frown-open\",\n    \"far fa-futbol\",\n    \"far fa-gem\",\n    \"far fa-grimace\",\n    \"far fa-grin\",\n    \"far fa-grin-alt\",\n    \"far fa-grin-beam\",\n    \"far fa-grin-beam-sweat\",\n    \"far fa-grin-hearts\",\n    \"far fa-grin-squint\",\n    \"far fa-grin-squint-tears\",\n    \"far fa-grin-stars\",\n    \"far fa-grin-tears\",\n    \"far fa-grin-tongue\",\n    \"far fa-grin-tongue-squint\",\n    \"far fa-grin-tongue-wink\",\n    \"far fa-grin-wink\",\n    \"far fa-hand-lizard\",\n    \"far fa-hand-paper\",\n    \"far fa-hand-peace\",\n    \"far fa-hand-point-down\",\n    \"far fa-hand-point-left\",\n    \"far fa-hand-point-right\",\n    \"far fa-hand-point-up\",\n    \"far fa-hand-pointer\",\n    \"far fa-hand-rock\",\n    \"far fa-hand-scissors\",\n    \"far fa-hand-spock\",\n    \"far fa-handshake\",\n    \"far fa-hdd\",\n    \"far fa-heart\",\n    \"far fa-hospital\",\n    \"far fa-hourglass\",\n    \"far fa-id-badge\",\n    \"far fa-id-card\",\n    \"far fa-image\",\n    \"far fa-images\",\n    \"far fa-keyboard\",\n    \"far fa-kiss\",\n    \"far fa-kiss-beam\",\n    \"far fa-kiss-wink-heart\",\n    \"far fa-laugh\",\n    \"far fa-laugh-beam\",\n    \"far fa-laugh-squint\",\n    \"far fa-laugh-wink\",\n    \"far fa-lemon\",\n    \"far fa-life-ring\",\n    \"far fa-lightbulb\",\n    \"far fa-list-alt\",\n    \"far fa-map\",\n    \"far fa-meh\",\n    \"far fa-meh-blank\",\n    \"far fa-meh-rolling-eyes\",\n    \"far fa-minus-square\",\n    \"far fa-money-bill-alt\",\n    \"far fa-moon\",\n    \"far fa-newspaper\",\n    \"far fa-object-group\",\n    \"far fa-object-ungroup\",\n    \"far fa-paper-plane\",\n    \"far fa-pause-circle\",\n    \"far fa-play-circle\",\n    \"far fa-plus-square\",\n    \"far fa-question-circle\",\n    \"far fa-registered\",\n    \"far fa-sad-cry\",\n    \"far fa-sad-tear\",\n    \"far fa-save\",\n    \"far fa-share-square\",\n    \"far fa-smile\",\n    \"far fa-smile-beam\",\n    \"far fa-smile-wink\",\n    \"far fa-snowflake\",\n    \"far fa-square\",\n    \"far fa-star\",\n    \"far fa-star-half\",\n    \"far fa-sticky-note\",\n    \"far fa-stop-circle\",\n    \"far fa-sun\",\n    \"far fa-surprise\",\n    \"far fa-thumbs-down\",\n    \"far fa-thumbs-up\",\n    \"far fa-times-circle\",\n    \"far fa-tired\",\n    \"far fa-trash-alt\",\n    \"far fa-user\",\n    \"far fa-user-circle\",\n    \"far fa-window-close\",\n    \"far fa-window-maximize\",\n    \"far fa-window-minimize\",\n    \"far fa-window-restore\",\n    \"fab fa-500px\",\n    \"fab fa-accessible-icon\",\n    \"fab fa-accusoft\",\n    \"fab fa-acquisitions-incorporated\",\n    \"fab fa-adn\",\n    \"fab fa-adobe\",\n    \"fab fa-adversal\",\n    \"fab fa-affiliatetheme\",\n    \"fab fa-algolia\",\n    \"fab fa-alipay\",\n    \"fab fa-amazon\",\n    \"fab fa-amazon-pay\",\n    \"fab fa-amilia\",\n    \"fab fa-android\",\n    \"fab fa-angellist\",\n    \"fab fa-angrycreative\",\n    \"fab fa-angular\",\n    \"fab fa-app-store\",\n    \"fab fa-app-store-ios\",\n    \"fab fa-apper\",\n    \"fab fa-apple\",\n    \"fab fa-apple-pay\",\n    \"fab fa-artstation\",\n    \"fab fa-asymmetrik\",\n    \"fab fa-atlassian\",\n    \"fab fa-audible\",\n    \"fab fa-autoprefixer\",\n    \"fab fa-avianex\",\n    \"fab fa-aviato\",\n    \"fab fa-aws\",\n    \"fab fa-bandcamp\",\n    \"fab fa-behance\",\n    \"fab fa-behance-square\",\n    \"fab fa-bimobject\",\n    \"fab fa-bitbucket\",\n    \"fab fa-bitcoin\",\n    \"fab fa-bity\",\n    \"fab fa-black-tie\",\n    \"fab fa-blackberry\",\n    \"fab fa-blogger\",\n    \"fab fa-blogger-b\",\n    \"fab fa-bluetooth\",\n    \"fab fa-bluetooth-b\",\n    \"fab fa-btc\",\n    \"fab fa-buromobelexperte\",\n    \"fab fa-buysellads\",\n    \"fab fa-canadian-maple-leaf\",\n    \"fab fa-cc-amazon-pay\",\n    \"fab fa-cc-amex\",\n    \"fab fa-cc-apple-pay\",\n    \"fab fa-cc-diners-club\",\n    \"fab fa-cc-discover\",\n    \"fab fa-cc-jcb\",\n    \"fab fa-cc-mastercard\",\n    \"fab fa-cc-paypal\",\n    \"fab fa-cc-stripe\",\n    \"fab fa-cc-visa\",\n    \"fab fa-centercode\",\n    \"fab fa-centos\",\n    \"fab fa-chrome\",\n    \"fab fa-cloudscale\",\n    \"fab fa-cloudsmith\",\n    \"fab fa-cloudversify\",\n    \"fab fa-codepen\",\n    \"fab fa-codiepie\",\n    \"fab fa-confluence\",\n    \"fab fa-connectdevelop\",\n    \"fab fa-contao\",\n    \"fab fa-cpanel\",\n    \"fab fa-creative-commons\",\n    \"fab fa-creative-commons-by\",\n    \"fab fa-creative-commons-nc\",\n    \"fab fa-creative-commons-nc-eu\",\n    \"fab fa-creative-commons-nc-jp\",\n    \"fab fa-creative-commons-nd\",\n    \"fab fa-creative-commons-pd\",\n    \"fab fa-creative-commons-pd-alt\",\n    \"fab fa-creative-commons-remix\",\n    \"fab fa-creative-commons-sa\",\n    \"fab fa-creative-commons-sampling\",\n    \"fab fa-creative-commons-sampling-plus\",\n    \"fab fa-creative-commons-share\",\n    \"fab fa-creative-commons-zero\",\n    \"fab fa-critical-role\",\n    \"fab fa-css3\",\n    \"fab fa-css3-alt\",\n    \"fab fa-cuttlefish\",\n    \"fab fa-d-and-d\",\n    \"fab fa-d-and-d-beyond\",\n    \"fab fa-dashcube\",\n    \"fab fa-delicious\",\n    \"fab fa-deploydog\",\n    \"fab fa-deskpro\",\n    \"fab fa-dev\",\n    \"fab fa-deviantart\",\n    \"fab fa-dhl\",\n    \"fab fa-diaspora\",\n    \"fab fa-digg\",\n    \"fab fa-digital-ocean\",\n    \"fab fa-discord\",\n    \"fab fa-discourse\",\n    \"fab fa-dochub\",\n    \"fab fa-docker\",\n    \"fab fa-draft2digital\",\n    \"fab fa-dribbble\",\n    \"fab fa-dribbble-square\",\n    \"fab fa-dropbox\",\n    \"fab fa-drupal\",\n    \"fab fa-dyalog\",\n    \"fab fa-earlybirds\",\n    \"fab fa-ebay\",\n    \"fab fa-edge\",\n    \"fab fa-elementor\",\n    \"fab fa-ello\",\n    \"fab fa-ember\",\n    \"fab fa-empire\",\n    \"fab fa-envira\",\n    \"fab fa-erlang\",\n    \"fab fa-ethereum\",\n    \"fab fa-etsy\",\n    \"fab fa-expeditedssl\",\n    \"fab fa-facebook\",\n    \"fab fa-facebook-f\",\n    \"fab fa-facebook-messenger\",\n    \"fab fa-facebook-square\",\n    \"fab fa-fantasy-flight-games\",\n    \"fab fa-fedex\",\n    \"fab fa-fedora\",\n    \"fab fa-figma\",\n    \"fab fa-firefox\",\n    \"fab fa-first-order\",\n    \"fab fa-first-order-alt\",\n    \"fab fa-firstdraft\",\n    \"fab fa-flickr\",\n    \"fab fa-flipboard\",\n    \"fab fa-fly\",\n    \"fab fa-font-awesome\",\n    \"fab fa-font-awesome-alt\",\n    \"fab fa-font-awesome-flag\",\n    \"fab fa-fonticons\",\n    \"fab fa-fonticons-fi\",\n    \"fab fa-fort-awesome\",\n    \"fab fa-fort-awesome-alt\",\n    \"fab fa-forumbee\",\n    \"fab fa-foursquare\",\n    \"fab fa-free-code-camp\",\n    \"fab fa-freebsd\",\n    \"fab fa-fulcrum\",\n    \"fab fa-galactic-republic\",\n    \"fab fa-galactic-senate\",\n    \"fab fa-get-pocket\",\n    \"fab fa-gg\",\n    \"fab fa-gg-circle\",\n    \"fab fa-git\",\n    \"fab fa-git-square\",\n    \"fab fa-github\",\n    \"fab fa-github-alt\",\n    \"fab fa-github-square\",\n    \"fab fa-gitkraken\",\n    \"fab fa-gitlab\",\n    \"fab fa-gitter\",\n    \"fab fa-glide\",\n    \"fab fa-glide-g\",\n    \"fab fa-gofore\",\n    \"fab fa-goodreads\",\n    \"fab fa-goodreads-g\",\n    \"fab fa-google\",\n    \"fab fa-google-drive\",\n    \"fab fa-google-play\",\n    \"fab fa-google-plus\",\n    \"fab fa-google-plus-g\",\n    \"fab fa-google-plus-square\",\n    \"fab fa-google-wallet\",\n    \"fab fa-gratipay\",\n    \"fab fa-grav\",\n    \"fab fa-gripfire\",\n    \"fab fa-grunt\",\n    \"fab fa-gulp\",\n    \"fab fa-hacker-news\",\n    \"fab fa-hacker-news-square\",\n    \"fab fa-hackerrank\",\n    \"fab fa-hips\",\n    \"fab fa-hire-a-helper\",\n    \"fab fa-hooli\",\n    \"fab fa-hornbill\",\n    \"fab fa-hotjar\",\n    \"fab fa-houzz\",\n    \"fab fa-html5\",\n    \"fab fa-hubspot\",\n    \"fab fa-imdb\",\n    \"fab fa-instagram\",\n    \"fab fa-intercom\",\n    \"fab fa-internet-explorer\",\n    \"fab fa-invision\",\n    \"fab fa-ioxhost\",\n    \"fab fa-itunes\",\n    \"fab fa-itunes-note\",\n    \"fab fa-java\",\n    \"fab fa-jedi-order\",\n    \"fab fa-jenkins\",\n    \"fab fa-jira\",\n    \"fab fa-joget\",\n    \"fab fa-joomla\",\n    \"fab fa-js\",\n    \"fab fa-js-square\",\n    \"fab fa-jsfiddle\",\n    \"fab fa-kaggle\",\n    \"fab fa-keybase\",\n    \"fab fa-keycdn\",\n    \"fab fa-kickstarter\",\n    \"fab fa-kickstarter-k\",\n    \"fab fa-korvue\",\n    \"fab fa-laravel\",\n    \"fab fa-lastfm\",\n    \"fab fa-lastfm-square\",\n    \"fab fa-leanpub\",\n    \"fab fa-less\",\n    \"fab fa-line\",\n    \"fab fa-linkedin\",\n    \"fab fa-linkedin-in\",\n    \"fab fa-linode\",\n    \"fab fa-linux\",\n    \"fab fa-lyft\",\n    \"fab fa-magento\",\n    \"fab fa-mailchimp\",\n    \"fab fa-mandalorian\",\n    \"fab fa-markdown\",\n    \"fab fa-mastodon\",\n    \"fab fa-maxcdn\",\n    \"fab fa-medapps\",\n    \"fab fa-medium\",\n    \"fab fa-medium-m\",\n    \"fab fa-medrt\",\n    \"fab fa-meetup\",\n    \"fab fa-megaport\",\n    \"fab fa-mendeley\",\n    \"fab fa-microsoft\",\n    \"fab fa-mix\",\n    \"fab fa-mixcloud\",\n    \"fab fa-mizuni\",\n    \"fab fa-modx\",\n    \"fab fa-monero\",\n    \"fab fa-napster\",\n    \"fab fa-neos\",\n    \"fab fa-nimblr\",\n    \"fab fa-nintendo-switch\",\n    \"fab fa-node\",\n    \"fab fa-node-js\",\n    \"fab fa-npm\",\n    \"fab fa-ns8\",\n    \"fab fa-nutritionix\",\n    \"fab fa-odnoklassniki\",\n    \"fab fa-odnoklassniki-square\",\n    \"fab fa-old-republic\",\n    \"fab fa-opencart\",\n    \"fab fa-openid\",\n    \"fab fa-opera\",\n    \"fab fa-optin-monster\",\n    \"fab fa-osi\",\n    \"fab fa-page4\",\n    \"fab fa-pagelines\",\n    \"fab fa-palfed\",\n    \"fab fa-patreon\",\n    \"fab fa-paypal\",\n    \"fab fa-penny-arcade\",\n    \"fab fa-periscope\",\n    \"fab fa-phabricator\",\n    \"fab fa-phoenix-framework\",\n    \"fab fa-phoenix-squadron\",\n    \"fab fa-php\",\n    \"fab fa-pied-piper\",\n    \"fab fa-pied-piper-alt\",\n    \"fab fa-pied-piper-hat\",\n    \"fab fa-pied-piper-pp\",\n    \"fab fa-pinterest\",\n    \"fab fa-pinterest-p\",\n    \"fab fa-pinterest-square\",\n    \"fab fa-playstation\",\n    \"fab fa-product-hunt\",\n    \"fab fa-pushed\",\n    \"fab fa-python\",\n    \"fab fa-qq\",\n    \"fab fa-quinscape\",\n    \"fab fa-quora\",\n    \"fab fa-r-project\",\n    \"fab fa-raspberry-pi\",\n    \"fab fa-ravelry\",\n    \"fab fa-react\",\n    \"fab fa-reacteurope\",\n    \"fab fa-readme\",\n    \"fab fa-rebel\",\n    \"fab fa-red-river\",\n    \"fab fa-reddit\",\n    \"fab fa-reddit-alien\",\n    \"fab fa-reddit-square\",\n    \"fab fa-redhat\",\n    \"fab fa-renren\",\n    \"fab fa-replyd\",\n    \"fab fa-researchgate\",\n    \"fab fa-resolving\",\n    \"fab fa-rev\",\n    \"fab fa-rocketchat\",\n    \"fab fa-rockrms\",\n    \"fab fa-safari\",\n    \"fab fa-sass\",\n    \"fab fa-schlix\",\n    \"fab fa-scribd\",\n    \"fab fa-searchengin\",\n    \"fab fa-sellcast\",\n    \"fab fa-sellsy\",\n    \"fab fa-servicestack\",\n    \"fab fa-shirtsinbulk\",\n    \"fab fa-shopware\",\n    \"fab fa-simplybuilt\",\n    \"fab fa-sistrix\",\n    \"fab fa-sith\",\n    \"fab fa-sketch\",\n    \"fab fa-skyatlas\",\n    \"fab fa-skype\",\n    \"fab fa-slack\",\n    \"fab fa-slack-hash\",\n    \"fab fa-slideshare\",\n    \"fab fa-snapchat\",\n    \"fab fa-snapchat-ghost\",\n    \"fab fa-snapchat-square\",\n    \"fab fa-soundcloud\",\n    \"fab fa-sourcetree\",\n    \"fab fa-speakap\",\n    \"fab fa-spotify\",\n    \"fab fa-squarespace\",\n    \"fab fa-stack-exchange\",\n    \"fab fa-stack-overflow\",\n    \"fab fa-staylinked\",\n    \"fab fa-steam\",\n    \"fab fa-steam-square\",\n    \"fab fa-steam-symbol\",\n    \"fab fa-sticker-mule\",\n    \"fab fa-strava\",\n    \"fab fa-stripe\",\n    \"fab fa-stripe-s\",\n    \"fab fa-studiovinari\",\n    \"fab fa-stumbleupon\",\n    \"fab fa-stumbleupon-circle\",\n    \"fab fa-superpowers\",\n    \"fab fa-supple\",\n    \"fab fa-suse\",\n    \"fab fa-teamspeak\",\n    \"fab fa-telegram\",\n    \"fab fa-telegram-plane\",\n    \"fab fa-tencent-weibo\",\n    \"fab fa-the-red-yeti\",\n    \"fab fa-themeco\",\n    \"fab fa-themeisle\",\n    \"fab fa-think-peaks\",\n    \"fab fa-trade-federation\",\n    \"fab fa-trello\",\n    \"fab fa-tripadvisor\",\n    \"fab fa-tumblr\",\n    \"fab fa-tumblr-square\",\n    \"fab fa-twitch\",\n    \"fab fa-twitter\",\n    \"fab fa-twitter-square\",\n    \"fab fa-typo3\",\n    \"fab fa-uber\",\n    \"fab fa-ubuntu\",\n    \"fab fa-uikit\",\n    \"fab fa-uniregistry\",\n    \"fab fa-untappd\",\n    \"fab fa-ups\",\n    \"fab fa-usb\",\n    \"fab fa-usps\",\n    \"fab fa-ussunnah\",\n    \"fab fa-vaadin\",\n    \"fab fa-viacoin\",\n    \"fab fa-viadeo\",\n    \"fab fa-viadeo-square\",\n    \"fab fa-viber\",\n    \"fab fa-vimeo\",\n    \"fab fa-vimeo-square\",\n    \"fab fa-vimeo-v\",\n    \"fab fa-vine\",\n    \"fab fa-vk\",\n    \"fab fa-vnv\",\n    \"fab fa-vuejs\",\n    \"fab fa-weebly\",\n    \"fab fa-weibo\",\n    \"fab fa-weixin\",\n    \"fab fa-whatsapp\",\n    \"fab fa-whatsapp-square\",\n    \"fab fa-whmcs\",\n    \"fab fa-wikipedia-w\",\n    \"fab fa-windows\",\n    \"fab fa-wix\",\n    \"fab fa-wizards-of-the-coast\",\n    \"fab fa-wolf-pack-battalion\",\n    \"fab fa-wordpress\",\n    \"fab fa-wordpress-simple\",\n    \"fab fa-wpbeginner\",\n    \"fab fa-wpexplorer\",\n    \"fab fa-wpforms\",\n    \"fab fa-wpressr\",\n    \"fab fa-xbox\",\n    \"fab fa-xing\",\n    \"fab fa-xing-square\",\n    \"fab fa-y-combinator\",\n    \"fab fa-yahoo\",\n    \"fab fa-yandex\",\n    \"fab fa-yandex-international\",\n    \"fab fa-yarn\",\n    \"fab fa-yelp\",\n    \"fab fa-yoast\",\n    \"fab fa-youtube\",\n    \"fab fa-youtube-square\",\n    \"fab fa-zhihu\",\n];\nexport default icons_;","import \"./editor.scss\";","import { decodeEntities } from \"@wordpress/html-entities\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst { apiFetch } = wp;\n\n/**\n * this api setting for post\n */\n\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const postDataInit = (data = {}) => {\n  let sendData = data;\n  return apiFetch({\n    path: \"/unlimited-blocks-post-api/v3/posts/\",\n    method: \"POST\",\n    data: sendData,\n  })\n    .then((postsData) => {\n      return postsData;\n    })\n    .catch((error) => console.error(error));\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const filterPostInit = async (this_, data_ = {}) => {\n  let argData = data_;\n  //number of post\n  if (!(\"numberOfPosts\" in argData)) {\n    argData[\"numberOfPosts\"] = this_.props.attributes.numberOfPosts;\n  }\n  // choose category\n  let categoryIes =\n    \"postCategories\" in argData\n      ? argData.postCategories\n      : this_.props.attributes.postCategories;\n  if (categoryIes) {\n    argData[\"postCategories\"] = categoryIes.join(\",\");\n  }\n  // featured image\n  if (\"featured_image\" in argData && argData.featured_image == \"1\") {\n    argData[\"featured_image\"] = 1;\n  }\n  let postData = await postDataInit(argData);\n  if (postData) {\n    // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const firstTimeInit = async (this_, data_ = {}) => {\n  let { numberOfPosts, postCategories } = this_.props.attributes;\n  let sendData = {\n    initialize: 1,\n    numberOfPosts: numberOfPosts,\n  };\n  // featured image\n  if (\"featured_image\" in data_) {\n    sendData[\"featured_image\"] = 1;\n  }\n  // choose category\n  if (postCategories) {\n    sendData[\"postCategories\"] = postCategories.join(\",\");\n  }\n  let postData = await postDataInit(sendData);\n  if (postData) {\n    // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    //all categories\n    if (\"category\" in postData && postData.category != \"\") {\n      let category_ = postData.category;\n      if (category_ instanceof Object && Object.keys(category_).length) {\n        let setobjasArray = [];\n        for (let objKey in category_) {\n          setobjasArray.push(category_[objKey]);\n        }\n        this_.setState({ category: setobjasArray });\n      } else {\n        this_.setState({ category: category_ });\n      }\n    } else {\n      this_.setState({ category: null });\n    }\n    //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const categoryList = (category) => {\n  if (\n    (category && category.length) ||\n    (category instanceof Object && Object.keys(category).length)\n  ) {\n    let cateGory = [{ value: \"all\", label: __(\"All\", \"unlimited-blocks\") }];\n    if (category && category.length) {\n      category.map((catt) => {\n        let cate_Items = {\n          value: catt.slug,\n          label: catt.name,\n        };\n        cateGory.push(cate_Items);\n      });\n    } else if (category instanceof Object && Object.keys(category).length) {\n      for (let keys_ in category) {\n        let cate_Items = {\n          value: category[keys_].slug,\n          label: category[keys_].name,\n        };\n        cateGory.push(cate_Items);\n      }\n    }\n    return cateGory;\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const excerptWords = (words, words_) => {\n  words_ = decodeEntities(words_);\n  words_ = words_.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  words_ = words_.split(\" \");\n  words_ = words_.slice(0, words);\n  words_ = words_.join(\" \");\n  // words_ = decodeEntities(words_);\n  return words_;\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const showCateFn = (this_props, categories, cate_) => {\n  if (categories && categories instanceof Array && categories.length > 0) {\n    let copiedCate = [...categories];\n    let countCate = cate_.count;\n    if (countCate < copiedCate.length) {\n      let filterChoosen = this_props.attributes.postCategories;\n      if (\n        filterChoosen.length > 0 &&\n        filterChoosen.length < copiedCate.length\n      ) {\n        filterChoosen.map((cateSlug) => {\n          let getIndex = copiedCate.findIndex((slug_) => {\n            if (slug_ && \"slug\" in slug_) {\n              return slug_.slug == cateSlug;\n            }\n          });\n          if (getIndex && getIndex + 1 > countCate) {\n            delete copiedCate[getIndex];\n            copiedCate.unshift({ name: cateSlug });\n          }\n        });\n      }\n    }\n    let putCateStyle = { fontSize: cate_.fontSize + \"px\" };\n    if (cate_.customColor) {\n      putCateStyle[\"color\"] = cate_.color;\n      putCateStyle[\"backgroundColor\"] = cate_.backgroundColor;\n    }\n    copiedCate.splice(countCate);\n    return copiedCate.map((returnH) => (\n      <span style={putCateStyle}>{returnH.name}</span>\n    ));\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const showTagsFn = (tags_, tag_r) => {\n  if (tags_ && tags_ instanceof Array && tags_.length) {\n    let putTagStyle = { color: tag_r.color };\n    putTagStyle[\"color\"] = tag_r.color;\n    putTagStyle[\"backgroundColor\"] = tag_r.backgroundColor;\n    putTagStyle[\"fontSize\"] = tag_r.fontSize + \"px\";\n    let countTag = tag_r.count;\n    let tagCopied = [...tags_];\n    tagCopied.splice(countTag);\n    return tagCopied.map((returnH) => (\n      <span style={putTagStyle}>{returnH.name}</span>\n    ));\n  }\n};\n\n/**\n * this api setting for post end ---------------------------------------------------\n */\n\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const PostLoader = ({ msg }) => {\n  msg = msg\n    ? __(msg, \"unlimited-blocks\")\n    : __(\"Post Loading...\", \"unlimited-blocks\");\n  return (\n    <div className=\"post-loader\">\n      <div className=\"active linear-bubble ubl-block-loader\">\n        {msg}\n        <div>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  );\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\n\nexport const PostNotfound = ({ msg }) => {\n  msg = msg\n    ? __(msg, \"unlimited-blocks\")\n    : __(\"No Post Found\", \"unlimited-blocks\");\n  return (\n    <div className=\"no-post-found\">\n      <p>{msg}</p>\n    </div>\n  );\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const UBLGraDientColors = [\n  {\n    name: __(\"ubl color 1\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(6, 147, 227) 0%, rgb(155, 81, 224) 100%)\",\n  },\n  {\n    name: __(\"ubl color 2\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%)\",\n  },\n  {\n    name: __(\"ubl color 3\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%)\",\n  },\n  {\n    name: __(\"ubl color 4\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%)\",\n  },\n  {\n    name: __(\"Vivid cyan blue to vivid purple\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)\",\n  },\n  {\n    name: __(\"Vivid green cyan to vivid cyan blue\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)\",\n  },\n  {\n    name: __(\"Light green cyan to vivid green cyan\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)\",\n  },\n  {\n    name: __(\n      \"Luminous vivid amber to luminous vivid orange\",\n      \"unlimited-blocks\"\n    ),\n    gradient:\n      \"linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)\",\n  },\n  {\n    name: __(\"Luminous vivid orange to vivid red\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)\",\n  },\n  // new added\n  {\n    name: __(\"ubl color 6\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%)\",\n  },\n\n  {\n    name: __(\"ubl color 7\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(180deg, #2AF598 0%, #009EFD 100%)\",\n  },\n  {\n    name: __(\"ubl color 8\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #F43B47 0%, #453A94 100%)\",\n  },\n  {\n    name: __(\"ubl color 10\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #CC208E 0%, #6713D2 100%)\",\n  },\n\n  {\n    name: __(\"ubl color 11\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient( 67.2deg,  rgba(37,208,199,1) -7.5%, rgba(165,90,240,1) 62.7% )\",\n  },\n  {\n    name: __(\"ubl color 12\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(to top, #E6E9F0 0%, #EEF1F5 100%)\",\n  },\n  {\n    name: __(\"ubl color 13\", \"unlimited-blocks\"),\n    gradient: \"linear-gradient(19deg, #21D4FD 0%, #B721FF 100%)\",\n  },\n  {\n    name: __(\"ubl color 14\", \"unlimited-blocks\"),\n    gradient:\n      \"linear-gradient(to right top, #051937, #004D7A, #008793, #00BF72, #A8EB12)\",\n  },\n];\n\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const UblColorPlates = [\n  { name: \"Color: Black\", color: \"rgb(0, 0, 0)\" },\n\n  { name: \"Color: Cyan bluish gray\", color: \"rgb(171, 184, 195)\" },\n\n  { name: \"Color: White\", color: \"rgb(255, 255, 255)\" },\n\n  { name: \"Color: Pale pink\", color: \"rgb(247, 141, 167)\" },\n\n  { name: \"Color: Vivid red\", color: \"rgb(207, 46, 46)\" },\n\n  { name: \"Color: Luminous vivid orange\", color: \"rgb(255, 105, 0)\" },\n\n  { name: \"Color: Luminous vivid amber\", color: \"rgb(252, 185, 0)\" },\n\n  { name: \"Color: Light green cyan\", color: \"rgb(123, 220, 181)\" },\n\n  { name: \"Color: Vivid green cyan\", color: \"rgb(0, 208, 132)\" },\n\n  { name: \"Color: Pale cyan blue\", color: \"rgb(142, 209, 252)\" },\n\n  { name: \"Color: Vivid cyan blue\", color: \"rgb(6, 147, 227)\" },\n\n  { name: \"Color: Vivid purple\", color: \"rgb(155, 81, 224)\" },\n];\n","const BasicToggleNav = (props) => {\n  const { navItem, clickme, value, wrapperClass } = props;\n  if (navItem) {\n    let default_class = \"ul-top-nav\";\n    if (wrapperClass) {\n      default_class = default_class.concat(\" \", wrapperClass);\n    }\n    return (\n      <div className={default_class}>\n        {navItem.map((nav_val, key_) => {\n          return (\n            <div\n              key={key_}\n              onClick={() => {\n                if (nav_val.name != value) {\n                  clickme(nav_val.name);\n                }\n              }}\n              className={value == nav_val.name ? \"active\" : null}\n            >\n              {nav_val.icon && (\n                <span className=\"icon_\">\n                  {<span className={nav_val.icon}></span>}\n                </span>\n              )}\n              <span className=\"title_\">\n                {nav_val.title}\n                {/* {__(nav_val.title, \"unlimited-blocks\")} */}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n};\nexport default BasicToggleNav;\n// component\n{\n  /* <BasicToggleNav\n              value={this.state.openPanel}\n              navItem={[\n                {\n                  name: \"layout\",\n                  title: \"Layout\",\n                  icon: \"dashicons dashicons-editor-table\",\n                },\n                {\n                  name: \"style\",\n                  title: \"Style\",\n                  icon: \"dashicons dashicons-admin-customizer\",\n                },\n              ]}\n              clickme={(value_) => {\n                this.setState({ openPanel: value_ });\n              }}\n            /> */\n}\n// component\n","const bounce = {\n  title: \"Bouncing\",\n  value: [\n    //in\n    { title: \"Bounce\", anim_class: \"animate__bounce\" },\n    { title: \"Bounce In Down\", anim_class: \"animate__bounceInDown\" },\n    { title: \"Bounce In Left\", anim_class: \"animate__bounceInLeft\" },\n    { title: \"Bounce In Right\", anim_class: \"animate__bounceInRight\" },\n    { title: \"Bounce In Up\", anim_class: \"animate__bounceInUp\" },\n    //out\n    { title: \"Bounce Out\", anim_class: \"animate__bounceOut\" },\n    { title: \"Bounce Out Down\", anim_class: \"animate__bounceOut\" },\n    { title: \"Bounce Out Left\", anim_class: \"animate__bounceOutLeft\" },\n    { title: \"Bounce Out Right\", anim_class: \"animate__bounceOutRight\" },\n    { title: \"Bounce Out Up\", anim_class: \"animate__bounceOutUp\" },\n  ],\n};\n\nconst Fade = {\n  title: \"Fading\",\n  value: [\n    //in\n    { title: \"Fade In\", anim_class: \"animate__fadeIn\" },\n    { title: \"Fade In Down\", anim_class: \"animate__fadeInDown\" },\n    { title: \"Fade In Down Big\", anim_class: \"animate__fadeInDownBig\" },\n    { title: \"Fade In Left\", anim_class: \"animate__fadeInLeft\" },\n    { title: \"Fade In Left Big\", anim_class: \"animate__fadeInLeftBig\" },\n    { title: \"Fade In Right\", anim_class: \"animate__fadeInRight\" },\n    { title: \"Fade In Right Big\", anim_class: \"animate__fadeInRightBig\" },\n    { title: \"Fade In Up\", anim_class: \"animate__fadeInUp\" },\n    { title: \"Fade In Up Big\", anim_class: \"animate__fadeInUpBig\" },\n    //out\n    { title: \"Fade Out\", anim_class: \"animate__fadeOut\" },\n    { title: \"Fade Out Down\", anim_class: \"animate__fadeOutDown\" },\n    { title: \"Fade Out Down Big\", anim_class: \"animate__fadeOutDownBig\" },\n    { title: \"Fade Out Left\", anim_class: \"animate__fadeOutLeft\" },\n    { title: \"Fade Out Left Big\", anim_class: \"animate__fadeOutLeftBig\" },\n    { title: \"Fade Out Right\", anim_class: \"animate__fadeOutRight\" },\n    { title: \"Fade Out Right Big\", anim_class: \"animate__fadeOutRightBig\" },\n    { title: \"Fade Out Up\", anim_class: \"animate__fadeOutUp\" },\n    { title: \"Fade Out Up Big\", anim_class: \"animate__fadeOutUpBig\" },\n  ],\n};\nconst Fliping = {\n  title: \"Fliping\",\n  value: [\n    //in\n    { title: \"Flip\", anim_class: \"animate__flip\" },\n    { title: \"Flip In X\", anim_class: \"animate__flipInX\" },\n    { title: \"Flip In Y\", anim_class: \"animate__flipInY\" },\n    { title: \"Flip Out X\", anim_class: \"animate__flipOutX\" },\n    { title: \"Flip Out Y\", anim_class: \"animate__flipOutY\" },\n  ],\n};\nconst Rotate = {\n  title: \"Rotating\",\n  value: [\n    //in\n    { title: \"Rotate In\", anim_class: \"animate__rotateIn\" },\n    { title: \"Rotate In Down Left\", anim_class: \"animate__rotateInDownLeft\" },\n    { title: \"Rotate In Down Right\", anim_class: \"animate__rotateInDownRight\" },\n    { title: \"Rotate In Up Left\", anim_class: \"animate__rotateInUpLeft\" },\n    { title: \"Rotate In Up Right\", anim_class: \"animate__rotateInUpRight\" },\n    { title: \"Rotate Out\", anim_class: \"animate__rotateOut\" },\n    { title: \"Rotate Out Down Left\", anim_class: \"animate__rotateOutDownLeft\" },\n    {\n      title: \"Rotate Out Down Right\",\n      anim_class: \"animate__rotateOutDownRight\",\n    },\n    { title: \"Rotate Out Up Left\", anim_class: \"animate__rotateOutUpLeft\" },\n    { title: \"Rotate Out Up Right\", anim_class: \"animate__rotateOutUpRight\" },\n  ],\n};\nconst Sliding = {\n  title: \"Sliding\",\n  value: [\n    //in\n    { title: \"Slide In Down\", anim_class: \"animate__slideInDown\" },\n    { title: \"Slide In Left\", anim_class: \"animate__slideInLeft\" },\n    { title: \"Slide In Right\", anim_class: \"animate__slideInRight\" },\n    { title: \"Slide In Up\", anim_class: \"animate__slideInUp\" },\n\n    { title: \"Slide Out Down\", anim_class: \"animate__slideOutDown\" },\n    { title: \"Slide Out Left\", anim_class: \"animate__slideOutLeft\" },\n    { title: \"Slide Out Right\", anim_class: \"animate__slideOutRight\" },\n    { title: \"Slide Out Up\", anim_class: \"animate__slideOutUp\" },\n  ],\n};\nconst Zooming = {\n  title: \"Zooming\",\n  value: [\n    //in\n    { title: \"Zoom In\", anim_class: \"animate__zoomIn\" },\n    { title: \"Zoom In Down\", anim_class: \"animate__zoomInDown\" },\n    { title: \"Zoom In Left\", anim_class: \"animate__zoomInLeft\" },\n    { title: \"Zoom In Right\", anim_class: \"animate__zoomInRight\" },\n    { title: \"Zoom In Up\", anim_class: \"animate__zoomInUp\" },\n    { title: \"Zoom Out\", anim_class: \"animate__zoomOut\" },\n    { title: \"Zoom Out Down\", anim_class: \"animate__zoomOutDown\" },\n    { title: \"Zoom Out Left\", anim_class: \"animate__zoomOutLeft\" },\n    { title: \"Zoom Out Right\", anim_class: \"animate__zoomOutRight\" },\n    { title: \"Zoom Out Up\", anim_class: \"animate__zoomOutUp\" },\n  ],\n};\nconst Roling = {\n  title: \"Rolling\",\n  value: [\n    //in\n    { title: \"Roll In\", anim_class: \"animate__rollIn\" },\n    { title: \"Roll Out\", anim_class: \"animate__rollOut\" },\n  ],\n};\nconst Other = {\n  title: \"Othre\",\n  value: [\n    //in\n    { title: \"Light Speed In Left\", anim_class: \"animate__lightSpeedInLeft\" },\n    { title: \"Light Speed In Right\", anim_class: \"animate__lightSpeedInRight\" },\n    { title: \"Light Speed Out Left\", anim_class: \"animate__lightSpeedOutLeft\" },\n    {\n      title: \"Light Speed Out Right\",\n      anim_class: \"animate__lightSpeedOutRight\",\n    },\n\n    { title: \"Flash\", anim_class: \"animate__flash\" },\n    { title: \"Pulse\", anim_class: \"animate__pulse\" },\n    { title: \"Rubber Band\", anim_class: \"animate__rubberBand\" },\n    { title: \"Shake\", anim_class: \"animate__shakeX\" },\n    { title: \"Hand Shake\", anim_class: \"animate__headShake\" },\n    { title: \"Swing\", anim_class: \"animate__swing\" },\n    { title: \"TaDa\", anim_class: \"animate__tada\" },\n    { title: \"Wobble\", anim_class: \"animate__wobble\" },\n    { title: \"Jello\", anim_class: \"animate__jello\" },\n    { title: \"Heart Beat\", anim_class: \"animate__heartBeat\" },\n    { title: \"Hinge\", anim_class: \"animate__hinge\" },\n    { title: \"Jack In The Box\", anim_class: \"animate__jackInTheBox\" },\n  ],\n};\n\nexport let animations = [\n  bounce,\n  Fade,\n  Fliping,\n  Rotate,\n  Sliding,\n  Zooming,\n  Roling,\n  Other,\n];\nexport let AnimationDelay_ = [\n  { title: \"One Second\", anim_class: \"animate__delay-1s\" },\n  { title: \"Two Second\", anim_class: \"animate__delay-2s\" },\n  { title: \"Three Second\", anim_class: \"animate__delay-3s\" },\n  { title: \"Four Second\", anim_class: \"animate__delay-4s\" },\n  { title: \"Five Second\", anim_class: \"animate__delay-5s\" },\n];\nexport let AnimationSpeed_ = [\n  { title: \"Faster\", anim_class: \"animate__faster\" },\n  { title: \"Fast\", anim_class: \"animate__fast\" },\n  { title: \"Slow\", anim_class: \"animate__slow\" },\n  { title: \"Slower\", anim_class: \"animate__slower\" },\n];\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { Button, Popover, MenuGroup, MenuItem } from \"@wordpress/components\";\n\nimport {\n  animations as AnimationsClass,\n  AnimationDelay_,\n  AnimationSpeed_,\n} from \"./animateclasses\";\nexport class Animation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animationTitle: false,\n      animation: { name: null, delay: null, speed: null },\n      allAnimation: AnimationsClass,\n      showPopOver: false,\n    };\n  }\n  componentDidMount() {\n    let { value } = this.props;\n    if (\n      value &&\n      typeof value == \"object\" &&\n      !Array.isArray(value) &&\n      \"name\" in value\n    ) {\n      let setobj = { name: value.name };\n      if (value.delay) {\n        setobj[\"delay\"] = value.delay;\n      }\n      if (value.speed) {\n        setobj[\"speed\"] = value.speed;\n      }\n      let setObje = { animation: setobj };\n      let getTitle = this.getDefaultTitle(value.name);\n      if (getTitle) {\n        setObje[\"animationTitle\"] = getTitle;\n      }\n      this.setState(setObje);\n    }\n  }\n\n  getDefaultTitle = (value_) => {\n    let getAnimation = [...AnimationsClass];\n    const checkPointOne_ = (mainArray) => {\n      let stageTwo = false;\n      for (let stageTwoFil of mainArray) {\n        if (stageTwoFil.anim_class == value_) {\n          stageTwo = stageTwoFil.title;\n          break;\n        }\n      }\n      return stageTwo;\n    };\n    let title = false;\n    for (let stageOne of getAnimation) {\n      let stageTwo = checkPointOne_(stageOne.value);\n      if (stageTwo) {\n        title = stageTwo;\n        break;\n      }\n    }\n    return title;\n  };\n\n  changeVal(stateKey, stateVal) {\n    let stateWoutCopyAnim = this.state.animation;\n    if (!stateWoutCopyAnim) {\n      stateWoutCopyAnim = {};\n    }\n    let copyStateAnim = { ...stateWoutCopyAnim };\n    copyStateAnim[stateKey] = stateVal == \"none\" ? null : stateVal;\n    this.setState({ animation: copyStateAnim });\n    this.props.change(copyStateAnim);\n  }\n\n  animationsDelay = () => {\n    let allDelay = AnimationDelay_;\n    let thisAnimDelay = this.state.animation.delay;\n    return (\n      <select\n        onChange={(e) => {\n          this.changeVal(\"delay\", e.target.value);\n        }}\n      >\n        <option value=\"none\">{__(\"Default\", \"unlimited-blocks\")}</option>\n        {allDelay.map((val_) => (\n          <option\n            value={val_.anim_class}\n            selected={thisAnimDelay == val_.anim_class ? \"selected\" : null}\n          >\n            {val_.title}\n          </option>\n        ))}\n      </select>\n    );\n  };\n  animationsSpeed = () => {\n    let allSpeed = AnimationSpeed_;\n    let thisAnimSpeed = this.state.animation.speed;\n    return (\n      <select\n        onChange={(e) => {\n          this.changeVal(\"speed\", e.target.value);\n        }}\n      >\n        <option value=\"none\">{__(\"Default\", \"unlimited-blocks\")}</option>\n        {allSpeed.map((val_) => (\n          <option\n            value={val_.anim_class}\n            selected={thisAnimSpeed == val_.anim_class ? \"selected\" : null}\n          >\n            {val_.title}\n          </option>\n        ))}\n      </select>\n    );\n  };\n  allAnimations = () => {\n    let allAnimations = this.state.allAnimation;\n    let thisAnimation = this.state.animation.name;\n    const chooseAnimation = (animClass, title_) => {\n      this.changeVal(\"name\", animClass);\n      this.setState({ showPopOver: false, animationTitle: title_ });\n    };\n    const classNandTitle = (val) => {\n      return val.map((val2) => {\n        let isActive = val2.anim_class == thisAnimation ? true : false;\n        return (\n          <MenuItem\n            onClick={() => {\n              chooseAnimation(val2.anim_class, val2.title);\n            }}\n            icon={isActive ? \"yes\" : false}\n          >\n            {val2.title}\n          </MenuItem>\n        );\n      });\n    };\n    return (\n      <MenuGroup>\n        {allAnimations ? (\n          <>\n            <MenuItem\n              onClick={() => {\n                chooseAnimation(\"none\", false);\n              }}\n            >\n              {__(\"None\", \"unlimited-blocks\")}\n            </MenuItem>\n            {allAnimations.map((val_) => {\n              return (\n                <>\n                  {val_.title && (\n                    <strong className=\"animationHeading\">{val_.title}</strong>\n                  )}\n                  {classNandTitle(val_.value)}\n                </>\n              );\n            })}\n          </>\n        ) : (\n          <div className=\"no_animation_found\">\n            <span>{__(\"No Animation Found\", \"unlinited-blocks\")}</span>\n          </div>\n        )}\n      </MenuGroup>\n    );\n  };\n  animationInPopup = () => {\n    return (\n      <Popover\n        position=\"top middle\"\n        onFocusOutside={(outs) => {\n          if (this.state.showPopOver) {\n            this.setState({ showPopOver: false });\n          }\n        }}\n        className={\"ul-animation-popup\"}\n      >\n        <div className=\"search-wrap_\">\n          <strong className=\"search-wrap_heading\">\n            {__(\"Animations\", \"unlimited-blocks\")}\n          </strong>\n          <input\n            type=\"text\"\n            onKeyUp={(e) => {\n              this.searchAnimation(e.target.value);\n            }}\n          />\n        </div>\n        {this.allAnimations()}\n      </Popover>\n    );\n  };\n  searchAnimation = (val) => {\n    if (val != \"\") {\n      let lowerValue = val.toLowerCase();\n      let getAnimation = [...AnimationsClass];\n      const checkPointOne = (mainArray) => {\n        let stageTwo = [];\n        for (let stageTwoFil of mainArray) {\n          if (stageTwoFil.title) {\n            let chunkArrayTitle = stageTwoFil.title.toLowerCase();\n            let getIndex = chunkArrayTitle.indexOf(lowerValue);\n            if (getIndex >= 0) {\n              stageTwo.push(stageTwoFil);\n            }\n          }\n        }\n        if (stageTwo.length) {\n          return stageTwo;\n        }\n      };\n      let newAnimation = [];\n      for (let stageOne of getAnimation) {\n        let stageTwo = checkPointOne(stageOne.value);\n        if (stageTwo) newAnimation.push({ value: stageTwo });\n      }\n\n      if (newAnimation.length) {\n        this.setState({ allAnimation: newAnimation });\n      } else {\n        // set animations not available\n        this.setState({ allAnimation: false });\n      }\n    } else {\n      // set original animations\n      this.setState({ allAnimation: AnimationsClass });\n    }\n  };\n  render() {\n    let { state } = this;\n    return (\n      <div className=\"ul-animation-tool\">\n        <div>\n          <p className=\"anim_title_\">{__(\"Animation\", \"unlimited-blocks\")}</p>\n          <Button\n            variant=\"secondary\"\n            className=\"ul-animation-tool-toggle-btn\"\n            onClick={() => {\n              if (!this.state.showPopOver) {\n                this.setState({ showPopOver: true });\n              } else {\n                this.setState({ showPopOver: false });\n              }\n            }}\n          >\n            {state.animationTitle\n              ? state.animationTitle\n              : __(\"Choose Animation\", \"unlimited-blocks\")}\n          </Button>\n          {this.state.showPopOver && this.animationInPopup()}\n        </div>\n        {state.animation.name && (\n          <>\n            <div className=\"ul-animation-delay\">\n              <p className=\"anim_title_\">{__(\"Delay\", \"unlimited-blocks\")}</p>\n              {this.animationsDelay()}\n            </div>\n            <div className=\"ul-animation-speed\">\n              <p className=\"anim_title_\">{__(\"Speed\", \"unlimited-blocks\")}</p>\n              {this.animationsSpeed()}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\n// export Animations;\nexport let setAnimationClass = (cssObj, existClass = false) => {\n  let returnString = [\"\"];\n  if (\n    cssObj &&\n    typeof cssObj == \"object\" &&\n    !Array.isArray(cssObj) &&\n    \"name\" in cssObj\n  ) {\n    let returnClass = [\"animate__animated\"];\n    returnClass.push(cssObj.name);\n    // delay\n    if (cssObj.delay) {\n      returnClass.push(cssObj.delay);\n    }\n    // speed\n    if (cssObj.speed) {\n      returnClass.push(cssObj.speed);\n    }\n    // delay\n    if (existClass) {\n      returnString = [...returnClass, ...existClass];\n    }\n  } else if (existClass) {\n    returnString = existClass;\n  }\n  returnString = returnString.join(\" \");\n  return returnString;\n};\n{\n  /* <Animation\n              value={attributes.additionalClassNames}\n              change={(animate) => {\n                setAttributes({ additionalClassNames: animate });\n              }}\n            /> \n    added classes\n    // ex ->  animate__animated animate__bounce animate__delay-2s\n            \n            */\n}\n\n// const { hasChildBlocks, rootClientId } = useSelect(\n//   (select) => {\n//     const { getBlockOrder, getBlockRootClientId } = select(blockEditorStore);\n\n//     return {\n//       hasChildBlocks: getBlockOrder(clientId).length > 0,\n//       rootClientId: getBlockRootClientId(clientId),\n//     };\n//   },\n//   [clientId]\n// );\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { MediaUpload, ColorPalette } from \"@wordpress/block-editor\";\nimport { GradientPicker, RangeControl } from \"@wordpress/components\";\nimport { UBLGraDientColors, UblColorPlates } from \"./../../post-functions\";\nclass BackgroundType extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundType: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"\",\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImageGradient: \"\",\n      backgroundOpacity: \"\",\n    };\n  }\n  componentDidMount() {\n    // console.log(\"props -> \", this.props);\n    if (this.props.value) {\n      let {\n        backgroundType,\n        backgroundImage,\n        backgroundImageSize,\n        backgroundColorType,\n        backgroundColor,\n        backgroundImageGradient,\n        backgroundOpacity,\n      } = this.props.value;\n\n      let setStateObj = {};\n      let checkB = false;\n      if (backgroundType) {\n        setStateObj[\"backgroundType\"] = backgroundType;\n        checkB = true;\n      }\n      if (backgroundImage) {\n        setStateObj[\"backgroundImage\"] = backgroundImage;\n        checkB = true;\n      }\n      if (backgroundImageSize) {\n        setStateObj[\"backgroundImageSize\"] = backgroundImageSize;\n        checkB = true;\n      }\n      if (backgroundColorType) {\n        setStateObj[\"backgroundColorType\"] = backgroundColorType;\n        checkB = true;\n      }\n      if (backgroundColor) {\n        setStateObj[\"backgroundColor\"] = backgroundColor;\n        checkB = true;\n      }\n      if (backgroundImageGradient) {\n        setStateObj[\"backgroundImageGradient\"] = backgroundImageGradient;\n        checkB = true;\n      }\n      if (backgroundOpacity) {\n        setStateObj[\"backgroundOpacity\"] = backgroundOpacity;\n        checkB = true;\n      }\n      if (checkB) {\n        this.setState(setStateObj);\n      }\n    }\n  }\n  //   set state of bg type\n  updateState(stateKey, stateVal) {\n    let obj_ = {};\n    obj_[stateKey] = stateVal;\n    this.setState(obj_);\n    let state_ = {\n      backgroundType: this.state.backgroundType,\n      backgroundImage: this.state.backgroundImage,\n      backgroundImageSize: this.state.backgroundImageSize,\n      backgroundColorType: this.state.backgroundColorType,\n      backgroundColor: this.state.backgroundColor,\n      backgroundImageGradient: this.state.backgroundImageGradient,\n      backgroundOpacity: this.state.backgroundOpacity,\n      ...obj_,\n    };\n\n    this.props.changeme(state_);\n  }\n\n  navType() {\n    return (\n      <div className=\"ubl-background-type\">\n        <span className=\"top-title\">\n          {__(\"Background Type\", \"unlimited-blocks\")}\n        </span>\n        <div className=\"types_\">\n          <div\n            data-title={__(\"None\", \"unlimited-blocks\")}\n            className={`${!this.state.backgroundType ? \"selected\" : \"\"}`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-dismiss`}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"\");\n              }}\n            ></span>\n          </div>\n          <div\n            data-title={__(\"Color\", \"unlimited-blocks\")}\n            className={`${\n              this.state.backgroundType == \"color\" ? \"selected\" : \"\"\n            }`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-admin-customizer`}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"color\");\n              }}\n            ></span>\n          </div>\n          <div\n            data-title={__(\"Image\", \"unlimited-blocks\")}\n            className={`${\n              this.state.backgroundType == \"image\" ? \"selected\" : \"\"\n            }`}\n          >\n            <span\n              className={`buttons_ dashicons dashicons-format-image `}\n              onClick={() => {\n                this.updateState(\"backgroundType\", \"image\");\n              }}\n            ></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  bgImage() {\n    return (\n      <>\n        <p>\n          <strong>{__(\"Background image\", \"unlimited-blocks\")}</strong>\n        </p>\n        <MediaUpload\n          allowedType=\"image\"\n          onSelect={(newImage) => {\n            console.log(\"newImage\", newImage);\n            this.updateState(\"backgroundImage\", newImage.sizes.full.url);\n          }}\n          value={this.state.backgroundImage}\n          render={({ open }) => (\n            <div\n              onClick={open}\n              className={`ubl-block-image-uploader ${\n                \"\" == this.state.backgroundImage && \"blank\"\n              }`}\n            >\n              <div>\n                <i className=\"fas fa-plus\"></i>\n              </div>\n              <img src={this.state.backgroundImage} />\n            </div>\n          )}\n        />\n        {this.state.backgroundImage != \"\" && (\n          <div className=\"flex-section\">\n            <p>{__(\"Background Size\", \"unlimited-blocks\")}</p>\n            <select\n              value={this.state.backgroundImageSize}\n              onChange={(e) => {\n                this.updateState(\"backgroundImageSize\", e.target.value);\n              }}\n            >\n              <option value=\"auto\">{__(\"Auto\", \"unlimited-blocks\")}</option>\n              <option value=\"cover\">{__(\"Cover\", \"unlimited-blocks\")}</option>\n              <option value=\"contain\">\n                {__(\"Contain\", \"unlimited-blocks\")}\n              </option>\n            </select>\n          </div>\n        )}\n      </>\n    );\n  }\n  colorGradient() {\n    return (\n      <>\n        <p>\n          <strong>\n            {this.state.backgroundType == \"image\" &&\n            this.state.backgroundImage != \"\"\n              ? __(\"Overlay Color\", \"unlimited-blocks\")\n              : __(\"Background Color\", \"unlimited-blocks\")}\n          </strong>\n        </p>\n\n        <div\n          class={`ubl-switcher-bg-clr-gradient clor_${this.state.backgroundColorType}`}\n        >\n          <span className=\"bg-span\"></span>\n          <span\n            onClick={() => this.updateState(\"backgroundColorType\", \"color\")}\n            className={\n              this.state.backgroundColorType == \"color\" ? \"selected\" : \"\"\n            }\n          >\n            {__(\"Solid\", \"unlimited-blocks\")}\n          </span>\n          <span\n            onClick={() => this.updateState(\"backgroundColorType\", \"gradient\")}\n            className={\n              this.state.backgroundColorType == \"gradient\" ? \"selected\" : \"\"\n            }\n          >\n            {__(\"Gradient\", \"unlimited-blocks\")}\n          </span>\n        </div>\n\n        {\"color\" == this.state.backgroundColorType ? (\n          <>\n            <ColorPalette\n              value={this.state.backgroundColor}\n              // colors={UblColorPlates}\n              onChange={(color) => {\n                this.updateState(\"backgroundColor\", color);\n              }}\n            />\n          </>\n        ) : (\n          <GradientPicker\n            disableCustomGradients={false}\n            value={this.state.backgroundImageGradient}\n            gradients={UBLGraDientColors}\n            onChange={(newGradient) => {\n              // console.log(\"new gradient->\", newGradient);\n\n              this.updateState(\"backgroundImageGradient\", newGradient);\n            }}\n          />\n        )}\n        {this.state.backgroundType == \"image\" && (\n          <RangeControl\n            label={__(\"Opacity\", \"unlimited-blocks\")}\n            value={this.state.backgroundOpacity}\n            min={0}\n            max={1}\n            step={0.1}\n            onChange={(e) => {\n              this.updateState(\"backgroundOpacity\", e);\n            }}\n          />\n        )}\n      </>\n    );\n  }\n  render() {\n    return (\n      <>\n        {this.navType()}\n        {this.state.backgroundType == \"image\" && this.bgImage()}\n        {(this.state.backgroundType == \"image\" ||\n          this.state.backgroundType == \"color\") &&\n          this.colorGradient()}\n      </>\n    );\n  }\n}\nexport default BackgroundType;\n{\n  /* <BackgroundType changeme={(object_)=>{\n\n}}/> */\n}\n","import React, { Component } from \"react\";\nimport { __ } from \"@wordpress/i18n\";\nimport { ColorPalette } from \"@wordpress/block-editor\";\nimport { RangeControl, SelectControl } from \"@wordpress/components\";\nimport Dimension from \"../dimension\";\nclass Border extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allUnit: \"px\",\n      borderStyle: \"\",\n      borderWidth: \"\",\n      borderWidthLink: true,\n      borderColor: \"\",\n      borderRadius: \"\",\n      borderRadiusLink: true,\n    };\n  }\n  componentDidMount() {\n    // console.log(\"props -> \", this.props);\n    if (this.props.value) {\n      let {\n        allUnit,\n        borderStyle,\n        borderWidth,\n        borderColor,\n        borderRadius,\n        borderWidthLink,\n        borderRadiusLink,\n      } = this.props.value;\n\n      let setStateObj = {};\n      let checkB = false;\n      if (borderStyle) {\n        setStateObj[\"borderStyle\"] = borderStyle;\n        checkB = true;\n      }\n      if (borderWidth) {\n        setStateObj[\"borderWidth\"] = borderWidth;\n        checkB = true;\n      }\n      if (borderWidthLink != \"undefined\") {\n        setStateObj[\"borderWidthLink\"] = borderWidthLink;\n        checkB = true;\n      }\n      if (borderColor) {\n        setStateObj[\"borderColor\"] = borderColor;\n        checkB = true;\n      }\n      if (borderRadius) {\n        setStateObj[\"borderRadius\"] = borderRadius;\n        checkB = true;\n      }\n      if (borderRadiusLink != \"undefined\") {\n        setStateObj[\"borderRadiusLink\"] = borderRadiusLink;\n        checkB = true;\n      }\n\n      // console.log(\"setStateObj\", setStateObj);\n\n      if (checkB) {\n        this.setState(setStateObj);\n      }\n    }\n  }\n  updateState(stateKey, stateVal) {\n    let obj_ = {};\n    obj_[stateKey] = stateVal;\n    this.setState(obj_);\n    let state_ = {\n      borderStyle: this.state.borderStyle,\n      borderWidth: this.state.borderWidth,\n      borderWidthLink: this.state.borderWidthLink,\n      borderColor: this.state.borderColor,\n      borderRadius: this.state.borderRadius,\n      borderRadiusLink: this.state.borderRadiusLink,\n      ...obj_,\n    };\n\n    // console.log(\"change me \", state_);\n\n    this.props.changeme(state_);\n  }\n  render() {\n    // console.log(\"state->\", this.state);\n\n    let defaultWidth = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    };\n    let borderWidth = this.state.borderWidth + \"\";\n    if (borderWidth && borderWidth.indexOf(\"px\") > 0) {\n      let checkDimensionWidth = this.state.borderWidth.split(\" \");\n      if (checkDimensionWidth.length > 1) {\n        let copyAr = Object.keys({ ...defaultWidth });\n        checkDimensionWidth.map((val_, key_) => {\n          defaultWidth[copyAr[key_]] = parseInt(val_);\n        });\n      } else {\n        let width = parseInt(borderWidth);\n        defaultWidth = {\n          top: width,\n          right: width,\n          bottom: width,\n          left: width,\n        };\n      }\n    } else if (borderWidth) {\n      let width = parseInt(borderWidth);\n      defaultWidth = {\n        top: width,\n        right: width,\n        bottom: width,\n        left: width,\n      };\n    }\n\n    let defaultRadius = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    };\n    let borderRadius = this.state.borderRadius + \"\";\n    if (borderRadius && borderRadius.indexOf(\"px\") > 0) {\n      let checkDimensionWidth = this.state.borderRadius.split(\" \");\n      if (checkDimensionWidth.length > 1) {\n        let copyAr = Object.keys({ ...defaultRadius });\n        checkDimensionWidth.map((val_, key_) => {\n          defaultRadius[copyAr[key_]] = parseInt(val_);\n        });\n      } else {\n        let width = parseInt(borderRadius);\n        defaultRadius = {\n          top: width,\n          right: width,\n          bottom: width,\n          left: width,\n        };\n      }\n    } else if (borderRadius) {\n      let width = parseInt(borderRadius);\n      defaultRadius = {\n        top: width,\n        right: width,\n        bottom: width,\n        left: width,\n      };\n    }\n    // console.log(\"defaultWidth->\", defaultWidth);\n    // console.log(\"defaultRadius->\", defaultRadius);\n\n    return (\n      <div className=\"icon-border-setting\">\n        <label className=\"label_\">\n          {__(\"Border Style\", \"unlimited-blocks\")}\n        </label>\n        <div className=\"ubl-multiple-select\">\n          <SelectControl\n            // label={__(\"Border Style\", \"unlimited-blocks\")}\n            value={this.state.borderStyle}\n            onChange={(choosen) => {\n              this.updateState(\"borderStyle\", choosen);\n            }}\n            options={[\n              {\n                value: \"solid\",\n                label: __(\"Solid\", \"unlimited-blocks\"),\n              },\n              {\n                value: \"dotted\",\n                label: __(\"Dotted\", \"unlimited-blocks\"),\n              },\n              {\n                value: \"dashed\",\n                label: __(\"Dashed\", \"unlimited-blocks\"),\n              },\n            ]}\n          />\n        </div>\n        <label className=\"label_\">\n          {__(\"Border Width\", \"unlimited-blocks\")}\n        </label>\n        <Dimension\n          value={defaultWidth}\n          isLink={this.state.borderWidthLink}\n          changeme={(val_) => {\n            let copyVal = { ...val_ };\n            if (\"isLink\" in copyVal) {\n              this.updateState(\"borderWidthLink\", copyVal.isLink);\n              delete copyVal[\"isLink\"];\n            }\n            let Obj = Object.values(copyVal);\n            if (Obj.length) {\n              let Width = \"\";\n              if (this.state.borderWidthLink) {\n                Width = Obj[0];\n              } else {\n                Width += Obj.join(\"px \");\n              }\n              Width = Width + this.state.allUnit;\n              this.updateState(\"borderWidth\", Width);\n            }\n          }}\n        />\n        <label className=\"label_\">{__(\"Color\", \"unlimited-blocks\")}</label>\n\n        <ColorPalette\n          value={this.state.borderColor}\n          onChange={(color) => this.updateState(\"borderColor\", color)}\n        />\n        <label className=\"label_\">\n          {__(\"Border Radius\", \"unlimited-blocks\")}\n        </label>\n        <Dimension\n          value={defaultRadius}\n          isLink={this.state.borderRadiusLink}\n          changeme={(val_) => {\n            let copyVal = { ...val_ };\n            if (\"isLink\" in copyVal) {\n              this.updateState(\"borderRadiusLink\", copyVal.isLink);\n              delete copyVal[\"isLink\"];\n            }\n            let Obj = Object.values(copyVal);\n            if (Obj.length) {\n              let Radius = \"\";\n              if (this.state.borderRadiusLink) {\n                Radius = Obj[0];\n              } else {\n                Radius += Obj.join(\"px \");\n              }\n              Radius = Radius + this.state.allUnit;\n              this.updateState(\"borderRadius\", Radius);\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Border;\n{\n  /* <Border\n    allUnit= \"px\"\n      borderStyle= \"\"\n      borderWidth= \"\"\n      borderWidthLink= {true}\n      borderColor= \"\"\n      borderRadius= \"\"\n      borderRadiusLink= {true}\n      changeme={(e)=>{\n          \n      }}\n /> */\n}\n","import React, { Component } from \"react\";\nimport { __ } from \"@wordpress/i18n\";\nimport { ColorPalette } from \"@wordpress/block-editor\";\nimport {\n  ToggleControl,\n  ColorPicker,\n  Button,\n  RangeControl,\n  Popover,\n} from \"@wordpress/components\";\n\nclass Boxshadow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPopOver: false,\n    };\n  }\n  updateProp(propsKey, propVal) {\n    let obj_ = {};\n    obj_[propsKey] = propVal;\n    this.props.changeme(obj_);\n  }\n\n  toggleBtn = () => {\n    return (\n      <div className=\"shadow-border-title\">\n        <span>\n          <strong>{__(\"Border Shadow\", \"unlimited-blocks\")}</strong>\n        </span>\n        <div className=\"ButtonPopup\">\n          <Button\n            variant=\"secondary\"\n            className=\"shadow-enable-btn\"\n            onClick={() => {\n              if (!this.state.showPopOver) {\n                this.setState({ showPopOver: true });\n              } else {\n                this.setState({ showPopOver: false });\n              }\n            }}\n          >\n            <span class=\"dashicon dashicons dashicons-admin-settings\"></span>\n          </Button>\n          {this.state.showPopOver && this.popupOver()}\n        </div>\n      </div>\n    );\n  };\n\n  popupOver() {\n    let { shadowOffsetX, shadowOffsetY, shadowBlur, shadowSpread } = this.props;\n    return (\n      <Popover\n        position=\"right top\"\n        onFocusOutside={(outs) => {\n          if (this.state.showPopOver) {\n            this.setState({ showPopOver: false });\n          }\n        }}\n        className={\"ul-box-shadow-popup\"}\n      >\n        <div className=\"container_\">\n          {/* x direction  */}\n          <div className=\"range-and-title\">\n            <p className=\"title-inline\">\n              <strong>{__(\"Horizontal\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={shadowOffsetX}\n              min={0}\n              max={20}\n              onChange={(e) => {\n                this.updateProp(\"shadowOffsetX\", e);\n              }}\n            />\n          </div>\n          {/* ---------------------------------------------------------------------- */}\n          <div className=\"range-and-title\">\n            <p className=\"title-inline\">\n              <strong>{__(\"Verticle\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={shadowOffsetY}\n              min={0}\n              max={20}\n              onChange={(e) => {\n                this.updateProp(\"shadowOffsetY\", e);\n              }}\n            />\n          </div>\n          <div className=\"range-and-title\">\n            <p className=\"title-inline\">\n              <strong>{__(\"Blur\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={shadowBlur}\n              min={0}\n              max={20}\n              onChange={(e) => {\n                this.updateProp(\"shadowBlur\", e);\n              }}\n            />\n          </div>\n          <div className=\"range-and-title\">\n            <p className=\"title-inline\">\n              <strong>{__(\"Spread\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={shadowSpread}\n              min={0}\n              max={20}\n              onChange={(e) => {\n                this.updateProp(\"shadowSpread\", e);\n              }}\n            />\n          </div>\n          {/* ---------------------------------------------------------------------- */}\n        </div>\n      </Popover>\n    );\n  }\n\n  render() {\n    let { shadowEnable, shadowColor } = this.props;\n\n    // console.log(\"shadow props\", this.props);\n\n    return (\n      <div className=\"box-shadow-wrapper\">\n        <ToggleControl\n          label={\n            shadowEnable\n              ? __(\"Enable\", \"unlimited-blocks\")\n              : __(\"Disable\", \"unlimited-blocks\")\n          }\n          checked={shadowEnable}\n          onChange={(e) => {\n            this.updateProp(\"shadowEnable\", e);\n          }}\n        />\n\n        {shadowEnable && (\n          <div className=\"settings_\">\n            {this.toggleBtn()}\n            <ColorPalette\n              value={shadowColor}\n              onChange={(color) => this.updateProp(\"shadowColor\", color)}\n            />\n            {/* <ColorPicker\n              color={shadowColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateProp(\"shadowColor\", color);\n              }}\n            /> */}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Boxshadow;\n","import { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nclass Dimension extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimension: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n      isLink: false,\n    };\n  }\n  componentDidMount() {\n    this.setDefaultValue();\n  }\n  componentDidUpdate(prevprops) {\n    if (\n      prevprops.value != this.props.value ||\n      prevprops.isLink != this.props.isLink\n    ) {\n      this.setDefaultValue();\n    }\n  }\n  setDefaultValue() {\n    let defaultValue = this.props.value;\n    let isLink = this.props.isLink;\n    // console.log(\"dimension -> default value \", defaultValue);\n    if (typeof defaultValue == \"object\" && !Array.isArray(defaultValue)) {\n      let oldDimension = { ...this.state.dimension, ...defaultValue };\n      if (isLink) {\n        // with link\n        let compareValue = 0;\n        for (let key_ in oldDimension) {\n          let int_ = parseInt(oldDimension[key_]);\n          if (int_ && int_ > compareValue) {\n            compareValue = int_;\n          }\n        }\n        oldDimension.top = compareValue;\n        oldDimension.right = compareValue;\n        oldDimension.bottom = compareValue;\n        oldDimension.left = compareValue;\n        this.setState({ dimension: oldDimension, isLink: isLink });\n        // console.log(\"dimension set 1 -> default value \", defaultValue);\n      } else {\n        // console.log(\"dimension set 2 -> default value \", defaultValue);\n        this.setState({ dimension: oldDimension, isLink: isLink });\n      }\n    }\n  }\n\n  setInlink(checkLinked) {\n    let setLinkDimension = { ...this.state.dimension };\n    let isLinkObject = {};\n    if (checkLinked) {\n      let compareValue = 0;\n      for (let key_ in setLinkDimension) {\n        let int_ = parseInt(setLinkDimension[key_]);\n        if (int_ && int_ > compareValue) {\n          compareValue = int_;\n        }\n      }\n      setLinkDimension.top = compareValue;\n      setLinkDimension.right = compareValue;\n      setLinkDimension.bottom = compareValue;\n      setLinkDimension.left = compareValue;\n      // add is link on change\n      this.setState({ dimension: setLinkDimension, isLink: true });\n      isLinkObject = { isLink: true };\n    } else {\n      this.setState({ isLink: false });\n      isLinkObject = { isLink: false };\n    }\n    let changeSetlinkMe = { ...setLinkDimension, ...isLinkObject };\n    this.props.changeme(changeSetlinkMe);\n  }\n\n  changeVal(val, cordinate) {\n    // const { state, setState } = this;\n    val = parseInt(val);\n    // console.log(\"props\", this.props);\n    let copyDimension = { ...this.state.dimension };\n    let { isLink } = this.state;\n    if (isLink) {\n      copyDimension.top = val;\n      copyDimension.right = val;\n      copyDimension.bottom = val;\n      copyDimension.left = val;\n    } else {\n      copyDimension[cordinate] = val;\n    }\n    this.setState({ dimension: copyDimension });\n    this.props.changeme(copyDimension);\n  }\n  render() {\n    // console.log(\"dimension ->  props inrender \", this.props);\n    // console.log(\"dimension -> props STATE inren \", this.state);\n    let { top, right, bottom, left } = this.state.dimension;\n    let { isLink } = this.state;\n    isLink = isLink ? \"linked\" : \"\";\n    return (\n      <div className=\"ul-dimension-tool\">\n        <div className=\"tools_\">\n          <div className=\"ul-dimension-top\">\n            <input\n              type=\"number\"\n              value={top}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"top\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-right\">\n            <input\n              type=\"number\"\n              value={right}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"right\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-bottom\">\n            <input\n              type=\"number\"\n              value={bottom}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"bottom\");\n              }}\n            />\n          </div>\n          <div className=\"ul-dimension-left\">\n            <input\n              type=\"number\"\n              value={left}\n              onChange={(e) => {\n                let { value } = e.target;\n                this.changeVal(value, \"left\");\n              }}\n            />\n          </div>\n          <div\n            className={`link_dimension ${isLink}`}\n            onClick={() => {\n              let setisLink = !isLink;\n              this.setInlink(setisLink);\n            }}\n          >\n            <span></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Dimension;\n\n{\n  /* <Dimension\n              value={{\n                top: styles.paddingTop,\n                right: styles.paddingRight,\n                bottom: styles.paddingBottom,\n                left: styles.paddingLeft,\n              }}\n              isLink={styles.paddingLink}\n              changeme={(val_) => {\n                let saveObj = {\n                  paddingTop: val_.top,\n                  paddingRight: val_.right,\n                  paddingBottom: val_.bottom,\n                  paddingLeft: val_.left,\n                };\n                if (\"isLink\" in val_) {\n                  saveObj.paddingLink = val_.isLink;\n                }\n                this.updateStyle(true, true, saveObj);\n              }}\n            /> */\n}\n","import { decodeEntities } from \"@wordpress/html-entities\";\nimport { __ } from \"@wordpress/i18n\";\nconst { apiFetch } = wp;\n/**\n * this api setting for product ---------------------------------------------------\n */\nexport const productDataInit = (data = {}) => {\n  let sendData = data;\n  return apiFetch({\n    path: \"/unlimited-blocks-product-api/v3/product/\",\n    method: \"POST\",\n    data: sendData,\n  })\n    .then((postsData) => {\n      return postsData;\n    })\n    .catch((error) => console.error(error));\n};\n// //<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const filterProductInit = async (this_, data_ = {}) => {\n  //   numberOfPosts\n  // product_cate\n\n  let argData = data_;\n  //   number of post\n  if (!(\"numberOfPosts\" in argData)) {\n    argData[\"numberOfPosts\"] = this_.props.attributes.numberOfPosts;\n  }\n  //    choose category\n  let categoryIes =\n    \"product_cate\" in argData\n      ? argData.product_cate\n      : this_.props.attributes.product_cate;\n\n  if (categoryIes) {\n    argData[\"product_cate\"] = categoryIes.join(\",\");\n  }\n  // featured image\n  let postData = await productDataInit(argData);\n  // console.log(\"postData second time->\", postData);\n  if (postData) {\n    // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n//<<<<<<<<<<<-------->>>>>>>>>>>>>>\nexport const firstTimeInitProduct = async (this_, data_ = {}) => {\n  let { numberOfPosts, product_cate } = this_.props.attributes;\n  let sendData = {\n    initialize: 1,\n    numberOfPosts: numberOfPosts,\n  };\n  sendData = { ...sendData, ...data_ };\n  // choose category\n  if (product_cate.length) {\n    sendData[\"product_cate\"] = product_cate.join(\",\");\n  }\n  let postData = await productDataInit(sendData);\n  // console.log(\"postData first time->\", postData);\n  if (postData) {\n    // // all posts\n    if (\"posts\" in postData && postData.posts != \"\") {\n      let posts_ = postData.posts;\n      this_.setState({ posts: posts_ });\n    } else {\n      this_.setState({ posts: null });\n    }\n    // //all categories\n    if (\"category\" in postData && postData.category != \"\") {\n      let category_ = postData.category;\n      if (category_ instanceof Object && Object.keys(category_).length) {\n        let setobjasArray = [];\n        for (let objKey in category_) {\n          setobjasArray.push(category_[objKey]);\n        }\n        this_.setState({ category: setobjasArray });\n      } else {\n        this_.setState({ category: category_ });\n      }\n    } else {\n      this_.setState({ category: null });\n    }\n    // //total post\n    if (\"totalPost\" in postData && postData.totalPost != \"\") {\n      let totalPost_ = postData.totalPost;\n      this_.setState({ totalPost: totalPost_ });\n    } else {\n      this_.setState({ totalPost: null });\n    }\n  }\n};\n/**\n * this api setting for product end ---------------------------------------------------\n */\n","import React, { Component } from \"react\";\nimport { __ } from \"@wordpress/i18n\";\nclass productCategory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: false,\n    };\n  }\n  componentDidMount() {\n    // console.log(\"category Filter\", this.props);\n  }\n\n  updatePropsCategory = (cate, operator = \"\") => {\n    let selectedCate = [...this.props.value];\n    if (cate == \"removeall\") {\n      selectedCate = [];\n    } else if (operator == \"remove\") {\n      if (selectedCate.length) {\n        let getIndex = selectedCate.indexOf(cate);\n        if (getIndex > -1) {\n          selectedCate.splice(getIndex, 1);\n        }\n      }\n    } else {\n      selectedCate.unshift(cate);\n    }\n    this.props.onMovement(selectedCate);\n  };\n  renderCategory = () => {\n    let renderCategory = this.props.category;\n    let noCateFound = (\n      <span className=\"noCateFound\">\n        {__(\"No Category Found..\", \"unlimited-blocks\")}\n      </span>\n    );\n    let selectedCate = this.props.value;\n    // let selectedCate = [\"accessories\", \"dairy-products\"];\n    if (renderCategory || this.state.category) {\n      renderCategory = this.state.category\n        ? this.state.category\n        : renderCategory;\n      if (renderCategory != \"no\") {\n        return renderCategory.map((val) => {\n          let slug_ = val.slug;\n          let selectedCateCl = selectedCate.includes(slug_) ? \"selected\" : \"\";\n          return (\n            <div\n              className={`cate-radio-caontainer ${selectedCateCl}`}\n              onClick={() => {\n                let operator_ = !selectedCateCl ? \"add\" : \"remove\";\n                this.updatePropsCategory(slug_, operator_);\n              }}\n            >\n              <div className=\"radio-title\">\n                <span className=\"r_\"></span>\n                <span className=\"t_\">{__(val.name, \"unlimited-blocks\")}</span>\n              </div>\n              <div className=\"total_\">\n                <span>{__(val.count + \" Products\", \"unlimited-blocks\")}</span>\n              </div>\n            </div>\n          );\n        });\n      } else {\n        return noCateFound;\n      }\n    } else {\n      return noCateFound;\n    }\n  };\n  cateFilter = (val) => {\n    // console.log(\"val\", val);\n    let setStateCate = { category: false };\n    if (val != \"\") {\n      val = val.toLowerCase();\n      let renderCategory = [...this.props.category];\n      let filter_ = (val_) => {\n        let title_ = val_.name.toLowerCase();\n        let getIndex = title_.indexOf(val);\n        return getIndex > -1;\n      };\n      let filterCate = renderCategory.filter(filter_);\n      if (filterCate.length) {\n        setStateCate = { category: filterCate };\n      } else {\n        setStateCate = { category: \"no\" };\n      }\n    }\n    // set state\n    this.setState(setStateCate);\n    // set state\n  };\n  categorySearch = () => {\n    return (\n      <div className=\"categoriesSearch_\">\n        <span>{__(\"Search for product categories\", \"unlimited-blocks\")}</span>\n        <input\n          type=\"text\"\n          onKeyUp={(e) => {\n            let val = e.target.value;\n            this.cateFilter(val);\n          }}\n        />\n      </div>\n    );\n  };\n\n  categorySelected() {\n    let renderCategory = [...this.props.category];\n    if (renderCategory.length) {\n      //   let selectedCate = [\"accessories\", \"dairy-products\"];\n      let selectedCate = this.props.value;\n      let selectedCateLength = selectedCate.length;\n      const getName = (slug_) => {\n        const filterName = (val_) => val_.slug == slug_;\n        let filtered = renderCategory.filter(filterName);\n        return filtered[0].name;\n      };\n      return (\n        <div className=\"categoriesSelected\">\n          <div className=\"title_\">\n            <span className=\"t_\">\n              {__(\n                `${selectedCateLength} ${\n                  selectedCateLength == 1 ? \"category\" : \"categories\"\n                } Selected`,\n                \"unlimited-blocks\"\n              )}\n            </span>\n            {selectedCateLength ? (\n              <span\n                onClick={() => {\n                  this.updatePropsCategory(\"removeall\");\n                }}\n                className=\"c_\"\n              >\n                {__(\"Clear All\", \"unlimited-blocks\")}\n              </span>\n            ) : (\n              \"\"\n            )}\n          </div>\n          {selectedCateLength ? (\n            <div className=\"list_\">\n              {selectedCate.map((cateVal_) => (\n                <span>\n                  {getName(cateVal_)}{\" \"}\n                  <i\n                    onClick={() => {\n                      this.updatePropsCategory(cateVal_, \"remove\");\n                    }}\n                    className=\"dashicons dashicons-dismiss\"\n                  ></i>\n                </span>\n              ))}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n  }\n\n  render() {\n    // console.log(\"category->\", this.props);\n    return (\n      <div className=\"categories_component\">\n        {this.categorySelected()}\n        {this.categorySearch()}\n        <div className=\"categories_\">{this.renderCategory()}</div>\n      </div>\n    );\n  }\n}\n\nexport default productCategory;\n","/**\n * Edit component.\n */\n\n/**\n * Import dependencies.\n */\nimport LayoutModal from \"./layouts/modal\";\n// import { LayoutsContext } from \"./layouts-provider\";\n\n/**\n * WordPress dependencies.\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { Component, Fragment } from \"@wordpress/element\";\nimport { Placeholder } from \"@wordpress/components\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(...arguments);\n  }\n  render() {\n    const { attributes, setAttributes, clientId } = this.props;\n    /* Placeholder with layout modal */\n    return [\n      <Fragment key={clientId}>\n        <Placeholder\n          key=\"placeholder\"\n          label={__(\"Layout Selector\", \"unlimited-blocks\")}\n          instructions={__(\n            \"Launch the layout library to browse pre-designed sections.\",\n            \"unlimited-blocks\"\n          )}\n          className={\"gb-layout-selector-placeholder\"}\n          icon=\"layout\"\n        >\n          <LayoutModal clientId={clientId} />\n        </Placeholder>\n      </Fragment>,\n    ];\n  }\n}\n","const { compose } = wp.compose;\nconst { rawHandler } = wp.blocks;\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport { Button } from \"@wordpress/components\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\n\nclass Layoutlist extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // apiUrl: \"http://localhost:8888/one/wp-json/zita-blocks-layout/v2/search/\",\n      apiUrl:\n        \"https://zitademo.wpzita.com/zita-blocks/wp-json/zita-blocks-layout/v2/search/\",\n      // apiUrl:\n      //   \"https://wpzita.com/zitademo/zita-blocks/wp-json/zita-blocks-layout/v2/search/\",\n      templateLoading: true,\n      categoryLoading: true,\n      templateCategory: \"all\",\n      templatePrice: \"all\",\n      block_templates_category: [],\n      block_templates: [],\n    };\n  }\n  //component did mount\n  async componentDidMount() {\n    await this.getAllRetrived();\n  }\n  //   get all blocks first time\n  getAllRetrived() {\n    let url = this.state.apiUrl + \"?initilaize=1\";\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        this.setState({\n          block_templates: json.demos,\n          block_templates_category: json.categories,\n          templateLoading: false,\n          categoryLoading: false,\n        });\n      });\n  }\n  // get all blocks with argument\n  getDemosByFilter(object_parem = {}) {\n    const urlParams = new URLSearchParams(object_parem);\n    let putUrl = urlParams && urlParams != \"\" ? \"?\" + urlParams : \"\";\n    let apiUrl = this.state.apiUrl + putUrl;\n    fetch(apiUrl)\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        if (\n          \"price_send\" in object_parem &&\n          json &&\n          \"categories\" in json &&\n          \"demos\" in json\n        ) {\n          let blockTemplate = json.demos.length > 0 ? json.demos : false;\n          let blockTemplateCate =\n            json.categories.length > 0 ? json.categories : false;\n          this.setState({\n            block_templates: blockTemplate,\n            block_templates_category: blockTemplateCate,\n            templateLoading: false,\n            categoryLoading: false,\n          });\n        } else if (json) {\n          this.setState({ block_templates: json, templateLoading: false });\n        } else {\n          // console.lo(\"no json data found json -> \", json);\n        }\n      });\n  }\n  //choose category,\n  async getDemosFilterCategory(category) {\n    this.setState({ templateCategory: category, templateLoading: true });\n    await this.getDemosByFilter({\n      category: category,\n      price: this.state.templatePrice,\n    });\n  }\n  //choose price,\n  async getDemosFilterPrice(price) {\n    this.setState({\n      templateCategory: \"all\",\n      templatePrice: price,\n      categoryLoading: true,\n      templateLoading: true,\n    });\n    await this.getDemosByFilter({\n      category: \"all\",\n      price: price,\n      price_send: \"1\",\n    });\n  }\n  // category loading\n  PostLoading = (props) => {\n    let msg = props.data;\n    return (\n      <div>\n        <div className=\"post-loader\">\n          <div className=\"active linear-bubble ubl-block-loader\">\n            {__(msg, \"unlimited-blocks\")}\n            <div>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  PostNotFound = (props) => {\n    let msg = props.data;\n    return (\n      <div className=\"template-not-found\">\n        <h2>{__(msg, \"unlimited-blocks\")}</h2>\n      </div>\n    );\n  };\n  //show all data from\n  render() {\n    const {\n      block_templates,\n      block_templates_category,\n      templateCategory,\n      templatePrice,\n      templateLoading,\n      categoryLoading,\n    } = this.state;\n    const { clientId } = this.props;\n    return (\n      <div className=\"ubl-blocks-layout-wrapper\">\n        <div className=\"container_\">\n          <div className=\"left-section_\">\n            <nav>\n              <span\n                key={\"all\"}\n                className={templatePrice == \"all\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"all\") {\n                    this.getDemosFilterPrice(\"all\");\n                  }\n                }}\n              >\n                {__(\"All\", \"unlimited-blocks\")}\n              </span>\n              <span\n                key={\"free\"}\n                className={templatePrice == \"free\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"free\") {\n                    this.getDemosFilterPrice(\"free\");\n                  }\n                }}\n              >\n                {__(\"Free\", \"unlimited-blocks\")}\n              </span>\n              <span\n                key={\"premium\"}\n                className={templatePrice == \"premium\" ? \"active\" : null}\n                onClick={() => {\n                  if (templatePrice != \"premium\") {\n                    this.getDemosFilterPrice(\"premium\");\n                  }\n                }}\n              >\n                {__(\"Premium\", \"unlimited-blocks\")}\n              </span>\n            </nav>\n            <div className=\"cate-container-\">\n              <div>\n                <span>{__(\"CATEGORIES\", \"unlimited-blocks\")}</span>\n                <div className=\"list_\">\n                  {block_templates_category &&\n                  block_templates_category.length > 0 &&\n                  categoryLoading == false ? (\n                    <>\n                      <span\n                        className={templateCategory == \"all\" ? \"active\" : null}\n                        onClick={() => {\n                          if (templateCategory != \"all\") {\n                            this.getDemosFilterCategory(\"all\");\n                          }\n                        }}\n                      >\n                        {__(\"all\", \"unlimited-blocks\")}\n                      </span>\n                      {block_templates_category.map((template_v) => {\n                        return (\n                          <span\n                            key={template_v.id}\n                            className={\n                              templateCategory == template_v.id\n                                ? \"active\"\n                                : null\n                            }\n                            onClick={() => {\n                              if (templateCategory != template_v.id) {\n                                this.getDemosFilterCategory(template_v.id);\n                              }\n                            }}\n                          >\n                            {__(template_v.title, \"unlimited-blocks\")}\n                          </span>\n                        );\n                      })}\n                    </>\n                  ) : !block_templates_category ? (\n                    <this.PostNotFound data={\"Category Not Found.\"} />\n                  ) : (\n                    <this.PostLoading data={\"Categories Loading...\"} />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"main-section_\">\n            {block_templates &&\n            block_templates.length > 0 &&\n            templateLoading == false ? (\n              <div className=\"template-itemes_\">\n                {block_templates.map((template) => {\n                  return (\n                    <div>\n                      <div className=\"template-content\">\n                        <div className=\"image_\">\n                          <img src={template.image} />\n                        </div>\n                        <div className=\"title_\">\n                          <span>{template.name}</span>\n                        </div>\n                      </div>\n                      <div className=\"template-btn_\">\n                        <button>{__(\"Preview\", \"unlimited-blocks\")}</button>\n                        <Button\n                          className=\"ubl-blocks-layout-imp-btn\"\n                          onClick={() => {\n                            this.props.import(template.content);\n                          }}\n                        >\n                          <i className=\"fas fa-download\"></i>\n                          <span>{__(\"import\", \"unlimited-blocks\")}</span>\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : !block_templates_category ? (\n              <this.PostNotFound data={\"Template Not Found.\"} />\n            ) : (\n              <this.PostLoading data={\"Template Loading...\"} />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// export default Layoutlist;\nexport default compose(\n  withSelect((select, { clientId }) => {\n    const { getBlock } = select(\"core/block-editor\");\n    const { canUserUseUnfilteredHTML } = select(\"core/editor\");\n    const block = getBlock(clientId);\n    return {\n      block,\n      canUserUseUnfilteredHTML: canUserUseUnfilteredHTML(),\n    };\n  }),\n  withDispatch((dispatch, { block, canUserUseUnfilteredHTML }) => ({\n    import: (blockLayout) =>\n      dispatch(\"core/block-editor\").replaceBlocks(\n        block.clientId,\n        rawHandler({\n          HTML: blockLayout,\n          mode: \"BLOCKS\",\n          canUserUseUnfilteredHTML,\n        })\n      ),\n  }))\n)(Layoutlist);\n","/**\n * Layout modal window with tab panel.\n */\n/**\n * WordPress dependencies.\n */\nimport Layoutlist from \"./layout-list\";\nimport { __ } from \"@wordpress/i18n\";\nimport { Fragment, useState } from \"@wordpress/element\";\nimport { Button, Modal } from \"@wordpress/components\";\nimport { useDispatch } from \"@wordpress/data\";\nfunction LayoutModal(props) {\n  //   const [currentTab, setCurrentTab] = useState(\"gb-layout-tab-sections\");\n  const [modalOpen, setModalOpen] = useState(true);\n  //   preventing to close first time\n  const [checkFirst, setcheckFirst] = useState(false);\n  const { removeBlock } = useDispatch(\"core/block-editor\");\n  return (\n    <>\n      <Fragment key={\"layout-modal-fragment-\" + props.clientId}>\n        {/* Launch the layout modal window */}\n        <Button\n          key={\"layout-modal-library-button-\" + props.clientId}\n          isPrimary\n          className=\"gb-layout-modal-button\"\n          onClick={() => {\n            setModalOpen(true);\n          }}\n        >\n          {__(\"Unlimited Blocks Library\", \"unlimited-blocks\")}\n        </Button>\n        {modalOpen ? (\n          <Modal\n            key={\"layout-modal-modal-component-\" + props.clientId}\n            className=\"ubl-blocks-layout-modal\"\n            title={__(\"Unlimited Blocks Templates\", \"unlimited-blocks\")}\n            shouldCloseOnClickOutside={true}\n            onRequestClose={() => {\n              if (checkFirst) {\n                setModalOpen(false);\n                removeBlock(props.clientId);\n              } else {\n                setcheckFirst(true);\n              }\n            }}\n          >\n            <Layoutlist clientId={props.clientId} />\n          </Modal>\n        ) : null}\n      </Fragment>\n    </>\n  );\n}\nexport default LayoutModal;\n","// extracted by mini-css-extract-plugin","import Edit from \"./components/edit\";\nimport \"./editor.scss\";\nimport { __ } from \"@wordpress/i18n\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { block_layout_pre } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/unlimited-blocks-layouts\", {\n  title: block_layout_pre.title,\n  description: block_layout_pre.description,\n  icon: block_layout_pre.icon,\n  keywords: block_layout_pre.keywords,\n  category: \"unlimited-blocks-category\",\n  edit: (props) => {\n    return <Edit {...props} />;\n  },\n  save: () => {\n    return null;\n  },\n});\n\n/**\n * Add a Layout button to the toolbar.\n */\nlet genesisBlocksLayoutButtonAdded = false;\nwp.data.subscribe(() => {\n  appendImportButton();\n});\n/**\n * Build the layout inserter button.\n */\nfunction appendImportButton() {\n  if (genesisBlocksLayoutButtonAdded) {\n    return;\n  }\n  const toolbar = document.querySelector(\".edit-post-header__toolbar\");\n  if (!toolbar) {\n    return;\n  }\n  setTimeout(() => {\n    if (!document.getElementById(\"ublBlocksinsert\")) {\n      const buttonDiv = document.createElement(\"div\");\n      buttonDiv.className = \"ublBlocksinsertWrap\";\n      let html = \"\";\n      html += '<button id=\"ublBlocksinsert\">';\n      let imgUrl =\n        plugin_url.url + \"assets/img/blocks-image/ubl-transparent-img.png\";\n      html += '<img src=\"' + imgUrl + '\">';\n      html += `${__(\"Unlimited Templates\", \"unlimited-blocks\")}`;\n      html += \"</button>\";\n      buttonDiv.innerHTML = html;\n      toolbar.appendChild(buttonDiv);\n      document\n        .getElementById(\"ublBlocksinsert\")\n        .addEventListener(\"click\", gbInsertLayout);\n      genesisBlocksLayoutButtonAdded = true;\n    }\n  }, 1000);\n}\n/**\n * Add the Layout block on click.\n */\nfunction gbInsertLayout() {\n  const block = wp.blocks.createBlock(\n    \"unlimited-blocks/unlimited-blocks-layouts\"\n  );\n  wp.data.dispatch(\"core/block-editor\").insertBlocks(block);\n}\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  InnerBlocks,\n  InspectorControls,\n  store as blockEditorStore,\n  ////\n  BlockControls,\n  BlockVerticalAlignmentToolbar,\n} from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl, ResizableBox } from \"@wordpress/components\";\n\nimport BasicToggleNav from \"../block-assets/utility-components/BasicToggleNav\";\nimport Dimension from \"../block-assets/utility-components/dimension\";\nimport {\n  Animation,\n  setAnimationClass,\n} from \"../block-assets/utility-components/animations/index\";\nimport { compose } from \"redux\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\n\nimport BackgroundType from \"../block-assets/utility-components/backgroundType/backgroundType\";\nimport Border from \"../block-assets//utility-components/border\";\nimport Boxshadow from \"./../block-assets/utility-components/box-shadow\";\n\nclass Edit extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      // widthFirst: false,\n      chooseBorderORShadow: \"border\",\n      resizeWidth: false,\n      resizeContainerWidth: false,\n      openPanel: \"layout\",\n      cloneWidth: false,\n    };\n  }\n  updateStyle = (key_, value, multiple = false) => {\n    const { attributes, setAttributes } = this.props;\n    let getStyle = { ...attributes.styles };\n    if (multiple) {\n      getStyle = { ...getStyle, ...multiple };\n    } else {\n      getStyle[key_] = value;\n    }\n    setAttributes({ styles: getStyle });\n  };\n  render() {\n    // console.log(\"block column block class name \", this.props);\n    const { attributes, setAttributes } = this.props;\n    let { width, styles } = attributes;\n    // wrapper style\n    let wrapperStyles = {\n      margin: `${styles.marginTop}px ${styles.marginRight}px ${styles.marginBottom}px ${styles.marginLeft}px`,\n      padding: `${styles.paddingTop}px ${styles.paddingRight}px ${styles.paddingBottom}px ${styles.paddingLeft}px`,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          backgroundImage: `url(${styles.backgroundImage})`,\n          backgroundSize: styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          boxShadow: BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderWidth || styles.borderRadius) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          borderWidth: styles.borderWidth,\n          borderColor: styles.borderColor,\n          borderStyle: styles.borderStyle,\n          borderRadius: styles.borderRadius,\n        },\n      };\n    }\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n      overlLayColor = {\n        ...overlLayColor,\n        ...{ opacity: styles.backgroundOpacity },\n      };\n    }\n    let verticleStyle = {};\n    if (attributes.verticleAlign) {\n      let verticleAlign =\n        attributes.verticleAlign == \"top\"\n          ? \"start\"\n          : attributes.verticleAlign == \"center\"\n          ? \"center\"\n          : \"flex-end\";\n      // top,center,bottom - unset,center,flex-end\n\n      verticleStyle = {\n        ...verticleStyle,\n        ...{\n          height: 100 + \"%\",\n          display: \"flex\",\n          alignItems: verticleAlign,\n        },\n      };\n      wrapperStyles = { ...wrapperStyles, ...{ width: 100 + \"%\" } };\n    }\n    let WrapperClass = \"ubl-blocks-cw-column-wrap\";\n    WrapperClass = setAnimationClass(attributes.additionalClassNames, [\n      WrapperClass,\n    ]);\n    return (\n      <>\n        <BlockControls key=\"controls\">\n          <BlockVerticalAlignmentToolbar\n            value={attributes.verticleAlign}\n            onChange={(align) => {\n              setAttributes({ verticleAlign: align });\n            }}\n          />\n        </BlockControls>\n        <InspectorControls key=\"inspector\">\n          <PanelBody initialOpen={true}>\n            <BasicToggleNav\n              value={this.state.openPanel}\n              navItem={[\n                {\n                  name: \"layout\",\n                  title: \"Layout\",\n                  icon: \"dashicons dashicons-editor-table\",\n                },\n                {\n                  name: \"style\",\n                  title: \"Style\",\n                  icon: \"dashicons dashicons-admin-customizer\",\n                },\n              ]}\n              clickme={(value_) => {\n                this.setState({ openPanel: value_ });\n              }}\n            />\n          </PanelBody>\n\n          {this.state.openPanel == \"layout\" ? (\n            <>\n              <PanelBody\n                title={__(\"Layouts\", \"unlimited-blocks\")}\n                initialOpen={true}\n              >\n                <p>\n                  <strong>{__(\"Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  label={__(\"Column Width (%)\", \"unlimited-blocks\")}\n                  value={\n                    this.state.cloneWidth\n                      ? this.state.cloneWidth\n                      : this.props.cloneWidth\n                  }\n                  min={10}\n                  max={100}\n                  onChange={(e) => {\n                    let checkWidth = this.props.changeWidthColumn(e);\n                    if (checkWidth == true) {\n                      this.setState({ cloneWidth: e });\n                    }\n                  }}\n                />\n              </PanelBody>\n              <PanelBody\n                title={__(\"Spacing\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <p>\n                  <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n                </p>\n                <Dimension\n                  value={{\n                    top: styles.paddingTop,\n                    right: styles.paddingRight,\n                    bottom: styles.paddingBottom,\n                    left: styles.paddingLeft,\n                  }}\n                  isLink={styles.paddingLink}\n                  changeme={(val_) => {\n                    let saveObj = {\n                      paddingTop: val_.top,\n                      paddingRight: val_.right,\n                      paddingBottom: val_.bottom,\n                      paddingLeft: val_.left,\n                    };\n                    if (\"isLink\" in val_) {\n                      saveObj.paddingLink = val_.isLink;\n                    }\n                    this.updateStyle(true, true, saveObj);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Margin\", \"unlimited-blocks\")}</strong>\n                </p>\n                <Dimension\n                  value={{\n                    top: styles.marginTop,\n                    right: styles.marginRight,\n                    bottom: styles.marginBottom,\n                    left: styles.marginLeft,\n                  }}\n                  isLink={styles.marginLink}\n                  changeme={(val_) => {\n                    let saveObj = {\n                      marginTop: val_.top,\n                      marginRight: val_.right,\n                      marginBottom: val_.bottom,\n                      marginLeft: val_.left,\n                    };\n                    if (\"isLink\" in val_) {\n                      saveObj.marginLink = val_.isLink;\n                    }\n                    this.updateStyle(true, true, saveObj);\n                  }}\n                />\n              </PanelBody>\n              <PanelBody\n                title={__(\"Animations\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <Animation\n                  value={attributes.additionalClassNames}\n                  change={(animate) => {\n                    setAttributes({ additionalClassNames: animate });\n                  }}\n                />\n              </PanelBody>\n            </>\n          ) : (\n            <>\n              <PanelBody\n                title={__(\"Background\", \"unlimited-blocks\")}\n                initialOpen={false}\n              >\n                <BackgroundType\n                  value={{\n                    backgroundType: styles.backgroundType,\n                    backgroundImage: styles.backgroundImage,\n                    backgroundImageSize: styles.backgroundImageSize,\n                    backgroundColorType: styles.backgroundColorType,\n                    backgroundColor: styles.backgroundColor,\n                    backgroundImageGradient: styles.backgroundImageGradient,\n                    backgroundOpacity: styles.backgroundOpacity,\n                  }}\n                  changeme={(getProperty) => {\n                    this.updateStyle(true, true, getProperty);\n                  }}\n                />\n              </PanelBody>\n              <PanelBody title={__(\"Border & Box Shadow\")} initialOpen={false}>\n                {/* -----------------box shadow----------------- */}\n                <div\n                  class={`ubl-switcher-bg-clr-gradient clor_${\n                    this.state.chooseBorderORShadow == \"boxshadow\"\n                      ? \"gradient\"\n                      : \"\"\n                  }`}\n                >\n                  <span class=\"bg-span\"></span>\n                  <span\n                    class={\n                      this.state.chooseBorderORShadow == \"border\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                    onClick={() =>\n                      this.setState({ chooseBorderORShadow: \"border\" })\n                    }\n                  >\n                    {__(\"Border\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    class={\n                      this.state.chooseBorderORShadow == \"boxshadow\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                    onClick={() =>\n                      this.setState({ chooseBorderORShadow: \"boxshadow\" })\n                    }\n                  >\n                    {__(\"Box Shadow\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                {this.state.chooseBorderORShadow == \"boxshadow\" ? (\n                  <Boxshadow\n                    shadowOffsetX={styles.shadowOffsetX}\n                    shadowOffsetY={styles.shadowOffsetY}\n                    shadowBlur={styles.shadowBlur}\n                    shadowSpread={styles.shadowSpread}\n                    shadowColor={styles.shadowColor}\n                    shadowEnable={styles.shadowEnable}\n                    changeme={(e) => {\n                      // console.log(\"shadow come\", e);\n                      this.updateStyle(true, true, e);\n                    }}\n                  />\n                ) : (\n                  <Border\n                    value={{\n                      allUnit: \"px\",\n                      borderStyle: styles.borderStyle,\n                      borderWidth: styles.borderWidth,\n                      borderColor: styles.borderColor,\n                      borderRadius: styles.borderRadius,\n                      borderWidthLink: styles.borderWidthLink,\n                      borderRadiusLink: styles.borderRadiusLink,\n                    }}\n                    changeme={(getProperty) => {\n                      // console.log(\"ev->\", getProperty);\n                      this.updateStyle(true, true, getProperty);\n                    }}\n                  />\n                )}\n              </PanelBody>\n            </>\n          )}\n        </InspectorControls>\n\n        <ResizableBox\n          className=\"ubl-blocks-custom-resizeable\"\n          handleWrapperClass=\"ubl-blocks-cw-column-handle-wrapper\"\n          enable={{\n            top: false,\n            right: true,\n            bottom: false,\n            left: false,\n            topRight: false,\n            bottomRight: false,\n            bottomLeft: false,\n            topLeft: false,\n          }}\n          onResizeStop={() => {\n            this.setState({ resizeWidth: false });\n          }}\n          onResizeStart={() => {\n            // toggleSelection(false);\n            let getElement = document.getElementById(attributes.blockId);\n            if (getElement) {\n              let wrapper = getElement.closest(\n                \".block-editor-block-list__layout\"\n              );\n              if (wrapper) {\n                let elementWidth = getElement.getBoundingClientRect().width;\n                let elementWrapperWidth = wrapper.getBoundingClientRect().width;\n                this.setState({\n                  resizeWidth: elementWidth,\n                  resizeContainerWidth: elementWrapperWidth,\n                });\n              }\n\n              // console.log(\"getElement width onResizeStart ->\", elementWidth);\n              // resizeContainerWidth\n            }\n          }}\n          onResize={(_event, _direction, elt, arg_) => {\n            // console.log(\"state width->\", this.state.resizeWidth);\n            // console.log(\n            //   \"state wrapper width->\",\n            //   this.state.resizeContainerWidth\n            // );\n            if (this.state.resizeWidth && this.state.resizeContainerWidth) {\n              let nowWidth = this.state.resizeWidth + arg_.width;\n              let calculateWidth =\n                (100 * nowWidth) / this.state.resizeContainerWidth;\n              // console.log(\"calculateWidth width->\", calculateWidth);\n              let gotWidth = parseInt(calculateWidth);\n              // console.log(\"gotWidth width->\", gotWidth);\n              let checkWidth = this.props.changeWidthColumn(gotWidth);\n              if (checkWidth == true) {\n                this.setState({ cloneWidth: gotWidth });\n              }\n            }\n          }}\n        >\n          {/* ////// */}\n          <div\n            id={attributes.blockId}\n            className=\"ubl-blocks-cw-column\"\n            style={verticleStyle}\n          >\n            <div className={WrapperClass} style={wrapperStyles}>\n              <div\n                className=\"ubl-blocks-cw-column-overlay\"\n                style={overlLayColor}\n              ></div>\n              <div\n                className={`ubl-blocks-cw-column-content ${\n                  this.props.ul_has_children ? \"ul_has_column_children\" : \"\"\n                }`}\n              >\n                <InnerBlocks\n                  templateLock={false}\n                  templateInsertUpdatesSelection={false}\n                  renderAppender={InnerBlocks.ButtonBlockAppender}\n                />\n              </div>\n            </div>\n          </div>\n          {this.props.ul_column_length < 5 &&\n            this.props.ul_column_index != this.props.ul_column_length && (\n              <button\n                onClick={() => {\n                  this.props.addBlockNextBlock();\n                }}\n                className=\"ul-add-new-column-btn\"\n              >\n                <span className=\"dashicons dashicons-plus-alt2\"></span>\n              </button>\n            )}\n        </ResizableBox>\n      </>\n    );\n  }\n}\n\nexport default compose(\n  withSelect((select, ownProps) => {\n    // console.log(\"block column block class name inside select  \", ownProps);\n    const { clientId } = ownProps;\n    const { getBlockRootClientId, getBlock } = select(blockEditorStore);\n    const rootId = getBlockRootClientId(clientId);\n    let getRootBlock = getBlock(rootId);\n    // console.log(\"getRootBlock from column select-> \", getRootBlock);\n    // check column has children\n    let currentColumnChildren = getBlock(clientId).innerBlocks.length;\n    currentColumnChildren = currentColumnChildren ? true : false;\n    // check column has children\n    let rootBlockWrapperAttr = getRootBlock.attributes;\n    let lengthInnerBlock = getRootBlock.innerBlocks.length;\n    let WrapperColumns = rootBlockWrapperAttr.columns;\n    let StyleColumn = rootBlockWrapperAttr.listStyle.columns;\n    let StyleColumnL = Object.keys(StyleColumn).length;\n    if (\n      lengthInnerBlock == WrapperColumns &&\n      lengthInnerBlock == StyleColumnL\n    ) {\n      let getIndexOfColumn =\n        getRootBlock.innerBlocks.findIndex(checkIndexOfcolumn); // current column client id\n      let setCloneWidth = StyleColumn[getIndexOfColumn];\n\n      //get index of currentColumn\n      function checkIndexOfcolumn(columns) {\n        return clientId == columns.clientId;\n      }\n      //get index of currentColumn\n      return {\n        cloneWidth: setCloneWidth,\n        ul_column_index: getIndexOfColumn,\n        ul_column_length: StyleColumnL - 1,\n        ul_has_children: currentColumnChildren,\n      };\n    }\n  }),\n  withDispatch((dispatch, ownProps, registry) => {\n    const { clientId, ul_column_index, ul_column_length } = ownProps;\n    const { getBlockRootClientId, getBlock } =\n      registry.select(blockEditorStore);\n    const rootWrapperID = getBlockRootClientId(clientId);\n    const getRootBlock = getBlock(rootWrapperID);\n\n    // ** current column change width\n    const { updateBlockAttributes, insertBlock } =\n      dispatch(\"core/block-editor\");\n    const rootBlockWrapperAttr = { ...getRootBlock.attributes };\n    let getListStyle = rootBlockWrapperAttr.listStyle.columns;\n    const changeWidthAndPlaceStyle = (width) => {\n      let cloneColumnWidths = { ...getListStyle };\n      let ApplyWidth = { ...getListStyle };\n      let changeWidth = true;\n      if (ul_column_index == ul_column_length) {\n        let getPrevIndex = ul_column_index - 1;\n        let getComplexWidth =\n          cloneColumnWidths[ul_column_index] + cloneColumnWidths[getPrevIndex];\n        let prev_item_width = getComplexWidth - width;\n\n        if (prev_item_width <= 10) {\n          changeWidth = false;\n        }\n\n        ApplyWidth[getPrevIndex] = prev_item_width;\n      } else if (ul_column_index < ul_column_length) {\n        let getNextIndex = ul_column_index + 1;\n        let getComplexWidth =\n          cloneColumnWidths[ul_column_index] + cloneColumnWidths[getNextIndex];\n        let next_item_width = getComplexWidth - width;\n        ApplyWidth[getNextIndex] = next_item_width;\n        if (next_item_width <= 10) {\n          changeWidth = false;\n        }\n      }\n      ApplyWidth[ul_column_index] = width;\n      let columnsStyle = { columns: ApplyWidth };\n      if (changeWidth) {\n        updateBlockAttributes(rootWrapperID, {\n          listStyle: columnsStyle,\n        });\n      }\n      return changeWidth;\n    };\n    // ** current column change width\n\n    /**\n     * add more column\n     */\n    // console.log(\"getRootBlock from column dispatch-> \", getRootBlock);\n    const blockName = \"unlimited-blocks/ubl-column-block-column\";\n    const insertedBlock = wp.blocks.createBlock(blockName);\n    const columnAddIndex = ul_column_index + 1;\n    const addBlockNextBlock = () => {\n      insertBlock(insertedBlock, columnAddIndex, rootWrapperID);\n      let NowColumnCount = rootBlockWrapperAttr.columns + 1;\n      // change column length\n      updateBlockAttributes(rootWrapperID, {\n        columns: NowColumnCount,\n      });\n    };\n\n    return {\n      changeWidthColumn: changeWidthAndPlaceStyle,\n      addBlockNextBlock: addBlockNextBlock,\n    };\n  })\n)(Edit);\n","/**\n * BLOCK: Genesis Blocks Advanced Columns InnerBlocks.\n */\n\n/**\n * Internal dependencies.\n */\nimport Edit from \"./edit\";\nimport \"./styles/editor.scss\";\nimport { InnerBlocks } from \"@wordpress/block-editor\";\nimport { setAnimationClass } from \"../block-assets/utility-components/animations/index\";\n/**\n * WordPress dependencies.\n */\nimport { __ } from \"@wordpress/i18n\";\nconst { registerBlockType } = wp.blocks;\n/**\n *\n * Register advanced columns block.\n *\n */\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { column_blocks_column } = blocksDetail;\nconst AttrS = {\n  styles: {\n    type: \"object\",\n    default: {\n      // background\n      // image/color/none/gradient\n      backgroundType: \"\",\n      // color/gradient\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"cover\",\n      backgroundImageGradient:\n        \"radial-gradient(rgba(6,147,227,1) 38%,rgb(155,81,224) 80%)\",\n      backgroundOpacity: 1,\n      // border\n      // borderEnable: false,\n      borderStyle: \"solid\",\n      borderWidth: 0,\n      borderColor: \"#f8c045\",\n      borderRadius: \"\",\n      // box-shadowpP\n      shadowEnable: false,\n      shadowOffsetX: 1,\n      shadowOffsetY: 0,\n      shadowBlur: 2,\n      shadowSpread: 2,\n      shadowColor: \"#f8c045\",\n      // margin\n      marginLink: true,\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n      // padding\n      paddingLink: true,\n      paddingTop: 12,\n      paddingBottom: 12,\n      paddingLeft: 12,\n      paddingRight: 12,\n    },\n  },\n  blockId: { type: \"string\", default: \"\" },\n  // width: {\n  //   type: \"number\",\n  //   default: 0,\n  // },\n  verticleAlign: {\n    type: \"string\",\n    default: \"\",\n  },\n  responsiveWidth: {\n    type: \"object\",\n    default: {\n      orgWidth: 0,\n      // maxWidth: 0,\n    },\n  },\n  additionalClassNames: {\n    type: \"object\",\n    default: {},\n  },\n};\nregisterBlockType(\"unlimited-blocks/ubl-column-block-column\", {\n  title: column_blocks_column.title,\n  description: column_blocks_column.description,\n  icon: column_blocks_column.icon,\n  keywords: column_blocks_column.keywords,\n  category: \"unlimited-blocks-category\",\n  parent: [\"unlimited-blocks/ubl-column-block-wrapper\"],\n  attributes: AttrS,\n  /* Render the block in the editor. */\n  edit: (props) => {\n    if (props.attributes.blockId == \"\")\n      props.setAttributes({ blockId: \"ubl-blocks-\" + props.clientId });\n    return <Edit {...props} />;\n  },\n\n  /* Save the block markup. */\n  save: (props) => {\n    const { attributes } = props;\n    const { styles } = attributes;\n    let blockId = attributes.blockId;\n    // style 1\n    let verticleStyle = \"\";\n    if (attributes.verticleAlign) {\n      let verticleAlign =\n        attributes.verticleAlign == \"top\"\n          ? \"start\"\n          : attributes.verticleAlign == \"center\"\n          ? \"center\"\n          : \"flex-end\";\n      // top,center,bottom - unset,center,flex-end\n      verticleStyle = {\n        // height: 100 + \"%\",\n        display: \"flex\",\n        \"align-items\": verticleAlign,\n      };\n    }\n    // column responsive width\n    let ublStyler1 = {\n      id: blockId,\n      put_res_class: 1,\n      style: verticleStyle,\n      responsiveWidth: attributes.responsiveWidth,\n    };\n    ublStyler1 = JSON.stringify(ublStyler1);\n    // style 2\n    // wrapper style\n    let wrapperStyles = {\n      \"margin-top\": styles.marginTop,\n      \"margin-right\": styles.marginRight,\n      \"margin-bottom\": styles.marginBottom,\n      \"margin-left\": styles.marginLeft,\n      \"padding-top\": styles.paddingTop,\n      \"padding-right\": styles.paddingRight,\n      \"padding-bottom\": styles.paddingBottom,\n      \"padding-left\": styles.paddingLeft,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"background-image\": `url(${styles.backgroundImage})`,\n          \"background-size\": styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"box-shadow\": BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderWidth || styles.borderRadius) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          borderWidth: styles.borderWidth,\n          borderColor: styles.borderColor,\n          borderStyle: styles.borderStyle,\n          borderRadius: styles.borderRadius,\n        },\n      };\n    }\n    let ublStyler2 = {\n      id: blockId + \"column-wrap\",\n      put_res_class: 0,\n      style: wrapperStyles,\n    };\n    ublStyler2 = JSON.stringify(ublStyler2);\n    // style 2\n    //overlay color\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n    }\n    // wrapper class\n    let WrapperClass = `ubl-blocks-cw-column-wrap ${blockId}column-wrap`;\n    WrapperClass = setAnimationClass(attributes.additionalClassNames, [\n      WrapperClass,\n    ]);\n    // wrapper class\n    return (\n      <div\n        className={`ubl-blocks-cw-column ${blockId}`}\n        ubl-blocks-styler={ublStyler1}\n      >\n        <div className={WrapperClass} ubl-blocks-styler={ublStyler2}>\n          <div\n            className=\"ubl-blocks-cw-column-overlay\"\n            style={overlLayColor}\n          ></div>\n          <div className=\"ubl-blocks-cw-column-content\">\n            <InnerBlocks.Content />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","export let columnOptions = [\n  {\n    class_: \"100\",\n    width: { 0: 100 },\n    columns: 1,\n  },\n  {\n    class_: \"1-2\",\n    width: { 0: 50, 1: 50 },\n    columns: 2,\n  },\n  {\n    class_: \"30-70\",\n    width: { 0: 30, 1: 70 },\n    columns: 2,\n  },\n  {\n    class_: \"70-30\",\n    width: { 0: 70, 1: 30 },\n    columns: 2,\n  },\n  {\n    class_: \"1-3\",\n    width: { 0: 33.333, 1: 33.333, 2: 33.333 },\n    columns: 3,\n  },\n  {\n    class_: \"25-25-50\",\n    width: { 0: 25, 1: 25, 2: 50 },\n    columns: 3,\n  },\n  {\n    class_: \"50-25-25\",\n    width: { 0: 50, 1: 25, 2: 25 },\n    columns: 3,\n  },\n  {\n    class_: \"25-50-25\",\n    width: { 0: 25, 1: 50, 2: 25 },\n    columns: 3,\n  },\n  // {\n  //   class_: \"1-4\",\n  //   width: { 0: 25, 1: 25, 2: 25, 3: 25 },\n  //   columns: 4,\n  // },\n  // {\n  //   class_: \"1-5\",\n  //   width: { 0: 20, 1: 20, 2: 20, 3: 20 },\n  //   columns: 5,\n  // },\n];\n","import memoize from \"memize\";\n\n/**\n * WordPress dependencies.\n */\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  InspectorControls,\n  BlockControls,\n  BlockAlignmentToolbar,\n  InnerBlocks,\n  ColorPalette,\n  store as blockEditorStore,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  Placeholder,\n  ButtonGroup,\n  Button,\n  RangeControl,\n  ToggleControl,\n} from \"@wordpress/components\";\n// import { UBLGraDientColors } from \"./../block-assets/post-functions\";\nimport BasicToggleNav from \"../block-assets/utility-components/BasicToggleNav\";\nimport Dimension from \"../block-assets/utility-components/dimension\";\nimport {\n  Animation,\n  setAnimationClass,\n} from \"../block-assets/utility-components/animations/index\";\nimport BackgroundType from \"../block-assets/utility-components/backgroundType/backgroundType\";\nimport { compose } from \"redux\";\nimport Border from \"../block-assets//utility-components/border\";\nimport Boxshadow from \"./../block-assets/utility-components/box-shadow\";\nimport { columnOptions } from \"./columnOptions\";\nconst ALLOWED_BLOCKS = [\"unlimited-blocks/ubl-column-block-column\"];\n\nconst getLayoutTemplate = memoize((columns) => {\n  const times_ = [];\n  for (let countcolumns = 0; countcolumns < columns; countcolumns++) {\n    times_.push([\"unlimited-blocks/ubl-column-block-column\"]);\n  }\n  return times_;\n});\n\n// console.log(\"getLayoutTemplate\", getLayoutTemplate);\n\nclass Edit extends Component {\n  constructor(props) {\n    super(...arguments);\n    this.state = {\n      chooseBorderORShadow: \"border\",\n      openPanel: \"layout\",\n      changeWidthPreventForFirstTime: \"\",\n      deviceType: \"\",\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\n    //   \"--------------------+++++++++++++++++++++++++++++++------------------------------\"\n    // );\n    // console.log(\"prev props\", prevProps);\n    // console.log(\"current props\", this.props);\n    // console.log(\"current props prev state\", prevState);\n    // console.log(\"current props state\", this.state);\n\n    if (prevProps.attributes.columns != this.props.attributes.columns) {\n      this.setColumnWidthWithAttr();\n    } else if (this.props.wrapper_childrens !== prevProps.wrapper_childrens) {\n      // console.log(\"yes change is 2\");\n      if (\n        prevProps.wrapper_childrens.length &&\n        prevProps.wrapper_childrens.length > this.props.wrapper_childrens.length\n      ) {\n        // console.log(\"yes change is 22\");\n        let currentColumn = parseInt(this.props.attributes.columns);\n        let columnsWidth = 100 / currentColumn;\n        let SetObject = {};\n        for (let initWidth = 0; initWidth < currentColumn; initWidth++) {\n          // const element = array[index_];\n          SetObject[initWidth] = columnsWidth;\n        }\n        let setObjectColumn = { columns: SetObject };\n        this.props.setAttributes({ listStyle: setObjectColumn });\n\n        if (\n          this.props.wrapper_childrens.length != this.props.attributes.columns\n        ) {\n          this.props.setAttributes({\n            columns: this.props.wrapper_childrens.length,\n          });\n        }\n        this.setWidth(setObjectColumn);\n      } else {\n        this.setWidth();\n      }\n    } else if (\n      this.props.attributes.listStyle.columns !=\n      prevProps.attributes.listStyle.columns\n    ) {\n      this.setWidth();\n    }\n\n    // else if (prevState.deviceType != this.props.deviceType) {\n    //   // console.log(\"yes change is de vice wo\");\n    //   // this.setState({ deviceType: this.props.deviceType });\n    //   // setTimeout(() => {\n    //   //   console.log(\"yes change is de vice wo ssss\");\n    //   //   this.setWidth();\n    //   // }, 1000);\n    //   // this.setWidth();\n    // } else if (prevState.deviceType != this.state.deviceType) {\n    //   // console.log(\"yes change is de vice wo ready with stae update \");\n    //   // this.setWidth();\n    // }\n  }\n  setColumnWidthWithAttr() {\n    let currentColumn = parseInt(this.props.attributes.columns);\n    let columnsWidth = 100 / currentColumn;\n    let SetObject = {};\n    for (let initWidth = 0; initWidth < currentColumn; initWidth++) {\n      // const element = array[index_];\n      SetObject[initWidth] = columnsWidth;\n    }\n    let setObjectColumn = { columns: SetObject };\n    this.props.setAttributes({ listStyle: setObjectColumn });\n    this.setWidth(setObjectColumn);\n  }\n  setWidth(listColumn = false, documentIframe = false) {\n    const { attributes, wrapper_childrens } = this.props;\n    let getListStyle = !listColumn ? attributes.listStyle.columns : listColumn;\n    let searChDocument = !documentIframe ? document : documentIframe;\n    // ---------\n    if (\n      getListStyle &&\n      wrapper_childrens.length &&\n      Object.keys(getListStyle).length == wrapper_childrens.length\n    ) {\n      for (let getOrderChildren in getListStyle) {\n        let getIdOfColumn = wrapper_childrens[getOrderChildren].clientId;\n        let getIdOfColumnWidth = getListStyle[getOrderChildren];\n\n        if (getIdOfColumn) {\n          let IdOfColumn = \"block-\" + getIdOfColumn;\n          let foundColumn = searChDocument.getElementById(IdOfColumn);\n          // console.log(\"foundColumn ->searChDocument\", searChDocument);\n          // console.log(\"foundColumn ->IdOfColumn\", foundColumn);\n          if (foundColumn) {\n            foundColumn.style.width = getIdOfColumnWidth + \"%\";\n          }\n        }\n      }\n    }\n    // ---------\n  }\n  componentDidMount() {\n    // console.log(\n    //   \"component did mount --------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>\",\n    //   this.props\n    // );\n    // get state\n    // let getPreviewTablet = document.getElementsByClassName(\"is-tablet-preview\");\n\n    // console.log(\"getPreviewTablet->\", getPreviewTablet);\n    if (this.props.deviceType) {\n      this.setState({ deviceType: this.props.deviceType });\n    }\n    let getIframe = document.querySelector('[name=\"editor-canvas\"]');\n    // console.log(\"getIframe->\", getIframe);\n    if (getIframe) {\n      let sendDocument =\n        getIframe.contentDocument || getIframe.contentWindow.document;\n      this.setWidth(false, sendDocument);\n    } else {\n      this.setWidth();\n    }\n  }\n  updateStyle = (key_, value, multiple = false) => {\n    const { attributes, setAttributes } = this.props;\n    let getStyle = { ...attributes.styles };\n    if (multiple) {\n      getStyle = { ...getStyle, ...multiple };\n    } else {\n      getStyle[key_] = value;\n    }\n    setAttributes({ styles: getStyle });\n  };\n  buttonPercent(percent) {\n    let Per = Object.keys(percent).map((key_) => (\n      <span>{parseInt(percent[key_])}</span>\n    ));\n    return Per;\n  }\n  render() {\n    // prevv ------------------=+++++++++++++============\n    // initialize style for column\n    const { attributes, setAttributes, clientId, deviceType } = this.props;\n    // set block id\n    if (attributes.blockId == \"\")\n      setAttributes({ blockId: \"ubl-blocks-\" + clientId });\n    const { blockId, styles, contentWidth } = attributes;\n    let wrapperStyles = {\n      margin: `${styles.marginTop}px ${styles.marginRight}px ${styles.marginBottom}px ${styles.marginLeft}px`,\n      padding: `${styles.paddingTop}px ${styles.paddingRight}px ${styles.paddingBottom}px ${styles.paddingLeft}px`,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          backgroundImage: `url(${styles.backgroundImage})`,\n          backgroundSize: styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          boxShadow: BoxShadow,\n        },\n      };\n    }\n    // wrapper border is enable\n    if (styles.borderWidth || styles.borderRadius) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          borderWidth: styles.borderWidth,\n          borderColor: styles.borderColor,\n          borderStyle: styles.borderStyle,\n          borderRadius: styles.borderRadius,\n        },\n      };\n    }\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = null;\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        overlLayColor = { backgroundImage: styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { backgroundColor: styles.backgroundColor };\n      }\n      if (\"image\" == styles.backgroundType) {\n        overlLayColor = {\n          ...overlLayColor,\n          ...{ opacity: styles.backgroundOpacity },\n        };\n      }\n    }\n    /**\n     * content width\n     */\n    let contentWidthApply = null;\n    if (contentWidth.enable) {\n      contentWidthApply = {};\n      if (contentWidth.parameter == \"px\") {\n        contentWidthApply.maxWidth = \"100%\";\n        contentWidthApply.width = contentWidth.widthPx + \"px\";\n      } else {\n        contentWidthApply.width = contentWidth.width + \"%\";\n      }\n    }\n\n    /**\n     * wrapper class\n     *\n     **/\n    let deviceClass = \"ubl-wrapper-device-\" + deviceType;\n    let WrapperClass = \"ubl-blocks-column-wrapper-2\";\n    WrapperClass = setAnimationClass(attributes.additionalClassNames, [\n      WrapperClass,\n      deviceClass,\n    ]);\n    /* Show the layout placeholder. */\n    if (attributes.columns == 0) {\n      return [\n        <BlockControls key=\"controls\">\n          <BlockAlignmentToolbar\n            value={attributes.align}\n            onChange={(align) => setAttributes({ align })}\n            controls={[\"wide\", \"full\"]}\n          />\n        </BlockControls>,\n        <Placeholder\n          key=\"placeholder\"\n          icon=\"editor-table\"\n          label={__(\"Advance Column Layout\", \"unlimited-blocks\")}\n          className={\"ubl-column-placeholder\"}\n        >\n          <ButtonGroup\n            aria-label={__(\"Select Row Columns\", \"unlimited-blocks\")}\n            className=\"ubl-blocks-columns-group\"\n          >\n            {columnOptions.map((columnOpt) => {\n              let { columns, class_, width } = columnOpt;\n              return (\n                <div className=\"ubl-blocks-column-btn-container\">\n                  <Button\n                    className={`ubl-clmn-btn-${class_}`}\n                    onClick={() => {\n                      if (\"width\" in columnOpt) {\n                        let updateListStyle = { columns: columnOpt.width };\n                        setAttributes({\n                          columns: columns,\n                          listStyle: updateListStyle,\n                        });\n                      } else {\n                        setAttributes({ columns: columns });\n                      }\n                    }}\n                  >\n                    <div>\n                      {[...Array(columns)].map((vall, keyy) => (\n                        <span className={`span-${keyy}`}></span>\n                      ))}\n                    </div>\n                  </Button>\n                  <span className=\"column-percent\">\n                    {this.buttonPercent(width)}\n                  </span>\n                </div>\n              );\n            })}\n          </ButtonGroup>\n        </Placeholder>,\n      ];\n    }\n\n    return (\n      <>\n        <BlockControls key=\"controls\">\n          <BlockAlignmentToolbar\n            value={attributes.align}\n            onChange={(align) => setAttributes({ align })}\n            controls={[\"center\", \"wide\", \"full\"]}\n          />\n        </BlockControls>\n        <InspectorControls key=\"inspector\">\n          {attributes.columns > 0 && (\n            <>\n              <PanelBody initialOpen={true}>\n                <BasicToggleNav\n                  value={this.state.openPanel}\n                  navItem={[\n                    {\n                      name: \"layout\",\n                      title: \"Layout\",\n                      icon: \"dashicons dashicons-editor-table\",\n                    },\n                    {\n                      name: \"style\",\n                      title: \"Style\",\n                      icon: \"dashicons dashicons-admin-customizer\",\n                    },\n                  ]}\n                  clickme={(value_) => {\n                    this.setState({ openPanel: value_ });\n                  }}\n                />\n              </PanelBody>\n              {this.state.openPanel == \"layout\" ? (\n                <>\n                  <PanelBody\n                    title={__(\"Column & Layout\", \"unlimited-blocks\")}\n                    initialOpen={true}\n                  >\n                    {/* testing ------------------------------------- */}\n                    {/* testing ------------------------------------- */}\n\n                    <RangeControl\n                      label={__(\"Columns\", \"unlimited-blocks\")}\n                      // help={}\n                      value={attributes.columns}\n                      onChange={(value) => {\n                        let prevColumn = this.props.attributes.columns;\n                        this.props.updateColumn(prevColumn, value);\n                        this.props.setAttributes({ columns: value });\n                      }}\n                      min={1}\n                      max={6}\n                      step={1}\n                    />\n                    {/* contentWidth */}\n                    <p>\n                      <strong>{__(\"Inner Width\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ToggleControl\n                      label={\n                        contentWidth.enable\n                          ? __(\"Custom Width\", \"unlimited-blocks\")\n                          : __(\"Full Width\", \"unlimited-blocks\")\n                      }\n                      checked={contentWidth.enable}\n                      onChange={(e) => {\n                        let setWidth = { ...contentWidth };\n                        setWidth[\"enable\"] = e;\n                        this.props.setAttributes({ contentWidth: setWidth });\n                      }}\n                    />\n                    {contentWidth.enable && (\n                      <>\n                        <label className=\"normal-label with-radio\">\n                          {__(\"Width\", \"unlimited-blocks\")}\n                          <div className=\"parameter-toggle\">\n                            <span\n                              className={\n                                contentWidth.parameter == \"%\"\n                                  ? \"selected\"\n                                  : null\n                              }\n                              onClick={() => {\n                                let setWidth = { ...contentWidth };\n                                setWidth[\"parameter\"] = \"%\";\n                                this.props.setAttributes({\n                                  contentWidth: setWidth,\n                                });\n                              }}\n                            >\n                              %\n                            </span>\n                            <span\n                              className={\n                                contentWidth.parameter == \"px\"\n                                  ? \"selected\"\n                                  : null\n                              }\n                              onClick={() => {\n                                let setWidth = { ...contentWidth };\n                                setWidth[\"parameter\"] = \"px\";\n                                this.props.setAttributes({\n                                  contentWidth: setWidth,\n                                });\n                              }}\n                            >\n                              px\n                            </span>\n                          </div>\n                        </label>\n                        <RangeControl\n                          value={\n                            contentWidth.parameter == \"%\"\n                              ? contentWidth.width\n                              : contentWidth.widthPx\n                          }\n                          onChange={(value) => {\n                            let setWidth = { ...contentWidth };\n                            if (contentWidth.parameter == \"%\") {\n                              setWidth[\"width\"] = value;\n                            } else {\n                              setWidth[\"widthPx\"] = value;\n                            }\n\n                            this.props.setAttributes({\n                              contentWidth: setWidth,\n                            });\n                          }}\n                          min={contentWidth.parameter == \"%\" ? 1 : 200}\n                          max={contentWidth.parameter == \"%\" ? 100 : 1600}\n                        />\n                      </>\n                    )}\n                  </PanelBody>\n                  <PanelBody\n                    title={__(\"Spacing\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <p>\n                      <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <Dimension\n                      value={{\n                        top: styles.paddingTop,\n                        right: styles.paddingRight,\n                        bottom: styles.paddingBottom,\n                        left: styles.paddingLeft,\n                      }}\n                      isLink={styles.paddingLink}\n                      changeme={(val_) => {\n                        let saveObj = {\n                          paddingTop: val_.top,\n                          paddingRight: val_.right,\n                          paddingBottom: val_.bottom,\n                          paddingLeft: val_.left,\n                        };\n                        if (\"isLink\" in val_) {\n                          saveObj.paddingLink = val_.isLink;\n                        }\n                        this.updateStyle(true, true, saveObj);\n                      }}\n                    />\n                    {/* -----------------------margin--------------- */}\n                    <p>\n                      <strong>{__(\"Margin\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <Dimension\n                      value={{\n                        top: styles.marginTop,\n                        right: styles.marginRight,\n                        bottom: styles.marginBottom,\n                        left: styles.marginLeft,\n                      }}\n                      isLink={styles.marginLink}\n                      changeme={(val_) => {\n                        let saveObj = {\n                          marginTop: val_.top,\n                          marginRight: val_.right,\n                          marginBottom: val_.bottom,\n                          marginLeft: val_.left,\n                        };\n                        if (\"isLink\" in val_) {\n                          saveObj.marginLink = val_.isLink;\n                        }\n                        this.updateStyle(true, true, saveObj);\n                      }}\n                    />\n                  </PanelBody>\n                </>\n              ) : (\n                <>\n                  <PanelBody\n                    title={__(\"Background\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <BackgroundType\n                      value={{\n                        backgroundType: styles.backgroundType,\n                        backgroundImage: styles.backgroundImage,\n                        backgroundImageSize: styles.backgroundImageSize,\n                        backgroundColorType: styles.backgroundColorType,\n                        backgroundColor: styles.backgroundColor,\n                        backgroundImageGradient: styles.backgroundImageGradient,\n                        backgroundOpacity: styles.backgroundOpacity,\n                      }}\n                      changeme={(getProperty) => {\n                        // console.log(\"getProperty\", getProperty);\n                        this.updateStyle(true, true, getProperty);\n                      }}\n                    />\n                  </PanelBody>\n\n                  <PanelBody\n                    title={__(\"Border and Box Shadow\", \"unlimited-blocks\")}\n                    initialOpen={false}\n                  >\n                    <div\n                      class={`ubl-switcher-bg-clr-gradient clor_${\n                        this.state.chooseBorderORShadow == \"boxshadow\"\n                          ? \"gradient\"\n                          : \"\"\n                      }`}\n                    >\n                      <span class=\"bg-span\"></span>\n                      <span\n                        class={\n                          this.state.chooseBorderORShadow == \"border\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                        onClick={() =>\n                          this.setState({ chooseBorderORShadow: \"border\" })\n                        }\n                      >\n                        {__(\"Border\", \"unlimited-blocks\")}\n                      </span>\n                      <span\n                        class={\n                          this.state.chooseBorderORShadow == \"boxshadow\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                        onClick={() =>\n                          this.setState({ chooseBorderORShadow: \"boxshadow\" })\n                        }\n                      >\n                        {__(\"Box Shadow\", \"unlimited-blocks\")}\n                      </span>\n                    </div>\n\n                    {/* <Border /> */}\n                    {this.state.chooseBorderORShadow == \"boxshadow\" ? (\n                      <Boxshadow\n                        shadowOffsetX={styles.shadowOffsetX}\n                        shadowOffsetY={styles.shadowOffsetY}\n                        shadowBlur={styles.shadowBlur}\n                        shadowSpread={styles.shadowSpread}\n                        shadowColor={styles.shadowColor}\n                        shadowEnable={styles.shadowEnable}\n                        changeme={(e) => {\n                          console.log(\"shadow come\", e);\n                          this.updateStyle(true, true, e);\n                        }}\n                      />\n                    ) : (\n                      <Border\n                        value={{\n                          allUnit: \"px\",\n                          borderStyle: styles.borderStyle,\n                          borderWidth: styles.borderWidth,\n                          borderColor: styles.borderColor,\n                          borderRadius: styles.borderRadius,\n                          borderWidthLink: styles.borderWidthLink,\n                          borderRadiusLink: styles.borderRadiusLink,\n                        }}\n                        changeme={(getProperty) => {\n                          // console.log(\"ev->\", getProperty);\n                          this.updateStyle(true, true, getProperty);\n                        }}\n                      />\n                    )}\n                  </PanelBody>\n                </>\n              )}\n            </>\n          )}\n          <PanelBody\n            title={__(\"Animations\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <Animation\n              value={attributes.additionalClassNames}\n              change={(animate) => {\n                // console.log(\"animation\", animate);\n                setAttributes({ additionalClassNames: animate });\n              }}\n            />\n          </PanelBody>\n        </InspectorControls>\n\n        <div\n          className=\"ubl-blocks-column-wrapper\"\n          id={blockId}\n          // dataListStyle={dataListStyle_}\n        >\n          <div className={WrapperClass} style={wrapperStyles}>\n            <div\n              className=\"ubl-blocks-column-wrapper-2-overlay\"\n              style={overlLayColor}\n            ></div>\n            <div className=\"ubl-blocks-column-wrapper-2-svg\"></div>\n            <div\n              className=\"ubl-blocks-column-wrapper-2-content\"\n              style={contentWidthApply}\n            >\n              <InnerBlocks\n                template={getLayoutTemplate(attributes.columns)}\n                orientation=\"horizontal\"\n                allowedBlocks={ALLOWED_BLOCKS}\n                renderAppender={false}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nexport default compose(\n  withSelect((select, ownProps) => {\n    const { clientId } = ownProps;\n    const { getBlock } = select(blockEditorStore);\n    let getRootBlock = getBlock(clientId);\n\n    // -----------------------------------------------------\n    // responsive\n    const { __experimentalGetPreviewDeviceType } = select(\"core/edit-post\");\n    let DeviceType = __experimentalGetPreviewDeviceType();\n    DeviceType = DeviceType ? DeviceType.toLowerCase() : \"\";\n    // -----------------------------------------------------\n    // ownProps\n    return {\n      wrapper_childrens: getRootBlock.innerBlocks,\n      deviceType: DeviceType,\n    };\n  }),\n  withDispatch((dispatch, ownProps, registry) => {\n    const { getBlocks } = registry.select(blockEditorStore);\n    const { clientId } = ownProps;\n    let innerBlocks = getBlocks(clientId);\n    const { replaceInnerBlocks } = dispatch(blockEditorStore);\n    // update column without index\n    const updateColumn = (prevColumn, newColumns) => {\n      const adding = newColumns > prevColumn;\n      if (adding) {\n        let columnBlock = wp.blocks.createBlock(\n          \"unlimited-blocks/ubl-column-block-column\"\n        );\n        innerBlocks = [...innerBlocks, ...[columnBlock]];\n      } else {\n        innerBlocks = [...innerBlocks].slice(0, -1);\n      }\n      replaceInnerBlocks(clientId, innerBlocks);\n    };\n    // update column without index\n    return {\n      updateColumn: updateColumn,\n    };\n  })\n)(Edit);\n","import \"./style/editor.scss\";\nimport Edit from \"./edit\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nconst { InnerBlocks } = wp.blockEditor;\nimport { setAnimationClass } from \"../block-assets/utility-components/animations/index\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrS = {\n  align: { type: \"string\", default: \"wide\" },\n  columns: {\n    type: \"number\",\n    default: 0,\n  },\n  blockId: {\n    type: \"string\",\n    default: \"\",\n  },\n  listStyle: {\n    type: \"object\",\n    default: {\n      columns: false,\n    },\n  },\n  contentWidth: {\n    type: \"object\",\n    default: {\n      enable: false,\n      width: 100,\n      parameter: \"%\",\n      widthPx: 600,\n    },\n  },\n  // styles added\n  styles: {\n    type: \"object\",\n    default: {\n      // background\n      // image/color/none/gradient\n      backgroundType: \"\",\n      // color/gradient\n      backgroundColorType: \"color\",\n      backgroundColor: \"\",\n      backgroundImage: \"\",\n      backgroundImageSize: \"cover\",\n      backgroundImageGradient:\n        \"radial-gradient(rgba(6,147,227,1) 38%,rgb(155,81,224) 80%)\",\n      backgroundOpacity: 1,\n      // border\n      borderWidthLink: true,\n      borderStyle: \"solid\",\n      borderWidth: 0,\n      borderColor: \"#f8c045\",\n      borderRadiusLink: true,\n      borderRadius: 0,\n      // box-shadow\n      shadowEnable: false,\n      shadowOffsetX: 1,\n      shadowOffsetY: 0,\n      shadowBlur: 2,\n      shadowSpread: 2,\n      shadowColor: \"#f8c045\",\n      // margin\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n      marginLink: true,\n      // padding\n      paddingTop: 12,\n      paddingBottom: 12,\n      paddingLeft: 12,\n      paddingRight: 12,\n      paddingLink: true,\n    },\n  },\n  additionalClassNames: {\n    type: \"object\",\n    default: {},\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { column_wrapper } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-column-block-wrapper\", {\n  title: column_wrapper.title,\n  description: column_wrapper.description,\n  icon: column_wrapper.icon,\n  keywords: column_wrapper.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrS,\n  example: () => {},\n  getEditWrapperProps: (attributes) => {\n    const { align, columns } = attributes;\n    if (\n      (\"left\" === align ||\n        \"right\" === align ||\n        \"full\" === align ||\n        \"wide\" === align) &&\n      columns > 0\n    ) {\n      return { \"data-align\": align };\n    }\n  },\n  edit: Edit,\n  save: (props) => {\n    const { attributes } = props;\n    const { listStyle, blockId, styles, align, contentWidth } = attributes;\n    let jsonSettingData = attributes.listStyle;\n    jsonSettingData = JSON.stringify(jsonSettingData);\n    let columnWrapperStyle = {};\n    if (align == \"wide\") {\n      columnWrapperStyle[\"max-width\"] = \"1000px\";\n    } else if (align == \"full\") {\n      columnWrapperStyle[\"max-width\"] = \"100%\";\n    } else if (align == \"center\") {\n      columnWrapperStyle[\"max-width\"] = \"650px\";\n    }\n    let ublStyler = {\n      id: blockId,\n      put_res_class: 1,\n      style: columnWrapperStyle,\n    };\n    ublStyler = JSON.stringify(ublStyler);\n    // ----------------===========-------------------\n    let wrapperStyles = {\n      \"margin-top\": styles.marginTop,\n      \"margin-right\": styles.marginRight,\n      \"margin-bottom\": styles.marginBottom,\n      \"margin-left\": styles.marginLeft,\n      \"padding-top\": styles.paddingTop,\n      \"padding-right\": styles.paddingRight,\n      \"padding-bottom\": styles.paddingBottom,\n      \"padding-left\": styles.paddingLeft,\n    };\n    // wrapper bg image if image is enable\n    if (\"image\" == styles.backgroundType && \"\" != styles.backgroundImage) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"background-image\": `url(${styles.backgroundImage})`,\n          \"background-size\": styles.backgroundImageSize,\n        },\n      };\n    }\n    // wrapper box shadow is enable\n    if (styles.shadowEnable) {\n      let BoxShadow = `${styles.shadowOffsetX}px ${styles.shadowOffsetY}px ${styles.shadowBlur}px ${styles.shadowSpread}px ${styles.shadowColor}`;\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"box-shadow\": BoxShadow,\n        },\n      };\n    }\n\n    if (styles.borderWidth || styles.borderRadius) {\n      wrapperStyles = {\n        ...wrapperStyles,\n        ...{\n          \"border-width\": styles.borderWidth,\n          \"border-color\": styles.borderColor,\n          \"border-style\": styles.borderStyle,\n          \"border-radius\": styles.borderRadius,\n        },\n      };\n    }\n    let ublStyler1 = {\n      id: blockId + \"wrap2-\",\n      // put_res_class: 1,\n      style: wrapperStyles,\n    };\n    ublStyler1 = JSON.stringify(ublStyler1);\n\n    // wrapper overlay color / background / gradient color if color or image or gradient\n    let overlLayColor = \"\";\n    if (\"color\" == styles.backgroundType || \"image\" == styles.backgroundType) {\n      if (\"gradient\" == styles.backgroundColorType) {\n        // console.log(\"\")\n        overlLayColor = { \"background-image\": styles.backgroundImageGradient };\n      } else {\n        overlLayColor = { \"background-color\": styles.backgroundColor };\n      }\n      if (\"image\" == styles.backgroundType) {\n        overlLayColor = {\n          ...overlLayColor,\n          ...{ opacity: styles.backgroundOpacity },\n        };\n      }\n    }\n    let ublStyler2 = {\n      id: blockId + \"overlay-\",\n      style: overlLayColor,\n    };\n    ublStyler2 = JSON.stringify(ublStyler2);\n    // ----------------===========-------------------\n    // content style\n    let contentWidthApply = null;\n    if (contentWidth.enable) {\n      if (contentWidth.parameter == \"%\") {\n        contentWidthApply = { width: contentWidth.width + \"%\" };\n      } else {\n        contentWidthApply = {\n          width: contentWidth.widthPx + \"px\",\n          \"max-width\": \"100%\",\n        };\n      }\n    }\n    let WrapperClass = `ubl-blocks-column-wrapper-2 ${blockId + \"wrap2-\"}`;\n    WrapperClass = setAnimationClass(attributes.additionalClassNames, [\n      WrapperClass,\n    ]);\n\n    let mainWrapperClass = [\n      \"align\" + align,\n      \"ubl-blocks-column-wrapper\",\n      blockId,\n    ];\n    mainWrapperClass = mainWrapperClass.join(\" \");\n    return (\n      <div\n        id={blockId}\n        className={mainWrapperClass}\n        ubl-blocks-styler={ublStyler}\n        data-ubl-column-width={jsonSettingData}\n      >\n        <div className={WrapperClass} ubl-blocks-styler={ublStyler1}>\n          <div\n            className={`ubl-blocks-column-wrapper-2-overlay ${\n              blockId + \"overlay-\"\n            }`}\n            ubl-blocks-styler={ublStyler2}\n          ></div>\n          <div className=\"ubl-blocks-column-wrapper-2-svg\"></div>\n          <div\n            className=\"ubl-blocks-column-wrapper-2-content\"\n            style={contentWidthApply}\n          >\n            <InnerBlocks.Content />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  AlignmentToolbar,\n  BlockControls,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  SelectControl,\n  __experimentalGradientPicker as GradientPicker,\n  // Toolbar,\n  // ToolbarItem,\n  // Button,\n  // ResizableBox,\n  // ResponsiveWrapper\n} from \"@wordpress/components\";\nimport fontFamily from \"../block-assets/font-family\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\n\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { icon_block } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/icon-block\", {\n  title: icon_block.title,\n  description: icon_block.description,\n  icon: icon_block.icon,\n  keywords: icon_block.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: {\n    iconClass: {\n      type: \"string\",\n      default: \"fab fa-wordpress-simple\",\n    },\n    iconColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconBgColor: {\n      type: \"object\",\n      default: {\n        type: \"color\",\n        color: \"#EEF6F9\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n    },\n    titleColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconFontsize: {\n      type: \"number\",\n      default: 55,\n    },\n    titleFontsize: {\n      type: \"number\",\n      default: 24,\n    },\n    titleTxt: {\n      type: \"string\",\n      default: __(\"Icon Title\", \"unlimited-blocks\"),\n    },\n    titleArrenge: {\n      type: \"string\",\n      default: \"column\",\n    },\n    itemAlign: {\n      type: \"text\",\n      default: \"center\",\n    },\n    titleMarginTop: {\n      type: \"number\",\n      defalut: 18,\n    },\n    titleMarginRight: {\n      type: \"number\",\n      default: 0,\n    },\n    titleMarginBottom: {\n      type: \"number\",\n      default: 0,\n    },\n    titleMarginLeft: {\n      type: \"number\",\n      default: 11,\n    },\n    titleOnOff: {\n      type: \"boolean\",\n      default: true,\n    },\n    iconPaddingTop: {\n      type: \"number\",\n      default: 16,\n    },\n    iconPaddingRight: {\n      type: \"number\",\n      default: 20,\n    },\n    titleTag: {\n      type: \"string\",\n      default: \"p\",\n    },\n    titleFF: {\n      type: \"string\",\n      default: \"Ubuntu Mono\",\n    },\n    iconBorder: {\n      type: \"boolean\",\n      default: false,\n    },\n    iconBorderWidth: {\n      type: \"number\",\n      default: 2,\n    },\n    iconBorderRadius: {\n      type: \"number\",\n      default: 50,\n    },\n    iconBorderColor: {\n      type: \"string\",\n      default: \"#ffa600\",\n    },\n    iconSpace: {\n      type: \"number\",\n      default: 79,\n    },\n    containerBorder: {\n      type: \"object\",\n      default: {\n        enable: true,\n        type: \"solid\",\n        color: \"yellow\",\n        width: 1,\n        radius: 0,\n      },\n    },\n  },\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFF,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      itemAlign,\n      titleOnOff,\n      iconPaddingTop,\n      iconPaddingRight,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n      containerBorder,\n    } = attributes;\n\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    // icon container style backgroundColor\n    let containerStyleBgColor = {\n      \"flex-direction\": titleArrenge,\n      paddingTop: iconPaddingTop + \"px\",\n      paddingRight: iconPaddingRight + \"px\",\n      paddingBottom: iconPaddingTop + \"px\",\n      paddingLeft: iconPaddingRight + \"px\",\n    };\n    //icon container border\n    if (containerBorder.enable) {\n      containerStyleBgColor[\n        \"border\"\n      ] = `${containerBorder.width}px ${containerBorder.type} ${containerBorder.color}`;\n      containerStyleBgColor[\"border-radius\"] = containerBorder.radius + \"px\";\n    }\n    // bg color solid or gradient\n    let bgColorOrGRadient = {};\n    if (iconBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: iconBgColor.color };\n    } else {\n      bgColorOrGRadient = { backgroundImage: iconBgColor.gradient };\n    }\n    containerStyleBgColor = {\n      ...containerStyleBgColor,\n      ...bgColorOrGRadient,\n    };\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Icon Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Choose Icon\", \"unlimited-blocks\")}</strong>\n            </p>\n\n            <div\n              ref={iconReff}\n              className={`wpgt-radio-wrap ${\n                activeIconContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                className=\"selected-icon\"\n                onClick={(e) => {\n                  // let set__container = !activeIconContainer;\n                  activeIconContainerSet(true);\n                }}\n              >\n                <i className={iconClass}></i>\n                <div className=\"search-container\">\n                  <i className=\"fas fa-search\"></i>\n                  <input\n                    type=\"text\"\n                    onChange={(e) => {\n                      let value_ = e.target.value;\n                      if (value_ != \"\") {\n                        let newAr = icons_.filter(\n                          (checkStr) => checkStr.search(value_) != -1\n                        );\n                        if (newAr.length) {\n                          setIconList(newAr);\n                        }\n                      } else {\n                        setIconList(icons_);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n              <div\n                className=\"wpgt-radio-container\"\n                onChange={(e) => {\n                  setAttributes({ iconClass: e.target.value });\n                }}\n              >\n                {iconList.map((iconValue) => {\n                  return (\n                    <div className=\"wpgt-radio-wrapper\">\n                      <input\n                        id={\"wpgt-Radio-\" + iconValue}\n                        type=\"radio\"\n                        name=\"wpgt-choose-icon\"\n                        className=\"radio-input\"\n                        value={iconValue}\n                      />\n                      <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                        <i className={iconValue}></i>\n                      </label>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <p>\n              <strong>{__(\"Icon Position\", \"unlimited-blocks\")}</strong>\n            </p>\n            <SelectControl\n              value={titleArrenge} // e.g: value = [ 'a', 'c' ]\n              onChange={(e) => {\n                setAttributes({\n                  titleArrenge: e,\n                  titleMarginTop: 0,\n                  titleMarginRight: 0,\n                  titleMarginBottom: 0,\n                  titleMarginLeft: 0,\n                });\n              }}\n              options={[\n                { value: null, label: \"Select a User\", disabled: true },\n                { value: \"unset\", label: \"Left\" },\n                { value: \"row-reverse\", label: \"Right\" },\n                { value: \"column\", label: \"Top\" },\n                { value: \"column-reverse\", label: \"Bottom\" },\n              ]}\n            />\n            <p>\n              <strong>\n                {__(\"Space Between Icon and Title\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            {titleArrenge == \"column\" && (\n              <RangeControl\n                label={__(\"Top\", \"unlimited-blocks\")}\n                value={titleMarginTop}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginTop: e })}\n              />\n            )}\n            {titleArrenge == \"row-reverse\" && (\n              <RangeControl\n                label={__(\"Right\", \"unlimited-blocks\")}\n                value={titleMarginRight}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginRight: e })}\n              />\n            )}\n            {titleArrenge == \"column-reverse\" && (\n              <RangeControl\n                label={__(\"Bottom\", \"unlimited-blocks\")}\n                value={titleMarginBottom}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginBottom: e })}\n              />\n            )}\n            {titleArrenge == \"unset\" && (\n              <RangeControl\n                label={__(\"Left\", \"unlimited-blocks\")}\n                value={titleMarginLeft}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ titleMarginLeft: e })}\n              />\n            )}\n\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={iconFontsize}\n              min={0}\n              max={100}\n              onChange={(e) => setAttributes({ iconFontsize: e })}\n            />\n            <p>\n              <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                iconBorder\n                  ? __(\"Disable\", \"unlimited-blocks\")\n                  : __(\"Enable\", \"unlimited-blocks\")\n              }\n              checked={iconBorder}\n              onChange={(e) => setAttributes({ iconBorder: e })}\n            />\n            {iconBorder && (\n              <div className=\"icon-border-setting\">\n                <RangeControl\n                  label={__(\"Border Width\", \"unlimited-blocks\")}\n                  value={iconBorderWidth}\n                  min={0}\n                  max={100}\n                  onChange={(e) => setAttributes({ iconBorderWidth: e })}\n                />\n                <RangeControl\n                  label={__(\"Border Radius\", \"unlimited-blocks\")}\n                  value={iconBorderRadius}\n                  min={0}\n                  max={50}\n                  onChange={(e) => setAttributes({ iconBorderRadius: e })}\n                />\n                <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n                <ColorPalette\n                  onChange={(color) =>\n                    setAttributes({ iconBorderColor: color })\n                  }\n                />\n                <RangeControl\n                  label={__(\"Icon Space\", \"unlimited-blocks\")}\n                  value={iconSpace}\n                  min={0}\n                  max={200}\n                  onChange={(e) => setAttributes({ iconSpace: e })}\n                />\n              </div>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Title Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                titleOnOff\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={titleOnOff}\n              onChange={(e) => setAttributes({ titleOnOff: e })}\n            />\n            <p>\n              <strong>{__(\"Choose Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <SelectControl\n              value={titleTag} // e.g: value = [ 'a', 'c' ]\n              onChange={(e) => setAttributes({ titleTag: e })}\n              options={[\n                {\n                  value: null,\n                  label: __(\"Choose Tag\", \"unlimited-blocks\"),\n                  disabled: true,\n                },\n                { value: \"h1\", label: \"h1\" },\n                { value: \"h2\", label: \"h2\" },\n                { value: \"h3\", label: \"h3\" },\n                { value: \"h4\", label: \"h4\" },\n                { value: \"h5\", label: \"h5\" },\n                { value: \"h6\", label: \"h6\" },\n                { value: \"p\", label: \"p\" },\n              ]}\n            />\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={titleFontsize}\n              min={0}\n              max={100}\n              onChange={(e) => setAttributes({ titleFontsize: e })}\n            />\n            {/* font family */}\n            <div className=\"THK-font-family-wrapper\">\n              <p>\n                <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div\n                ref={familyRef2}\n                className={`font-family-drop-down ${\n                  activeFamilyContainer2 ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  onClick={() => {\n                    let applyActive = !activeFamilyContainer2;\n                    activeFamilyDrop2(applyActive);\n                  }}\n                  className=\"font-family-show\"\n                >\n                  <span style={{ fontFamily: titleFF }}>\n                    {titleFF\n                      ? titleFF\n                      : __(\"Choose Family\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <div className=\"family-items\">\n                  {fontFamily.map((family, key_) => {\n                    return (\n                      <span\n                        onClick={() => setAttributes({ titleFF: family })}\n                        style={{ fontFamily: family }}\n                      >\n                        {family}\n                      </span>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n            {/* font family */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Color Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n                className={iconBgColor.type == \"color\" ? \"selected\" : \"\"}\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n                className={iconBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == iconBgColor.type ? (\n              <ColorPicker\n                color={iconBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"color\"] = color;\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={iconBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...iconBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  setAttributes({ iconBgColor: getBgcolor });\n                }}\n              />\n            )}\n            {/* bg color  */}\n\n            <p>\n              <strong>{__(\"Icon Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              onChange={(color) => setAttributes({ iconColor: color })}\n            />\n            <p>\n              <strong>{__(\"Title Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette onChange={(e) => setAttributes({ titleColor: e })} />\n          </PanelBody>\n\n          <PanelBody\n            title={__(\"Container Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Padding\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              label={__(\"Top & Bottom\", \"unlimited-blocks\")}\n              value={iconPaddingTop}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ iconPaddingTop: e })}\n            />\n            <RangeControl\n              label={__(\"Left & Right\", \"unlimited-blocks\")}\n              value={iconPaddingRight}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ iconPaddingRight: e })}\n            />\n            <p>\n              <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                containerBorder.enable\n                  ? __(\"Disable\", \"unlimited-blocks\")\n                  : __(\"Enable\", \"unlimited-blocks\")\n              }\n              checked={containerBorder.enable}\n              onChange={(e) => {\n                let settingBrder = { ...containerBorder };\n                settingBrder[\"enable\"] = e;\n                setAttributes({ containerBorder: settingBrder });\n              }}\n            />\n            {containerBorder.enable && (\n              <div className=\"icon-border-setting\">\n                <div className=\"ubl-multiple-select\">\n                  <SelectControl\n                    label={__(\"Border Style\", \"unlimited-blocks\")}\n                    value={containerBorder.type}\n                    onChange={(choosen) => {\n                      let settingBrder = { ...containerBorder };\n                      settingBrder[\"type\"] = choosen;\n                      setAttributes({ containerBorder: settingBrder });\n                    }}\n                    options={[\n                      {\n                        value: \"solid\",\n                        label: __(\"Solid\", \"unlimited-blocks\"),\n                      },\n                      {\n                        value: \"dotted\",\n                        label: __(\"Dotted\", \"unlimited-blocks\"),\n                      },\n                      {\n                        value: \"dashed\",\n                        label: __(\"Dashed\", \"unlimited-blocks\"),\n                      },\n                    ]}\n                  />\n                </div>\n                <RangeControl\n                  label={__(\"Border Radius\", \"unlimited-blocks\")}\n                  value={containerBorder.redius}\n                  min={0}\n                  max={50}\n                  onChange={(e) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"radius\"] = e;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n                <RangeControl\n                  label={__(\"Border Width\", \"unlimited-blocks\")}\n                  value={containerBorder.width}\n                  min={0}\n                  max={100}\n                  onChange={(e) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"width\"] = e;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n                <ColorPalette\n                  label={__(\"Border Color\", \"unlimited-blocks\")}\n                  value={containerBorder.color}\n                  onChange={(color) => {\n                    let settingBrder = { ...containerBorder };\n                    settingBrder[\"color\"] = color;\n                    setAttributes({ containerBorder: settingBrder });\n                  }}\n                />\n              </div>\n            )}\n          </PanelBody>\n        </InspectorControls>\n        <>\n          <BlockControls>\n            <AlignmentToolbar\n              value={itemAlign}\n              onChange={(e) => {\n                let side =\n                  e == \"left\" ? \"left\" : e == \"right\" ? \"flex-end\" : \"center\";\n                setAttributes({ itemAlign: side });\n              }}\n            />\n            {/* <Toolbar label=\"Options\">\n              <ToolbarItem as={Button}>I am a toolbar button</ToolbarItem>\n              <ToolbarItem as=\"button\">I am another toolbar button</ToolbarItem>\n            </Toolbar> */}\n          </BlockControls>\n          <div\n            className=\"themehunk-icon-block\"\n            style={{\n              \"justify-content\": itemAlign,\n            }}\n          >\n            <div style={containerStyleBgColor}>\n              <div className=\"icon-container\" style={borderStyle}>\n                <i\n                  style={{\n                    color: iconColor,\n                    fontSize: iconFontsize + \"px\",\n                  }}\n                  className={iconClass}\n                ></i>\n              </div>\n              {titleOnOff && (\n                <div className=\"text-container\">\n                  <RichText\n                    key=\"editable\"\n                    tagName={titleTag}\n                    placeholder=\"Icon Title\"\n                    allowedFormats={[]}\n                    value={titleTxt}\n                    onChange={(e) => setAttributes({ titleTxt: e })}\n                    style={{\n                      color: titleColor,\n                      fontSize: titleFontsize + \"px\",\n                      marginTop: titleMarginTop + \"px\",\n                      marginRight: titleMarginRight + \"px\",\n                      marginBottom: titleMarginBottom + \"px\",\n                      marginLeft: titleMarginLeft + \"px\",\n                      fontFamily: titleFF,\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      </>\n    );\n  },\n  save: ({ attributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      titleFF,\n      itemAlign,\n      titleOnOff,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n      iconPaddingTop,\n      iconPaddingRight,\n      containerBorder,\n    } = attributes;\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n    // icon container style backgroundColor\n    let containerStyleBgColor = {\n      \"flex-direction\": titleArrenge,\n      paddingTop: iconPaddingTop + \"px\",\n      paddingRight: iconPaddingRight + \"px\",\n      paddingBottom: iconPaddingTop + \"px\",\n      paddingLeft: iconPaddingRight + \"px\",\n    };\n    //icon container border\n    if (containerBorder.enable) {\n      containerStyleBgColor[\n        \"border\"\n      ] = `${containerBorder.width}px ${containerBorder.type} ${containerBorder.color}`;\n      containerStyleBgColor[\"border-radius\"] = containerBorder.radius + \"px\";\n    }\n    // bg color solid or gradient\n    let bgColorOrGRadient = {};\n    if (iconBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: iconBgColor.color };\n    } else {\n      bgColorOrGRadient = { backgroundImage: iconBgColor.gradient };\n    }\n    containerStyleBgColor = {\n      ...containerStyleBgColor,\n      ...bgColorOrGRadient,\n    };\n    return (\n      <div\n        className=\"themehunk-icon-block\"\n        style={{\n          \"justify-content\": itemAlign,\n        }}\n      >\n        <div style={containerStyleBgColor}>\n          <div className=\"icon-container\" style={borderStyle}>\n            <i\n              style={{\n                color: iconColor,\n                fontSize: iconFontsize + \"px\",\n              }}\n              className={iconClass}\n            ></i>\n          </div>\n          {titleOnOff && (\n            <div className=\"text-container\">\n              <RichText.Content\n                tagName={titleTag}\n                value={titleTxt}\n                style={{\n                  color: titleColor,\n                  fontSize: titleFontsize + \"px\",\n                  marginTop: titleMarginTop + \"px\",\n                  marginRight: titleMarginRight + \"px\",\n                  marginBottom: titleMarginBottom + \"px\",\n                  marginLeft: titleMarginLeft + \"px\",\n                  fontFamily: titleFF,\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      thumbnail: \"primary\",\n      blockTitle: \"title\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          {post.feature_image && post.feature_image != \"\" && thumbnail_.enable && (\n            <div className=\"featured-image\">\n              <img\n                style={{\n                  borderRadius: thumbnail_.borderRadius + \"px\",\n                }}\n                src={post.feature_image}\n              />\n            </div>\n          )}\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n  navCategory = (cateTrue, title_) => {\n    let category_ = this.state.category;\n    let makingCate = [];\n    if ((category_ && category_.length) || title_.enable) {\n      // under line\n      let mUnderLine = this.props.attributes.meta_style[0];\n      let mUnderLineSt = mUnderLine.underLine\n        ? { borderColor: mUnderLine.underLineColor }\n        : null;\n      // choosen category only show in nav\n      if (cateTrue.enable && category_ && category_.length) {\n        if (this.props.attributes.postCategories.length) {\n          this.props.attributes.postCategories.map((choosenCate) => {\n            category_.map((existCate) => {\n              if (existCate.slug == choosenCate) {\n                makingCate.push(existCate);\n                return;\n              }\n            });\n          });\n        } else {\n          makingCate = category_;\n        }\n      }\n      return (\n        <div className=\"navigation_\" style={mUnderLineSt}>\n          {title_.enable && (\n            <div className=\"nav-heading\">\n              <RichText\n                allowedFormats={[]}\n                key=\"editable\"\n                onChange={(e) =>\n                  this.updateObj(\n                    \"title\",\n                    \"value\",\n                    this.props.attributes.title,\n                    e\n                  )\n                }\n                className=\"post-heading\"\n                tagName=\"h4\"\n                value={title_.value}\n                style={{\n                  backgroundColor: title_.bgColor,\n                  color: title_.color,\n                  fontSize: title_.fontSize + \"px\",\n                }}\n              />\n            </div>\n          )}\n          {cateTrue.enable && makingCate.length != 0 && (\n            <>\n              <div class=\"nav-linear-items\">\n                <ul>\n                  <li class=\"cat-item cat-item-all\">\n                    <a\n                      style={{\n                        fontSize: cateTrue.fontSize + \"px\",\n                        color: cateTrue.color,\n                        backgroundColor: cateTrue.backgroundColor,\n                      }}\n                      href=\"#\"\n                    >\n                      {__(\"all\", \"unlimited-blocks\")}\n                    </a>\n                  </li>\n                  {makingCate.map((cateV, cKey) => {\n                    return (\n                      cKey <= 3 && (\n                        <li class=\"cat-item\">\n                          <a\n                            style={{\n                              fontSize: cateTrue.fontSize + \"px\",\n                              color: cateTrue.color,\n                              backgroundColor: cateTrue.backgroundColor,\n                            }}\n                            href=\"#\"\n                          >\n                            {cateV.name}\n                          </a>\n                        </li>\n                      )\n                    );\n                  })}\n                </ul>\n              </div>\n              {makingCate.length >= 5 && (\n                <div class=\"nav-drop-items\">\n                  <span\n                    style={{\n                      fontSize: cateTrue.fontSize + \"px\",\n                      color: cateTrue.color,\n                      backgroundColor: cateTrue.backgroundColor,\n                    }}\n                    class=\"more-opener\"\n                  >\n                    {__(\"More\", \"unlimited-blocks\")}\n                    <i class=\"fas fa-chevron-down\"></i>\n                  </span>\n                  <ul>\n                    {makingCate.map((cateV, cKey) => {\n                      return (\n                        cKey >= 4 && (\n                          <li class=\"cat-item\">\n                            <a\n                              style={{\n                                fontSize: cateTrue.fontSize + \"px\",\n                                color: cateTrue.color,\n                                backgroundColor: cateTrue.backgroundColor,\n                              }}\n                              href=\"#\"\n                            >\n                              {cateV.name}\n                            </a>\n                          </li>\n                        )\n                      );\n                    })}\n                  </ul>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      );\n    }\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    // console.log(\"category props->\", this.props);\n    const { posts, category, totalPost } = this.state;\n    // console.log(\"state props posts->\", this.state);\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      heading2,\n      excerpt2,\n      author2,\n      date2,\n      showCate2,\n      postCategories,\n      meta_style,\n      meta_style2,\n      thumbnail2,\n      title,\n      categorynav,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let thumbnail2_ = thumbnail2[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody title=\"Block Title / Navigation\" initialOpen={false}>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ blockTitle: \"title\" })}\n                className={this.state.blockTitle == \"title\" ? \"selected\" : \"\"}\n              >\n                {__(\"Title\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ blockTitle: \"nav\" })}\n                className={this.state.blockTitle == \"nav\" ? \"selected\" : \"\"}\n              >\n                {__(\"Navigation\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.blockTitle == \"title\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    title_.enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={title_.enable}\n                  onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n                />\n                {title_.enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={title_.fontSize}\n                      min={5}\n                      max={50}\n                      onChange={(e) => {\n                        this.updateObj(\"title\", \"fontSize\", title, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={title_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"title\", \"color\", title, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={title_.bgColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\"title\", \"bgColor\", title, color);\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    categorynav[0].enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={categorynav[0].enable}\n                  onChange={(e) =>\n                    this.updateObj(\"categorynav\", \"enable\", categorynav, e)\n                  }\n                />\n                {categorynav[0].enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={categorynav[0].fontSize}\n                      min={5}\n                      max={50}\n                      onChange={(e) => {\n                        this.updateObj(\n                          \"categorynav\",\n                          \"fontSize\",\n                          categorynav,\n                          e\n                        );\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={categorynav[0].color}\n                      onChange={(color) =>\n                        this.updateObj(\n                          \"categorynav\",\n                          \"color\",\n                          categorynav,\n                          color\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={categorynav[0].bgColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"categorynav\",\n                          \"backgroundColor\",\n                          categorynav,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* under line */}\n            {(title_.enable || categorynav[0].enable) && (\n              <>\n                <p>\n                  <strong>{__(\"Under Line\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={meta_style_.underLine ? \"Show\" : \"Hide\"}\n                  checked={meta_style_.underLine}\n                  onChange={(e) =>\n                    this.updateObj(\"meta_style\", \"underLine\", meta_style, e)\n                  }\n                />\n                {meta_style_.underLine && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={meta_style_.underLineColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"meta_style\",\n                          \"underLineColor\",\n                          meta_style,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>\n                {__(\"Number of Post Display\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n            <p>\n              <strong>{__(\"Layout Position\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"meta_style\",\n                    \"layoutPosition\",\n                    meta_style,\n                    \"left\"\n                  )\n                }\n                className={\n                  meta_style_.layoutPosition == \"left\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Left\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"meta_style\",\n                    \"layoutPosition\",\n                    meta_style,\n                    \"right\"\n                  )\n                }\n                className={\n                  meta_style_.layoutPosition == \"right\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Right\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p>\n              <strong>\n                {__(\"Block Background Color\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ heading: \"primary\" })}\n                className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ heading: \"secondary\" })}\n                className={this.state.heading == \"secondary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ excerpt: \"primary\" })}\n                className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ excerpt: \"secondary\" })}\n                className={this.state.excerpt == \"secondary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={excerpt_.enable ? \"Show\" : \"Hide\"}\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>\n                        {__(\"Number of words\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Show\", \"unlimited-blocks\")\n                      : __(\"Hide\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>\n                        {__(\"Number of words\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                thumbnail_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={thumbnail_.enable}\n              onChange={(e) =>\n                this.updateObj(\"thumbnail\", \"enable\", thumbnail, e)\n              }\n            />\n            {thumbnail_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Meta\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ metaChoose: \"primary\" })}\n                className={this.state.metaChoose == \"primary\" ? \"selected\" : \"\"}\n              >\n                {__(\"Primary\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                className={\n                  this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Secondary\", \"unlimited-blocks\")}\n              </span>\n            </div>\n\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Color\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>\n                    {__(\"Author/Dates Color\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <p>\n                <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n              </p>\n              <RangeControl\n                value={meta_style_.npBgfontSize}\n                min={1}\n                max={30}\n                onChange={(e) => {\n                  this.updateObj(\"meta_style\", \"npBgfontSize\", meta_style, e);\n                }}\n              />\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={meta_style_.npColor}\n                onChange={(color) =>\n                  this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                }\n              />\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPicker\n                color={meta_style_.npBgColor}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  this.updateObj(\"meta_style\", \"npBgColor\", meta_style, color);\n                }}\n              />\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-two-post-wrapper\" style={bgColorOrGRadient}>\n            {this.navCategory(categorynav[0], title_)}\n            <div\n              className={`ubl-post-two-column column-layout-${meta_style_.layoutPosition}`}\n            >\n              <div className=\"column-one\">\n                {this.returnHtml(\n                  posts[0],\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_\n                )}\n              </div>\n              <div className=\"column-two\">\n                {posts.length > 1 &&\n                  posts.map((post, index__) => {\n                    return (\n                      index__ != 0 &&\n                      this.returnHtml(\n                        post,\n                        heading2_,\n                        author2_,\n                        date2_,\n                        meta_style2_,\n                        thumbnail_,\n                        showCate2_,\n                        excerpt2_,\n                        false\n                      )\n                    );\n                  })}\n              </div>\n            </div>\n            {posts && posts.length > 0 && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_category_layout } = blocksDetail;\nconst attrSave = {};\nregisterBlockType(\"unlimited-blocks/ubl-post-tc\", {\n  title: post_category_layout.title,\n  description: post_category_layout.description,\n  icon: post_category_layout.icon,\n  keywords: post_category_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let { thumbnail } = this.props.attributes;\n    let sendData = {};\n    if (thumbnail[0].typeShow == \"1\") {\n      sendData[\"featured_image\"] = 1;\n    }\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      numberOfColumn,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Column\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfColumn}\n              min={2}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfColumn: e });\n              }}\n            />\n            <p>\n              <strong>\n                {__(\"Number of Post Display\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={24}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, {\n                  numberOfPosts: e,\n                  featured_image: this.props.attributes.thumbnail[0].typeShow,\n                });\n              }}\n            />\n            <ToggleControl\n              label={__(\"Left Border\", \"unlimited-blocks\")}\n              checked={meta_style_.left_border}\n              onChange={(e) =>\n                this.updateObj(\"meta_style\", \"left_border\", meta_style, e)\n              }\n            />\n            <p>\n              <strong>\n                {__(\"Block Background Color\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <select\n              value={thumbnail_.typeShow}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                this.updateObj(\"thumbnail\", \"typeShow\", thumbnail, value_);\n                filterPostInit(this, {\n                  featured_image: value_,\n                });\n              }}\n            >\n              <option value=\"all\">{__(\"All Post\", \"unlimited-blocks\")}</option>\n              <option value=\"1\">\n                {__(\"Only Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n            </select>\n\n            {(thumbnail_.typeShow == \"all\" || thumbnail_.typeShow == \"1\") && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Meta\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image:\n                        this.props.attributes.thumbnail[0].typeShow,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">\n              {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n            </p>\n            <p>\n              <strong>\n                {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {totalPost && totalPost > posts.length && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>\n                      {__(\"Pagination Number\", \"unlimited-blocks\")}\n                    </strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      meta_style_.npPagination\n                        ? __(\"Pagination On\", \"unlimited-blocks\")\n                        : __(\"Next Previous On\", \"unlimited-blocks\")\n                    }\n                    checked={meta_style_.npPagination}\n                    onChange={(e) =>\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npPagination\",\n                        meta_style,\n                        e\n                      )\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>\n                      {__(\"Background Color\", \"unlimited-blocks\")}\n                    </strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-block-post\" style={bgColorOrGRadient}>\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-${numberOfColumn} ${\n                meta_style_.left_border && \"left-border\"\n              }`}\n            >\n              {posts.map((post) => {\n                let postAuthor =\n                  author_ && author_.enable ? post.author : false;\n                return thumbnail_.typeShow == \"1\" &&\n                  post.feature_image != \"\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      <div className=\"featured-image\">\n                        <img\n                          style={{\n                            borderRadius: thumbnail_.borderRadius + \"px\",\n                          }}\n                          src={post.feature_image}\n                        />\n                      </div>\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize + \"px\",\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize + \"px\",\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>\n                                  {__(\"Modified:\", \"unlimited-blocks\")}{\" \"}\n                                </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{\n                              color: excerpt_.color,\n                              fontSize: excerpt_.fontSize + \"px\",\n                            }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : thumbnail_.typeShow != \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      {post.feature_image &&\n                        post.feature_image != \"\" &&\n                        thumbnail_.typeShow == \"all\" && (\n                          <div className=\"featured-image\">\n                            <img\n                              style={{\n                                borderRadius: thumbnail_.borderRadius + \"px\",\n                              }}\n                              src={post.feature_image}\n                            />\n                          </div>\n                        )}\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize,\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>\n                                  {__(\"Modified:\", \"unlimited-blocks\")}{\" \"}\n                                </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{ color: excerpt_.color }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : (\n                  \"\"\n                );\n              })}\n            </div>\n            {meta_style_.npEnable && totalPost && totalPost > posts.length ? (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                {meta_style_.npPagination && (\n                  <section className=\"paginationNumbers\">\n                    {[1, 2, 3].map((pagiV) => {\n                      return (\n                        <div\n                          className=\"ubl-image-section-np  pagination\"\n                          style={{\n                            fontSize: meta_style_.npBgfontSize,\n                            color: meta_style_.npColor,\n                            backgroundColor: meta_style_.npBgColor,\n                          }}\n                        >\n                          {pagiV}\n                        </div>\n                      );\n                    })}\n                    <div class=\"dots pagination\">\n                      <span>...</span>\n                    </div>\n                    <div\n                      className=\"ubl-image-section-np  pagination\"\n                      style={{\n                        fontSize: meta_style_.npBgfontSize,\n                        color: meta_style_.npColor,\n                        backgroundColor: meta_style_.npBgColor,\n                      }}\n                    >\n                      4\n                    </div>\n                  </section>\n                )}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\n\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_grid_layouts } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-grid\", {\n  title: post_grid_layouts.title,\n  description: post_grid_layouts.description,\n  icon: post_grid_layouts.icon,\n  keywords: post_grid_layouts.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let layout_ = layout[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // if number of post sum\n    if (\n      (numberOfPosts == 3 || numberOfPosts == 5 || layout_.type == 3) &&\n      (this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\")\n    ) {\n      this.setState({\n        metaChoose: \"primary\",\n        excerpt: \"primary\",\n        heading: \"primary\",\n      });\n    }\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>{__(\"Choose Layout\", \"unlimited-blocks\")}</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {layout_.type == 3 && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post ubl-post-five-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`parent-column-two column-count  post-five-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 2 ? (\n                <>\n                  <div>\n                    <div className=\"column-count column-count-2\">\n                      {posts.map((post, in_) => {\n                        return (\n                          in_ < 4 &&\n                          this.returnHtml(\n                            post,\n                            heading2_,\n                            author2_,\n                            date2_,\n                            meta_style2_,\n                            showCate2_,\n                            excerpt2_,\n                            showTag2_,\n                            layout_\n                          )\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"column-count column-count-1\">\n                      {posts.length > 4 &&\n                        this.returnHtml(\n                          posts[4],\n                          heading_,\n                          author_,\n                          date_,\n                          meta_style_,\n                          showCate_,\n                          excerpt_,\n                          showTag_,\n                          layout_\n                        )}\n                    </div>\n                  </div>\n                </>\n              ) : layout_.type == 3 ? (\n                posts.map((post, in_) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : (\n                <>\n                  <div>\n                    <div className=\"column-count column-count-1\">\n                      {this.returnHtml(\n                        posts[0],\n                        heading_,\n                        author_,\n                        date_,\n                        meta_style_,\n                        showCate_,\n                        excerpt_,\n                        showTag_,\n                        layout_\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"column-count column-count-2\">\n                      {posts.map((post, in_) => {\n                        return (\n                          in_ != 0 &&\n                          this.returnHtml(\n                            post,\n                            heading2_,\n                            author2_,\n                            date2_,\n                            meta_style2_,\n                            showCate2_,\n                            excerpt2_,\n                            showTag2_,\n                            layout_\n                          )\n                        );\n                      })}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_five_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-five-post\", {\n  title: post_image_layout_five_post.title,\n  description: post_image_layout_five_post.description,\n  icon: post_image_layout_five_post.icon,\n  keywords: post_image_layout_five_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    let layout_ = layout[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // if number of post sum\n    if (layout_.type == 3 || layout_.type == 4) {\n      if (\n        this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\"\n      ) {\n        this.setState({\n          metaChoose: \"primary\",\n          excerpt: \"primary\",\n          heading: \"primary\",\n        });\n      }\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>Font Weight</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>Choose Layout</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n                <option value=\"4\">{__(\"Layout Four\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {(layout_.type == 3 || layout_.type == 4) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* <ColorPicker\n              color={layout_.overlayColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateObj(\"layout\", \"overlayColor\", layout, color);\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {(layout_.type !== 3 || layout_.type !== 4) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post ubl-post-four-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-2 post-four-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 3 || layout_.type == 4 ? (\n                posts.map((post) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : layout_.type == 2 ? (\n                <>\n                  <div className=\"column-one\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading2_,\n                      author2_,\n                      date2_,\n                      meta_style2_,\n                      showCate2_,\n                      excerpt2_,\n                      showTag2_,\n                      layout_\n                    )}\n                    <div>\n                      {posts.length >= 2 &&\n                        posts.map((post, in_) => {\n                          return (\n                            in_ != 0 &&\n                            in_ <= 2 &&\n                            this.returnHtml(\n                              post,\n                              heading2_,\n                              author2_,\n                              date2_,\n                              meta_style2_,\n                              showCate2_,\n                              excerpt2_,\n                              showTag2_,\n                              layout_\n                            )\n                          );\n                        })}\n                    </div>\n                  </div>\n                  <div className=\"column-two\">\n                    {posts.length > 2 &&\n                      this.returnHtml(\n                        posts[3],\n                        heading_,\n                        author_,\n                        date_,\n                        meta_style_,\n                        showCate_,\n                        excerpt_,\n                        showTag_,\n                        layout_\n                      )}\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"column-one\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading_,\n                      author_,\n                      date_,\n                      meta_style_,\n                      showCate_,\n                      excerpt_,\n                      showTag_,\n                      layout_\n                    )}\n                  </div>\n                  <div className=\"column-two\">\n                    {posts.length >= 1 &&\n                      this.returnHtml(\n                        posts[1],\n                        heading2_,\n                        author2_,\n                        date2_,\n                        meta_style2_,\n                        showCate2_,\n                        excerpt2_,\n                        showTag2_,\n                        layout_\n                      )}\n                    <div>\n                      {posts.length >= 2 &&\n                        posts.map((post, in_) => {\n                          return (\n                            in_ >= 2 &&\n                            this.returnHtml(\n                              post,\n                              heading2_,\n                              author2_,\n                              date2_,\n                              meta_style2_,\n                              showCate2_,\n                              excerpt2_,\n                              showTag2_,\n                              layout_\n                            )\n                          );\n                        })}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_four_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-four-post\", {\n  title: post_image_layout_four_post.title,\n  description: post_image_layout_four_post.description,\n  icon: post_image_layout_four_post.icon,\n  keywords: post_image_layout_four_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // metaChoose: \"primary\",\n      // excerpt: \"primary\",\n      // heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      // meta_style2,\n      title,\n      // secondary\n      // heading2,\n      // excerpt2,\n      // showCate2,\n      // showTag2,\n      // date2,\n      // author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    // let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {/* <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n              }}\n            />\n          </PanelBody> */}\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this,{\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div className={`column-count column-count-3`}>\n              {posts.map((post) => {\n                return this.returnHtml(\n                  post,\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  {__(\"...Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport { __ } from \"@wordpress/i18n\";\nimport Edit from \"./edit\";\nconst attrSave = {};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_six_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-six-post\", {\n  title: post_image_layout_six_post.title,\n  description: post_image_layout_six_post.description,\n  icon: post_image_layout_six_post.icon,\n  keywords: post_image_layout_six_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  keywords: [\"post\"],\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      layout,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    let layout_ = layout[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // if number of post sum\n    if (layout_.type == 3) {\n      if (\n        this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\"\n      ) {\n        this.setState({\n          metaChoose: \"primary\",\n          excerpt: \"primary\",\n          heading: \"primary\",\n        });\n      }\n    }\n    // if number of post sum\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <div className=\"flex-section\">\n              <p>Choose Layout</p>\n              <select\n                value={layout_.type}\n                onChange={(e) => {\n                  let value_ = parseInt(e.target.value);\n                  this.updateObj(\"layout\", \"type\", layout, value_);\n                }}\n              >\n                <option value=\"1\">{__(\"Layout One\", \"unlimited-blocks\")}</option>\n                <option value=\"2\">{__(\"Layout Two\", \"unlimited-blocks\")}</option>\n                <option value=\"3\">{__(\"Layout Three\", \"unlimited-blocks\")}</option>\n              </select>\n            </div>\n            {layout_.type == 3 && (\n              <>\n                <p>\n                  <strong>{__(\"Content Placed\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"inner\")\n                    }\n                    className={\n                      layout_.contentPlace == \"inner\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Inner\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentPlace\", layout, \"outer\")\n                    }\n                    className={\n                      layout_.contentPlace == \"outer\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Outer\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            {(layout_.type == 2 ||\n              layout_.type == 1 ||\n              (layout_.type == 3 && layout_.contentPlace == \"inner\")) && (\n              <>\n                <p>\n                  <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                    }\n                    className={\n                      layout_.contentAlign == \"center\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Center\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() =>\n                      this.updateObj(\"layout\", \"contentAlign\", layout, \"bottom\")\n                    }\n                    className={\n                      layout_.contentAlign == \"bottom\" ? \"selected\" : \"\"\n                    }\n                  >\n                    {__(\"Bottom\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {layout_.type != 3 && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* primery and secondary */}\n            {layout_.type != 3 && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n          {posts && posts.length > 0 && posts.length < totalPost && (\n            <PanelBody title=\"Next / Previous Button\" initialOpen={false}>\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n\n            <div\n              className={`parent-column-two count-3 post-three-layout-${layout_.type} content-align-${layout_.contentAlign} content-placed-${layout_.contentPlace}`}\n            >\n              {layout_.type == 3 ? (\n                posts.map((post, in_) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_,\n                    layout_\n                  );\n                })\n              ) : (\n                <>\n                  {layout_.type == \"2\" ? (\n                    <>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {posts.map((post, in_) => {\n                            return (\n                              in_ < 2 &&\n                              this.returnHtml(\n                                post,\n                                heading2_,\n                                author2_,\n                                date2_,\n                                meta_style2_,\n                                showCate2_,\n                                excerpt2_,\n                                showTag2_,\n                                layout_\n                              )\n                            );\n                          })}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {this.returnHtml(\n                            posts[2],\n                            heading_,\n                            author_,\n                            date_,\n                            meta_style_,\n                            showCate_,\n                            excerpt_,\n                            showTag_,\n                            layout_\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {this.returnHtml(\n                            posts[0],\n                            heading_,\n                            author_,\n                            date_,\n                            meta_style_,\n                            showCate_,\n                            excerpt_,\n                            showTag_,\n                            layout_\n                          )}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"column-count column-count-1\">\n                          {posts.map((post, in_) => {\n                            return (\n                              in_ != 0 &&\n                              this.returnHtml(\n                                post,\n                                heading2_,\n                                author2_,\n                                date2_,\n                                meta_style2_,\n                                showCate2_,\n                                excerpt2_,\n                                showTag2_,\n                                layout_\n                              )\n                            );\n                          })}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n            {meta_style_.npEnable && posts.length < totalPost && (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_three_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-three-post\", {\n  title: post_image_layout_three_post.title,\n  description: post_image_layout_three_post.description,\n  icon: post_image_layout_three_post.icon,\n  keywords: post_image_layout_three_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n      layout,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    let layout_ = layout[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-left\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-left\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Left\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-center\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-center\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Center\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateObj(\n                    \"layout\",\n                    \"contentAlign\",\n                    layout,\n                    \"bottom-right\"\n                  )\n                }\n                className={\n                  layout_.contentAlign == \"bottom-right\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Bottom Right\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateObj(\"layout\", \"contentAlign\", layout, \"center\")\n                }\n                className={layout_.contentAlign == \"center\" ? \"selected\" : \"\"}\n              >\n                {__(\"Center\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n                className={\n                  layout_.overlayColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == layout_.overlayColor.type ? (\n              <ColorPicker\n                color={layout_.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={layout_.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...layout_.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={layout_.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...layout_.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateObj(\"layout\", \"overlayColor\", layout, getBgcolor);\n              }}\n            />\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div className=\"column-count column-count-2\">\n              {posts.map((post) => {\n                return this.returnHtml(\n                  post,\n                  heading_,\n                  author_,\n                  date_,\n                  meta_style_,\n                  thumbnail_,\n                  showCate_,\n                  excerpt_,\n                  showTag_,\n                  layout_\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    thumbnail_,\n    showCate_,\n    excerpt_,\n    showTag_,\n    layout_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    let contentStyle =\n      layout_.contentAlign == \"bottom-left\"\n        ? { alignItems: \"normal\" }\n        : layout_.contentAlign == \"bottom-center\"\n        ? { alignItems: \"center\" }\n        : layout_.contentAlign == \"bottom-right\"\n        ? { alignItems: \"flex-end\" }\n        : { alignItems: \"center\", justifyContent: \"center\" };\n    // layout_.overlayColor;\n    let bgColorOrGRadient = { opacity: layout_.overlayColor.opacity / 10 };\n    if (layout_.overlayColor.type == \"color\") {\n      bgColorOrGRadient[\"backgroundColor\"] = layout_.overlayColor.color;\n    } else {\n      bgColorOrGRadient[\"backgroundImage\"] = layout_.overlayColor.gradient;\n    }\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content-overlay\" style={bgColorOrGRadient}></div>\n          <div className=\"post-content\" style={contentStyle}>\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  {__(\"...Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrSave = {};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout_two_post } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section-two-post\", {\n  title: post_image_layout_two_post.title,\n  description: post_image_layout_two_post.description,\n  icon: post_image_layout_two_post.icon,\n  keywords: post_image_layout_two_post.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n} from \"@wordpress/components\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostLoader,\n  PostNotfound,\n} from \"../block-assets/post-functions\";\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metaChoose: \"primary\",\n      excerpt: \"primary\",\n      heading: \"primary\",\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    // ++++++++++++++===============\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      meta_style2,\n      title,\n      // secondary\n      heading2,\n      excerpt2,\n      showCate2,\n      showTag2,\n      date2,\n      author2,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let meta_style2_ = meta_style2[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // secondary\n    let heading2_ = heading2[0];\n    let excerpt2_ = excerpt2[0];\n    let showCate2_ = showCate2[0];\n    let showTag2_ = showTag2[0];\n    let date2_ = date2[0];\n    let author2_ = author2[0];\n    // if number of post sum\n    if (\n      (numberOfPosts == 3 || numberOfPosts == 5) &&\n      (this.state.metaChoose == \"secondary\" ||\n        this.state.excerpt == \"secondary\" ||\n        this.state.heading == \"secondary\")\n    ) {\n      this.setState({\n        metaChoose: \"primary\",\n        excerpt: \"primary\",\n        heading: \"primary\",\n      });\n    }\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Layout\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={6}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ heading: \"primary\" })}\n                  className={this.state.heading == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ heading: \"secondary\" })}\n                  className={\n                    this.state.heading == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.heading == \"primary\" ? (\n              <>\n                <p>\n                  <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading\", \"fontSize\", heading, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading\", \"color\", heading, color)\n                  }\n                />\n              </>\n            ) : (\n              <>\n                <p>\n                  <strong>{__(\"Heading Tag\", \"unlimited-blocks\")}</strong>\n                </p>\n                <select\n                  value={heading2_.tag}\n                  className=\"ubl-block-select\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    let font_ =\n                      value_ == \"h1\"\n                        ? 30\n                        : value_ == \"h2\"\n                        ? 25\n                        : value_ == \"h3\"\n                        ? 20\n                        : 17;\n                    let newHeading = [...heading2];\n                    newHeading[0][\"tag\"] = value_;\n                    newHeading[0][\"fontSize\"] = font_;\n                    setAttributes({ heading2: newHeading });\n                  }}\n                >\n                  <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n                  <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n                  <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n                  <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n                </select>\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={heading2_.fontSize}\n                  min={1}\n                  max={50}\n                  onChange={(e) =>\n                    this.updateObj(\"heading2\", \"fontSize\", heading2, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={heading2_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"heading2\", \"color\", heading2, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div className=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ excerpt: \"primary\" })}\n                  className={this.state.excerpt == \"primary\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ excerpt: \"secondary\" })}\n                  className={\n                    this.state.excerpt == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {this.state.excerpt == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"enable\", excerpt, e)\n                  }\n                />\n                {excerpt_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <ToggleControl\n                  label={\n                    excerpt2_.enable\n                      ? __(\"Hide\", \"unlimited-blocks\")\n                      : __(\"Show\", \"unlimited-blocks\")\n                  }\n                  checked={excerpt2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt2\", \"enable\", excerpt2, e)\n                  }\n                />\n                {excerpt2_.enable && (\n                  <>\n                    <p>\n                      <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.words}\n                      min={1}\n                      max={200}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"words\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={excerpt2_.fontSize}\n                      min={1}\n                      max={25}\n                      onChange={(e) =>\n                        this.updateObj(\"excerpt2\", \"fontSize\", excerpt2, e)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={excerpt2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"excerpt2\", \"color\", excerpt2, color)\n                      }\n                    />\n                  </>\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n            {/* category */}\n            {/* primery and secondary */}\n            {(numberOfPosts == 3 || numberOfPosts == 5) && (\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => this.setState({ metaChoose: \"primary\" })}\n                  className={\n                    this.state.metaChoose == \"primary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Primary\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => this.setState({ metaChoose: \"secondary\" })}\n                  className={\n                    this.state.metaChoose == \"secondary\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Secondary\", \"unlimited-blocks\")}\n                </span>\n              </div>\n            )}\n            {/* show author */}\n            {this.state.metaChoose == \"primary\" ? (\n              <>\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author\", \"enable\", author, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date_.enable}\n                  onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"enable\", showCate, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date\", \"last_modified\", date, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag\", \"enable\", showTag, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style\", \"color\", meta_style, color)\n                  }\n                />\n                {showCate_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"count\", showCate, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                      }\n                    />\n                    {showCate_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate_.color}\n                          onChange={(color) =>\n                            this.updateObj(\"showCate\", \"color\", showCate, color)\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate\",\n                              \"backgroundColor\",\n                              showCate,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"count\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag\", \"color\", showTag, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                {/* secondary  */}\n                {/* show author */}\n                <ToggleControl\n                  label={__(\"Author\", \"unlimited-blocks\")}\n                  checked={author2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"author2\", \"enable\", author2, e)\n                  }\n                />\n                {/* show date */}\n                <ToggleControl\n                  label={__(\"Date\", \"unlimited-blocks\")}\n                  checked={date2_.enable}\n                  onChange={(e) => this.updateObj(\"date2\", \"enable\", date2, e)}\n                />\n                <ToggleControl\n                  label={__(\"Categories\", \"unlimited-blocks\")}\n                  checked={showCate2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate2\", \"enable\", showCate2, e)\n                  }\n                />\n                {/* show last date */}\n                <ToggleControl\n                  label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n                  checked={date2_.last_modified}\n                  onChange={(e) =>\n                    this.updateObj(\"date2\", \"last_modified\", date2, e)\n                  }\n                />\n                <ToggleControl\n                  label={__(\"Tag\", \"unlimited-blocks\")}\n                  checked={showTag2_.enable}\n                  onChange={(e) =>\n                    this.updateObj(\"showTag2\", \"enable\", showTag2, e)\n                  }\n                />\n                <p class=\"block-inside\">\n                  {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={meta_style2_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) => {\n                    this.updateObj(\"meta_style2\", \"fontSize\", meta_style2, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={\"color\" in meta_style2_ ? meta_style2_.color : \"\"}\n                  onChange={(color) =>\n                    this.updateObj(\"meta_style2\", \"color\", meta_style2, color)\n                  }\n                />\n                {showCate2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"count\", showCate2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showCate2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showCate2\", \"fontSize\", showCate2, e);\n                      }}\n                    />\n                    <ToggleControl\n                      label={\n                        showCate2_.customColor\n                          ? __(\"Custom Style\", \"unlimited-blocks\")\n                          : __(\"Default Style\", \"unlimited-blocks\")\n                      }\n                      checked={showCate2_.customColor}\n                      onChange={(e) =>\n                        this.updateObj(\"showCate2\", \"customColor\", showCate2, e)\n                      }\n                    />\n                    {showCate2_.customColor && (\n                      <>\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={showCate2_.color}\n                          onChange={(color) =>\n                            this.updateObj(\n                              \"showCate2\",\n                              \"color\",\n                              showCate2,\n                              color\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Background Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={showCate2_.backgroundColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateObj(\n                              \"showCate2\",\n                              \"backgroundColor\",\n                              showCate2,\n                              color\n                            );\n                          }}\n                        />\n                      </>\n                    )}\n                  </>\n                )}\n                {showTag2_.enable && (\n                  <>\n                    <p class=\"block-inside\">\n                      {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                    </p>\n                    <p>\n                      <strong>\n                        {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.count}\n                      min={1}\n                      max={10}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"count\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <RangeControl\n                      value={showTag2_.fontSize}\n                      min={1}\n                      max={30}\n                      onChange={(e) => {\n                        this.updateObj(\"showTag2\", \"fontSize\", showTag2, e);\n                      }}\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showTag2_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showTag2\", \"color\", showTag2, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showTag2_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showTag\",\n                          \"backgroundColor\",\n                          showTag2,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {/* secondary  */}\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-section-post\">\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            {(posts.length == 1 ||\n              posts.length == 2 ||\n              posts.length == 4 ||\n              posts.length == 6) && (\n              <div\n                className={`column-count column-count-${\n                  posts.length == 2 || posts.length == 4\n                    ? 2\n                    : posts.length == 6\n                    ? 3\n                    : 1\n                }`}\n              >\n                {posts.map((post) => {\n                  return this.returnHtml(\n                    post,\n                    heading_,\n                    author_,\n                    date_,\n                    meta_style_,\n                    showCate_,\n                    excerpt_,\n                    showTag_\n                  );\n                })}\n              </div>\n            )}\n            {(posts.length == 3 || posts.length == 5) && (\n              <div\n                className={`parent-column-two count-${\n                  posts.length == 3 ? 3 : 5\n                }`}\n              >\n                <div>\n                  <div className=\"column-count column-count-1\">\n                    {this.returnHtml(\n                      posts[0],\n                      heading_,\n                      author_,\n                      date_,\n                      meta_style_,\n                      showCate_,\n                      excerpt_,\n                      showTag_\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <div\n                    className={`column-count column-count-${\n                      posts.length == 3 ? 1 : 2\n                    }`}\n                  >\n                    {posts.map((post, in_) => {\n                      return (\n                        in_ != 0 &&\n                        this.returnHtml(\n                          post,\n                          heading2_,\n                          author2_,\n                          date2_,\n                          meta_style2_,\n                          showCate2_,\n                          excerpt2_,\n                          showTag2_\n                        )\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n    // ++++++++++++++===============\n  }\n  returnHtml = (\n    post,\n    heading_,\n    author_,\n    date_,\n    meta_style_,\n    showCate_,\n    excerpt_,\n    showTag_\n  ) => {\n    let postAuthor = author_ && author_.enable ? post.author : false;\n    return (\n      <article className=\"block-post-article\">\n        <div className=\"post-wrapper\">\n          <div className=\"featured-image\">\n            <img src={post.feature_image} />\n          </div>\n          <div className=\"post-content\">\n            {showCate_ && showCate_.enable && (\n              <p className=\"post-category\">\n                {showCateFn(this.props, post.post_categories, showCate_)}\n              </p>\n            )}\n            <RichText.Content\n              className=\"post-heading\"\n              tagName={heading_.tag}\n              value={post.postTitle}\n              style={{\n                fontSize: heading_.fontSize + \"px\",\n                color: heading_.color,\n              }}\n            />\n            <div className=\"post-meta-all\">\n              {postAuthor && (\n                <p\n                  style={{\n                    color: meta_style_.color,\n                    fontSize: meta_style_.fontSize + \"px\",\n                  }}\n                  className=\"post-author\"\n                >\n                  {postAuthor}\n                </p>\n              )}\n              {date_.enable && (\n                <>\n                  {postAuthor && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date\"\n                  >\n                    <span>{post.post_date}</span>\n                  </p>\n                </>\n              )}\n              {date_.last_modified && (\n                <>\n                  {(date_.enable || postAuthor) && (\n                    <span\n                      style={{\n                        color: meta_style_.color,\n                        fontSize: meta_style_.fontSize + \"px\",\n                      }}\n                      className=\"slash\"\n                    >\n                      /\n                    </span>\n                  )}\n                  <p\n                    style={{\n                      color: meta_style_.color,\n                      fontSize: meta_style_.fontSize + \"px\",\n                    }}\n                    className=\"post-date-last-modified\"\n                  >\n                    <span>{__(\"Modified\", \"unlimited-blocks\")}: </span>\n                    <span>{post.post_modified_date}</span>\n                  </p>\n                </>\n              )}\n            </div>\n            {excerpt_ && excerpt_.enable && (\n              <p\n                style={{\n                  color: excerpt_.color,\n                  fontSize: excerpt_.fontSize + \"px\",\n                }}\n                className=\"post-excerpt\"\n              >\n                {excerptWords(excerpt_.words, post.post_excerpt)}\n                <span className=\"read-more\">\n                  ...{__(\"Read More\", \"unlimited-blocks\")}\n                </span>\n              </p>\n            )}\n            {showTag_ && showTag_.enable && (\n              <p style={{ color: meta_style_.color }} className=\"post-tags\">\n                {showTagsFn(post.post_tag, showTag_)}\n              </p>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  };\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_image_layout } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-section\", {\n  title: post_image_layout.title,\n  description: post_image_layout.description,\n  icon: post_image_layout.icon,\n  keywords: post_image_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { withSelect } from \"@wordpress/data\";\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  componentDidMount() {\n    let { thumbnail } = this.props.attributes;\n    let sendData = {};\n    if (thumbnail[0].typeShow == \"1\") {\n      sendData[\"featured_image\"] = 1;\n    }\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      thumbnail,\n      // columnLayout,\n      dimension,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n    } = attributes;\n    let heading_ = heading[0];\n    let thumbnail_ = thumbnail[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    // block width\n    let blockStyle = {};\n    if (dimension[0].width) {\n      blockStyle = {\n        ...blockStyle,\n        ...{ maxWidth: dimension[0].custom_width + \"px\" },\n      };\n    }\n    // meta_style_.blockBgColor;\n    let bgColorOrGRadient = {};\n    if (meta_style_.blockBgColor.type == \"color\") {\n      bgColorOrGRadient = { backgroundColor: meta_style_.blockBgColor.color };\n    } else {\n      bgColorOrGRadient = {\n        backgroundImage: meta_style_.blockBgColor.gradient,\n      };\n    }\n    blockStyle = { ...blockStyle, ...bgColorOrGRadient };\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title=\"Post Layout\" initialOpen={false}>\n            <p>\n              <strong>{__(\"Block Width\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ToggleControl\n              label={\n                dimension[0].width\n                  ? __(\"Custom Width\", \"unlimited-blocks\")\n                  : __(\"Auto Width\", \"unlimited-blocks\")\n              }\n              checked={dimension[0].width}\n              onChange={(e) =>\n                this.updateObj(\"dimension\", \"width\", dimension, e)\n              }\n            />\n            {dimension[0].width && (\n              <>\n                <p>\n                  <strong>{__(\"Max Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={dimension[0].custom_width}\n                  min={180}\n                  max={1000}\n                  onChange={(e) => {\n                    this.updateObj(\"dimension\", \"custom_width\", dimension, e);\n                  }}\n                />\n              </>\n            )}\n            <p>\n              <strong>{__(\"Image Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"left\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    meta_style_.imageAlign == \"left\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"center\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    meta_style_.imageAlign == \"center\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateObj(\n                      \"meta_style\",\n                      \"imageAlign\",\n                      meta_style,\n                      \"right\"\n                    );\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    meta_style_.imageAlign == \"right\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n\n            <p>\n              <strong>{__(\"Number of Post Display\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={1}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                filterPostInit(this, {\n                  numberOfPosts: e,\n                  featured_image: this.props.attributes.thumbnail[0].typeShow,\n                });\n              }}\n            />\n            <p>\n              <strong>Block Background Color</strong>\n            </p>\n            {/* <ColorPicker\n              color={meta_style_.blockBgColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateObj(\"meta_style\", \"blockBgColor\", meta_style, color);\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n                className={\n                  meta_style_.blockBgColor.type == \"gradient\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == meta_style_.blockBgColor.type ? (\n              <ColorPicker\n                color={meta_style_.blockBgColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={meta_style_.blockBgColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...meta_style_.blockBgColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateObj(\n                    \"meta_style\",\n                    \"blockBgColor\",\n                    meta_style,\n                    getBgcolor\n                  );\n                }}\n              />\n            )}\n            {/* bg color  */}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt / Content\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Featured Image\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <select\n              value={thumbnail_.typeShow}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                this.updateObj(\"thumbnail\", \"typeShow\", thumbnail, value_);\n                filterPostInit(this, { featured_image: value_ });\n              }}\n            >\n              <option value=\"all\">{__(\"All Post\", \"unlimited-blocks\")}</option>\n              <option value=\"1\">\n                {__(\"Only Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n              <option value=\"2\">\n                {__(\"Without Featured Image Post\", \"unlimited-blocks\")}\n              </option>\n            </select>\n\n            {(thumbnail_.typeShow == \"all\" || thumbnail_.typeShow == \"1\") && (\n              <>\n                <p>\n                  <strong>{__(\"Border Radius\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={thumbnail_.borderRadius}\n                  min={0}\n                  max={80}\n                  onChange={(e) =>\n                    this.updateObj(\"thumbnail\", \"borderRadius\", thumbnail, e)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody title={__(\"Post Meta\", \"unlimited-blocks\")} initialOpen={false}>\n            {/* category */}\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: this.props.attributes.thumbnail[0]\n                        .typeShow,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* category */}\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">{__(\"Meta Custom Style\", \"unlimited-blocks\")}</p>\n            <p>\n              <strong>{__(\"Author/Dates Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>{__(\"Number Tags Per Post\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          {totalPost && totalPost > posts.length && (\n            <PanelBody\n              title={__(\"Next / Previous Button\", \"unlimited-blocks\")}\n              initialOpen={false}\n            >\n              <ToggleControl\n                label={__(\"Enable\", \"unlimited-blocks\")}\n                checked={meta_style_.npEnable}\n                onChange={(e) =>\n                  this.updateObj(\"meta_style\", \"npEnable\", meta_style, e)\n                }\n              />\n              {meta_style_.npEnable && (\n                <>\n                  <p>\n                    <strong>{__(\"Pagination Number\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      meta_style_.npPagination\n                        ? __(\"Pagination On\", \"unlimited-blocks\")\n                        : __(\"Next Previous On\", \"unlimited-blocks\")\n                    }\n                    checked={meta_style_.npPagination}\n                    onChange={(e) =>\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npPagination\",\n                        meta_style,\n                        e\n                      )\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    value={meta_style_.npBgfontSize}\n                    min={1}\n                    max={30}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgfontSize\",\n                        meta_style,\n                        e\n                      );\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={meta_style_.npColor}\n                    onChange={(color) =>\n                      this.updateObj(\"meta_style\", \"npColor\", meta_style, color)\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={meta_style_.npBgColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateObj(\n                        \"meta_style\",\n                        \"npBgColor\",\n                        meta_style,\n                        color\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <div className=\"ubl-block-post list-layout\" style={blockStyle}>\n            {title_.enable && (\n              <div\n                className=\"ubl-block-post-title\"\n                style={{\n                  justifyContent: title_.align,\n                  borderColor: title_.backgroundColor,\n                }}\n              >\n                <RichText\n                  allowedFormats={[]}\n                  key=\"editable\"\n                  tagName=\"h4\"\n                  placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                  value={title_.value}\n                  style={{\n                    fontSize: title_.fontSize + \"px\",\n                    color: title_.color,\n                    backgroundColor: title_.backgroundColor,\n                    fontWeight: title_.fontWeight,\n                    width: title_.width + \"%\",\n                  }}\n                  onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                />\n              </div>\n            )}\n            <div\n              className={`column-count column-count-1 image-align-${meta_style_.imageAlign}`}\n            >\n              {posts.map((post) => {\n                let postAuthor =\n                  author_ && author_.enable ? post.author : false;\n                return thumbnail_.typeShow == \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      <div className=\"featured-image\">\n                        <img\n                          style={{\n                            borderRadius: thumbnail_.borderRadius + \"px\",\n                          }}\n                          src={post.feature_image}\n                        />\n                      </div>\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize + \"px\",\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize + \"px\",\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize + \"px\",\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{\n                              color: excerpt_.color,\n                              fontSize: excerpt_.fontSize + \"px\",\n                            }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : thumbnail_.typeShow != \"1\" ? (\n                  <article className=\"block-post-article\">\n                    <div className=\"post-wrapper\">\n                      {post.feature_image && thumbnail_.typeShow == \"all\" && (\n                        <div className=\"featured-image\">\n                          <img\n                            style={{\n                              borderRadius: thumbnail_.borderRadius + \"px\",\n                            }}\n                            src={post.feature_image}\n                          />\n                        </div>\n                      )}\n                      <div className=\"post-content\">\n                        {showCate_.enable && (\n                          <p className=\"post-category\">\n                            {showCateFn(\n                              this.props,\n                              post.post_categories,\n                              showCate_\n                            )}\n                          </p>\n                        )}\n                        <RichText.Content\n                          className=\"post-heading\"\n                          tagName={heading_.tag}\n                          value={__(post.postTitle, \"unlimited-blocks\")}\n                          style={{\n                            fontSize: heading_.fontSize,\n                            color: heading_.color,\n                          }}\n                        />\n                        <div className=\"post-meta-all\">\n                          {postAuthor && (\n                            <p\n                              style={{\n                                color: meta_style_.color,\n                                fontSize: meta_style_.fontSize,\n                              }}\n                              className=\"post-author\"\n                            >\n                              {postAuthor}\n                            </p>\n                          )}\n                          {date_.enable && (\n                            <>\n                              {postAuthor && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date\"\n                              >\n                                <span>{post.post_date}</span>\n                              </p>\n                            </>\n                          )}\n                          {date_.last_modified && (\n                            <>\n                              {(postAuthor || date_.enable) && (\n                                <span\n                                  style={{\n                                    color: meta_style_.color,\n                                    fontSize: meta_style_.fontSize,\n                                  }}\n                                  className=\"slash\"\n                                >\n                                  /\n                                </span>\n                              )}\n                              <p\n                                style={{\n                                  color: meta_style_.color,\n                                  fontSize: meta_style_.fontSize,\n                                }}\n                                className=\"post-date-last-modified\"\n                              >\n                                <span>{__(\"Modified:\", \"unlimited-blocks\")} </span>\n                                <span>{post.post_modified_date}</span>\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        {excerpt_.enable && (\n                          <p\n                            style={{ color: excerpt_.color }}\n                            className=\"post-excerpt\"\n                          >\n                            {excerptWords(excerpt_.words, post.post_excerpt)}\n                          </p>\n                        )}\n                        {showTag_.enable && (\n                          <p className=\"post-tags\">\n                            {showTagsFn(post.post_tag, showTag_)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ) : (\n                  \"\"\n                );\n              })}\n            </div>\n            {meta_style_.npEnable && totalPost && totalPost > posts.length ? (\n              <div className=\"ubl-two-post-wrapper-next-prev\">\n                {/* npBgfontSize npColor npBgColor */}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-left\"></i>\n                </div>\n                {meta_style_.npPagination && (\n                  <section className=\"paginationNumbers\">\n                    {[1, 2, 3].map((pagiV) => {\n                      return (\n                        <div\n                          className=\"ubl-image-section-np  pagination\"\n                          style={{\n                            fontSize: meta_style_.npBgfontSize,\n                            color: meta_style_.npColor,\n                            backgroundColor: meta_style_.npBgColor,\n                          }}\n                        >\n                          {pagiV}\n                        </div>\n                      );\n                    })}\n                    <div class=\"dots pagination\">\n                      <span>...</span>\n                    </div>\n                    <div\n                      className=\"ubl-image-section-np  pagination\"\n                      style={{\n                        fontSize: meta_style_.npBgfontSize,\n                        color: meta_style_.npColor,\n                        backgroundColor: meta_style_.npBgColor,\n                      }}\n                    >\n                      4\n                    </div>\n                  </section>\n                )}\n                <div\n                  style={{\n                    fontSize: meta_style_.npBgfontSize,\n                    color: meta_style_.npColor,\n                    backgroundColor: meta_style_.npBgColor,\n                  }}\n                >\n                  <i class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { post_list_layout } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-list\", {\n  title: post_list_layout.title,\n  description: post_list_layout.description,\n  icon: post_list_layout.icon,\n  keywords: post_list_layout.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let attr_ = { \"data-align\": \"full\" };\n    return attr_;\n  },\n  // attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","// extracted by mini-css-extract-plugin","// import \"./parent\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport { __ } from \"@wordpress/i18n\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  SelectControl,\n  __experimentalInputControl as InputControl,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport icons_ from \"../block-assets/icons\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nconst attrS = {\n  headingTxt: {\n    type: \"string\",\n    default: __(\"Basic\", \"unlimited-blocks\"),\n  },\n  headingTag: {\n    type: \"string\",\n    default: \"h3\",\n  },\n  headingFontSize: {\n    type: \"number\",\n    default: 29,\n  },\n  headingColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  headingFF: {\n    type: \"string\",\n  },\n  headingDescription: {\n    type: \"string\",\n    default: \"Short Description\",\n  },\n  headerBackground: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#5f5f5f\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  descriptionColor: {\n    type: \"string\",\n    default: \"grey\",\n  },\n  descriptionFontSize: {\n    type: \"number\",\n  },\n  descriptionFF: {\n    type: \"string\",\n  },\n  middleSection: {\n    type: \"object\",\n    default: {\n      iconCommonStyle: {\n        fontSize: 16,\n      },\n      textCommonStyle: {\n        fontSize: 16,\n        color: \"white\",\n        textAlign: \"center\",\n        fontFamily: \"\",\n        margin: \"\",\n        backgroundColor: {\n          type: \"color\",\n          color: \"#2B2B2B\",\n          gradient:\n            \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n        },\n        underLine: {\n          enable: true,\n          height: 3,\n          width: 60,\n          topBottomSpace: 10,\n          color: \"grey\",\n        },\n      },\n      sections: [\n        {\n          icon: \"far fa-envelope\",\n          text: \"Email Marketing\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Email Builder\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Client Testing\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"2 User Free\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n        {\n          icon: \"far fa-envelope\",\n          text: \"Multiple Email Support\",\n          iconStyle: { color: \"rgb(6, 147, 227)\" },\n        },\n      ],\n    },\n  },\n  currencyC: { type: \"string\", default: \"$\" },\n  // currencyColor: { type: \"string\" },\n  currencyFs: { type: \"number\", default: 16 },\n  priceMonth: {\n    type: \"string\",\n    default: \"99\",\n  },\n  currencyFormate: {\n    type: \"number\",\n    default: 1,\n  },\n  currencyFontWeight: { type: \"string\" },\n  priceMonthPrice: {\n    type: \"string\",\n    default: \"/ month\",\n  },\n  priceMonthPriceFs: {\n    type: \"number\",\n    default: 20,\n  },\n  priceMonthPriceColor: {\n    type: \"string\",\n    default: \"#c2c4c4\",\n  },\n  pricePosition: {\n    type: \"string\",\n    default: \"top\",\n  },\n  priceFontSize: {\n    type: \"number\",\n    default: 50,\n  },\n  priceColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  priceBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#5f5f5f\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  priceFF: {\n    type: \"string\",\n  },\n  priceInline: { type: \"boolean\", default: true },\n  pricePadding: { type: \"number\", default: 0 },\n  priceBorder: { type: \"boolean\", default: false },\n  priceBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  priceBorderRadius: {\n    type: \"number\",\n    default: 50,\n  },\n  priceBorderColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  priceSpace: {\n    type: \"number\",\n    default: 150,\n  },\n  linkContent: {\n    type: \"object\",\n    default: {\n      text: __(\"ORDER NOW\", \"unlimited-blocks\"),\n      color: \"\",\n      fontSize: 16,\n      fontWeight: 400,\n      spaceV: 50,\n      spaceH: 45,\n      border: {\n        enable: false,\n        width: 1,\n        color: \"\",\n        radius: 2,\n      },\n      backgroundColor: {\n        type: \"color\",\n        color: \"#f1b426\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n      linkUrl: {\n        keepUrl: true,\n        link: \"#\",\n        target: false,\n      },\n    },\n  },\n  shortDescription: {\n    type: \"object\",\n    default: {\n      text: __(\"Terms & Conditions\", \"unlimited-blocks\"),\n      color: \"white\",\n      fontSize: 12,\n      fontFamily: \"\",\n      topBottomSpace: 18,\n    },\n  },\n  footerBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#2B2B2B\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n  },\n  containerBorderRadius: {\n    type: \"number\",\n  },\n  containerBorderColor: {\n    type: \"string\",\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { pricing_table } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/pricing-table-table\", {\n  title: pricing_table.title,\n  description: pricing_table.description,\n  icon: pricing_table.icon,\n  keywords: pricing_table.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrS,\n  example: () => {},\n  edit: (props) => {\n    // console.log(\"props\", props);\n\n    const { attributes, setAttributes } = props;\n    const {\n      headerBackground,\n      headingTxt,\n      headingTag,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleSection,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      currencyFs,\n      currencyFormate,\n      linkContent,\n      shortDescription,\n      footerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = attributes;\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    let priceStyle = {\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n    // pricing bg color\n    if (priceBgColor.type == \"color\") {\n      priceStyle[\"backgroundColor\"] = priceBgColor.color;\n    } else if (priceBgColor.type == \"gradient\") {\n      priceStyle[\"backgroundImage\"] = priceBgColor.gradient;\n    }\n\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n\n    let link_style = {\n      color: linkContent.color,\n      fontSize: linkContent.fontSize + \"px\",\n      width: linkContent.spaceH + \"%\",\n      minHeight: linkContent.spaceV + \"px\",\n      fontWeight: linkContent.fontWeight,\n    };\n    link_style = linkContent.border.enable\n      ? {\n          ...{\n            borderWidth: linkContent.border.width + \"px\",\n            borderRadius: linkContent.border.radius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkContent.border.color,\n          },\n          ...link_style,\n        }\n      : link_style;\n    //link bg style\n    if (linkContent.backgroundColor.type == \"color\") {\n      link_style[\"backgroundColor\"] = linkContent.backgroundColor.color;\n    } else if (linkContent.backgroundColor.type == \"gradient\") {\n      link_style[\"backgroundImage\"] = linkContent.backgroundColor.gradient;\n    }\n\n    //header bg style\n    let headerBgStyle = null;\n    if (headerBackground.type == \"color\") {\n      headerBgStyle = { backgroundColor: headerBackground.color };\n    } else if (headerBackground.type == \"gradient\") {\n      headerBgStyle = { backgroundImage: headerBackground.gradient };\n    }\n    //middle\n    let middleBgColorStyle = null;\n    if (middleSection.textCommonStyle.backgroundColor.type == \"color\") {\n      middleBgColorStyle = {\n        backgroundColor: middleSection.textCommonStyle.backgroundColor.color,\n      };\n    } else if (\n      middleSection.textCommonStyle.backgroundColor.type == \"gradient\"\n    ) {\n      middleBgColorStyle = {\n        backgroundImage: middleSection.textCommonStyle.backgroundColor.gradient,\n      };\n    }\n    // footer style\n    let footerBgColorStyle = null;\n    if (footerBgColor.type == \"color\") {\n      footerBgColorStyle = { backgroundColor: footerBgColor.color };\n    } else if (footerBgColor.type == \"gradient\") {\n      footerBgColorStyle = { backgroundImage: footerBgColor.gradient };\n    }\n    // one\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    const [headerSection, setheaderSection] = useState(\"content\");\n    const [pricingSection, setpricingSection] = useState(\"content\");\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    const [commonDropDown, setcommonDropDown] = useState(false);\n    const [selectedMiddleSection, setselectedMiddleSection] = useState(false);\n    const [middleSecNav, setmiddleSecNav] = useState(\"content\");\n    const [middleSecOpen, setmiddleSecOpen] = useState(false);\n    const [footerButtonSec, setfooterButtonSec] = useState(\"content\");\n    // const [footerButtonSec,setfooterButtonSec] = useState('');\n\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    // two\n\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    const updateSlides = (index, value, for_, global_ = false) => {\n      let slides_ = attributes.middleSection;\n      let newSlide = { ...slides_ };\n      if (!global_) {\n        newSlide[\"sections\"][index][for_] = value;\n      } else {\n        newSlide[index][for_] = value;\n      }\n      setAttributes({ middleSection: newSlide });\n    };\n    const removeDescription = (slideINdex) => {\n      let slides_ = { ...props.attributes.middleSection };\n      let removeItem = slideINdex;\n      let afterRemove = [\n        ...slides_.sections.slice(0, removeItem),\n        ...slides_.sections.slice(removeItem + 1),\n      ];\n      slides_[\"sections\"] = afterRemove;\n      setAttributes({ middleSection: slides_ });\n    };\n\n    const addDescription = () => {\n      let DefaultItem = {\n        icon: \"far fa-envelope\",\n        text: \"Add Some Text\",\n        iconStyle: { color: \"rgb(6, 147, 227)\" },\n      };\n      let slides_ = { ...props.attributes.middleSection };\n      slides_.sections.push(DefaultItem);\n      setAttributes({ middleSection: slides_ });\n    };\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Header Section\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* content or styles  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setheaderSection(\"content\");\n              }}\n              className={headerSection == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setheaderSection(\"style\");\n              }}\n              className={headerSection == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or styles  */}\n          {headerSection == \"content\" ? (\n            <>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Heading Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={headingTxt}\n                  onChange={(e) => {\n                    setAttributes({ headingTxt: e });\n                  }}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Heading Tag\", \"unlimited-blocks\")}\n                </label>\n                <SelectControl\n                  value={headingTag}\n                  onChange={(e) => setAttributes({ headingTag: e })}\n                  options={[\n                    {\n                      value: null,\n                      label: __(\"Choose Tag\", \"unlimited-blocks\"),\n                      disabled: true,\n                    },\n                    { value: \"h1\", label: \"h1\" },\n                    { value: \"h2\", label: \"h2\" },\n                    { value: \"h3\", label: \"h3\" },\n                    { value: \"h4\", label: \"h4\" },\n                    { value: \"h5\", label: \"h5\" },\n                    { value: \"h6\", label: \"h6\" },\n                    { value: \"p\", label: \"p\" },\n                  ]}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Description Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={headingDescription}\n                  onChange={(e) => {\n                    setAttributes({ headingDescription: e });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                  className={headerBackground.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                  className={\n                    headerBackground.type == \"gradient\" ? \"selected\" : \"\"\n                  }\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == headerBackground.type ? (\n                <ColorPicker\n                  color={headerBackground.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={headerBackground.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...headerBackground };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ headerBackground: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              {/* heading style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"heading-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"heading-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"heading-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Heading Styles\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: headingFF }}>\n                          {headingFF ? headingFF : \"Choose Family\"}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() =>\n                                setAttributes({ headingFF: family })\n                              }\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={headingColor}\n                    onChange={(color) => setAttributes({ headingColor: color })}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={headingFontSize}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ headingFontSize: e })}\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* heading style  */}\n              {/* description style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"description-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"description-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"description-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Description Styles\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <p>\n                      <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <div\n                      ref={familyRef2}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer2 ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer2;\n                          activeFamilyDrop2(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: descriptionFF }}>\n                          {descriptionFF ? descriptionFF : \"Choose Family\"}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() =>\n                                setAttributes({ descriptionFF: family })\n                              }\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={descriptionFontSize}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ descriptionFontSize: e })}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={descriptionColor}\n                    onChange={(color) =>\n                      setAttributes({ descriptionColor: color })\n                    }\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* description style  */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody title={\"Price\"} initialOpen={false}>\n          {/* content or styles  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setpricingSection(\"content\");\n              }}\n              className={pricingSection == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setpricingSection(\"style\");\n              }}\n              className={pricingSection == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or styles  */}\n          {pricingSection == \"content\" ? (\n            <>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Currency\", \"unlimited-blocks\")}</p>\n                <select\n                  value={currencyC}\n                  onChange={(e) => {\n                    setAttributes({ currencyC: e.target.value });\n                  }}\n                >\n                  {[\n                    [\"$\", \"Dollar\"],\n                    [\"€\", \"Euro\"],\n                    [\"฿\", \"Baht\"],\n                    [\"₣\", \"Franc\"],\n                    [\"ƒ\", \"Guilder\"],\n                    [\"kr\", \"Krona\"],\n                    [\"₤\", \"Lira\"],\n                    [\"₹\", \"Rupee (Indian)\"],\n                    [\"₧\", \"Peseta\"],\n                    [\"₱\", \"Peso\"],\n                    [\"£\", \"Pound Sterling\"],\n                    [\"R$\", \"Real\"],\n                    [\"₽\", \"Ruble\"],\n                    [\"₨\", \"Rupee\"],\n                    [\"₪\", \"Shekel\"],\n                    [\"¥\", \"Yen/Yuan\"],\n                    [\"₩\", \"Won\"],\n                    [\"\", \"Custom\"],\n                  ].map((v) => (\n                    <option value={v[0]}>{v[0] + \" \" + v[1]}</option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Price\", \"unlimited-blocks\")}</p>\n                <input\n                  type=\"number\"\n                  value={priceMonth}\n                  onChange={(e) => {\n                    setAttributes({ priceMonth: e.target.value });\n                  }}\n                />\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Formate\", \"unlimited-blocks\")}</p>\n                <select\n                  value={currencyFormate}\n                  onChange={(e) => {\n                    let raised = e.target.value == \"1\" ? true : false;\n                    setAttributes({ currencyFormate: e.target.value });\n                    if (e.target.value == \"1\") setAttributes({ currencyFs: 8 });\n                  }}\n                >\n                  <option value=\"0\">{__(\"Normal\", \"unlimited-blocks\")}</option>\n                  <option value=\"1\">{__(\"Rasied\", \"unlimited-blocks\")}</option>\n                </select>\n              </div>\n              <div className=\"flex-section sec-50-40\">\n                <p>{__(\"Period\", \"unlimited-blocks\")}</p>\n                <input\n                  type=\"text\"\n                  value={priceMonthPrice}\n                  onChange={(e) => {\n                    setAttributes({ priceMonthPrice: e.target.value });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              {/* common setting  */}\n              <label className=\"normal-label\">\n                {__(\"Background Color\", \"unlimited-blocks\")}\n              </label>\n              <div class=\"ubl-switcher-button-section\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                  className={priceBgColor.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                  className={priceBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == priceBgColor.type ? (\n                <ColorPicker\n                  color={priceBgColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={priceBgColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...priceBgColor };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ priceBgColor: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Position\", \"unlimited-blocks\")}\n                </label>\n                <SelectControl\n                  value={pricePosition}\n                  onChange={(e) => setAttributes({ pricePosition: e })}\n                  options={[\n                    {\n                      value: null,\n                      label: __(\"Choose Position\", \"unlimited-blocks\"),\n                      disabled: true,\n                    },\n                    { value: \"top\", label: \"Top\" },\n                    { value: \"middle\", label: \"Middle\" },\n                    { value: \"bottom\", label: \"Bottom\" },\n                  ]}\n                />\n              </div>\n              {/* layout style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"layout-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"layout-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"layout-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Layout\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n\n                  <div className=\"ubl-panel-custom\">\n                    <label className=\"normal-label\">\n                      {__(\"Layout\", \"unlimited-blocks\")}\n                    </label>\n                    <SelectControl\n                      value={priceInline ? \"box\" : \"round\"}\n                      onChange={(e) => {\n                        // console.log(\"ee\", e);\n                        let setPrice = e == \"round\" ? false : true;\n                        setAttributes({ priceInline: setPrice });\n                        if (!setPrice) {\n                          setAttributes({ priceBorderRadius: 50 });\n                        }\n                      }}\n                      options={[\n                        {\n                          value: null,\n                          label: __(\"Choose Layout\", \"unlimited-blocks\"),\n                          disabled: true,\n                        },\n                        { value: \"box\", label: \"Boxed\" },\n                        { value: \"round\", label: \"Rounded\" },\n                      ]}\n                    />\n                  </div>\n                  {!priceInline && (\n                    <RangeControl\n                      label={__(\"Price Space\", \"unlimited-blocks\")}\n                      value={priceSpace}\n                      min={0}\n                      max={250}\n                      onChange={(e) => setAttributes({ priceSpace: e })}\n                    />\n                  )}\n                  {priceInline && (\n                    <>\n                      <RangeControl\n                        label={__(\"Top/Bottom\", \"unlimited-blocks\")}\n                        value={priceSpaceV}\n                        min={0}\n                        max={200}\n                        onChange={(e) => setAttributes({ priceSpaceV: e })}\n                      />\n                      <RangeControl\n                        label={__(\"Left/Right\", \"unlimited-blocks\")}\n                        value={priceSpaceH}\n                        min={0}\n                        max={200}\n                        onChange={(e) => setAttributes({ priceSpaceH: e })}\n                      />\n                    </>\n                  )}\n                  <p>\n                    <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      priceBorder\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={priceBorder}\n                    onChange={(e) => setAttributes({ priceBorder: e })}\n                  />\n                  {priceBorder && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={priceBorderWidth}\n                        min={0}\n                        max={20}\n                        onChange={(e) => setAttributes({ priceBorderWidth: e })}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={priceBorderRadius}\n                        min={0}\n                        max={50}\n                        onChange={(e) =>\n                          setAttributes({ priceBorderRadius: e })\n                        }\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={priceBorderColor}\n                        onChange={(color) =>\n                          setAttributes({ priceBorderColor: color })\n                        }\n                      />\n                    </div>\n                  )}\n                  {/* element  */}\n                </div>\n              </div>\n              {/* layout style  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"pricing-common-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"pricing-common-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"pricing-common-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Price Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        ref={familyRef}\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span style={{ fontFamily: priceFF }}>\n                          {priceFF\n                            ? priceFF\n                            : __(\"Choose Family\", \"unlimited-blocks\")}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() => setAttributes({ priceFF: family })}\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  {/* font family */}\n                  {/* font weight */}\n                  <div className=\"flex-section sec-50-40\">\n                    <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={currencyFontWeight}\n                      onChange={(e) => {\n                        setAttributes({ currencyFontWeight: e.target.value });\n                      }}\n                    >\n                      <option value=\"400\">400</option>\n                      <option value=\"500\">500</option>\n                      <option value=\"700\">700</option>\n                      <option value=\"900\">900</option>\n                      <option value=\"bold\">Bold</option>\n                      <option value=\"bolder\">Bolder</option>\n                    </select>\n                  </div>\n                  {/* font weight */}\n                  <p>\n                    <strong>{__(\"Price\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={priceColor}\n                    onChange={(color) => setAttributes({ priceColor: color })}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={priceFontSize}\n                    min={0}\n                    max={100}\n                    onChange={(e) => setAttributes({ priceFontSize: e })}\n                  />\n                  {/* currency  */}\n                  <p>\n                    <strong>{__(\"Currency\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={currencyFs}\n                    min={0}\n                    max={60}\n                    onChange={(e) => setAttributes({ currencyFs: e })}\n                  />\n                  <p>\n                    <strong>{__(\"Text\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={priceMonthPriceColor}\n                    onChange={(color) =>\n                      setAttributes({ priceMonthPriceColor: color })\n                    }\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={priceMonthPriceFs}\n                    min={0}\n                    max={100}\n                    onChange={(e) => setAttributes({ priceMonthPriceFs: e })}\n                  />\n                  {/* element  */}\n                </div>\n              </div>\n              {/* common setting  */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody title={\"List Section\"} initialOpen={false}>\n          {/* top nav  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => setmiddleSecNav(\"content\")}\n              className={middleSecNav == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => setmiddleSecNav(\"style\")}\n              className={middleSecNav == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* top nav  */}\n\n          {middleSecNav == \"content\" ? (\n            <>\n              {/* ------------------------------ */}\n              <div className=\"slides-option\">\n                {middleSection.sections.map((section, index_) => {\n                  return (\n                    <div\n                      className={`slide-panel-single ${\n                        index_ == selectedMiddleSection && middleSecOpen\n                          ? \"active\"\n                          : \"\"\n                      }`}\n                    >\n                      <div\n                        className=\"slide-nav\"\n                        onClick={() => {\n                          if (\n                            index_ == selectedMiddleSection &&\n                            middleSecOpen\n                          ) {\n                            setmiddleSecOpen(false);\n                          } else {\n                            setselectedMiddleSection(index_);\n                            setmiddleSecOpen(true);\n                          }\n                        }}\n                      >\n                        <span>\n                          {section.text.length >= 21\n                            ? section.text.slice(0, 20) + \"...\"\n                            : section.text}\n                        </span>\n                        {index_ + 1 !== middleSection.sections.length &&\n                        middleSection.sections.length > 1 ? (\n                          <div className=\"controlls\">\n                            <span onClick={() => removeDescription(index_)}>\n                              <i className=\"fas fa-trash-alt\"></i>\n                            </span>\n                          </div>\n                        ) : (\n                          \"\"\n                        )}\n                        <div className=\"caret\">\n                          <i className=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        {/* element  */}\n                        {/* for icon  */}\n                        {index_ == selectedMiddleSection && middleSecOpen ? (\n                          <>\n                            <div className=\"ubl-panel-custom\">\n                              <p>\n                                <strong>\n                                  {__(\"Text\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <InputControl\n                                value={section.text}\n                                onChange={(e) => {\n                                  updateSlides(index_, e, \"text\");\n                                }}\n                              />\n                            </div>\n                            <p>\n                              <strong>\n                                {__(\"Choose Icon\", \"unlimited-blocks\")}\n                              </strong>\n                            </p>\n\n                            <div\n                              ref={iconReff}\n                              className={`wpgt-radio-wrap ${\n                                activeIconContainer ? \"active\" : \"\"\n                              }`}\n                            >\n                              <div\n                                className=\"selected-icon\"\n                                onClick={(e) => {\n                                  activeIconContainerSet(true);\n                                }}\n                              >\n                                <i className={section.icon}></i>\n                                <div className=\"search-container\">\n                                  <i className=\"fas fa-search\"></i>\n                                  <input\n                                    type=\"text\"\n                                    onChange={(e) => {\n                                      let value_ = e.target.value;\n                                      if (value_ != \"\") {\n                                        let newAr = icons_.filter(\n                                          (checkStr) =>\n                                            checkStr.search(value_) != -1\n                                        );\n                                        if (newAr.length) {\n                                          setIconList(newAr);\n                                        }\n                                      } else {\n                                        setIconList(icons_);\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              </div>\n                              <div\n                                className=\"wpgt-radio-container\"\n                                onChange={(e) => {\n                                  updateSlides(index_, e.target.value, \"icon\");\n                                }}\n                              >\n                                {iconList.map((iconValue) => {\n                                  let string_ = `wpgt-Radio-${\n                                    iconValue + index_\n                                  }`;\n                                  let uinqIdWrap = string_.replace(\" \", \"--\");\n                                  return (\n                                    <div className=\"wpgt-radio-wrapper\">\n                                      <input\n                                        id={uinqIdWrap}\n                                        type=\"radio\"\n                                        name={`wpgt-choose-icon-${index_}`}\n                                        className=\"radio-input\"\n                                        value={iconValue}\n                                      />\n                                      <label htmlFor={uinqIdWrap}>\n                                        <i className={iconValue}></i>\n                                      </label>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          </>\n                        ) : (\n                          \"\"\n                        )}\n                        {/* for icon  */}\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPalette\n                          value={section.iconStyle.color}\n                          onChange={(color) => {\n                            let color_ = { ...section.iconStyle };\n                            color_[\"color\"] = color;\n                            updateSlides(index_, color_, \"iconStyle\");\n                          }}\n                        />\n                        {/* element  */}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"add-new-slide\">\n                <span onClick={() => addDescription()}>\n                  <i class=\"fas fa-plus\"></i>\n                  {__(\"Add New\", \"unlimited-blocks\")}\n                </span>\n              </div>\n\n              {/* ------------------------------ */}\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n\n              <div class=\"ubl-switcher-button-section sub\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"type\"] = \"color\";\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                  className={\n                    middleSection.textCommonStyle.backgroundColor.type ==\n                    \"color\"\n                      ? \"selected\"\n                      : \"\"\n                  }\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                  className={\n                    middleSection.textCommonStyle.backgroundColor.type ==\n                    \"gradient\"\n                      ? \"selected\"\n                      : \"\"\n                  }\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == middleSection.textCommonStyle.backgroundColor.type ? (\n                <ColorPicker\n                  color={middleSection.textCommonStyle.backgroundColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"color\"] = color;\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={middleSection.textCommonStyle.backgroundColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = {\n                      ...middleSection.textCommonStyle.backgroundColor,\n                    };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    updateSlides(\n                      \"textCommonStyle\",\n                      getBgcolor,\n                      \"backgroundColor\",\n                      true\n                    );\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              {/* text allign  */}\n              <p>\n                <strong>{__(\"Text Align\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div className=\"ubl-alignment\">\n                <div>\n                  <span\n                    onClick={() => {\n                      updateSlides(\n                        \"textCommonStyle\",\n                        \"left\",\n                        \"textAlign\",\n                        true\n                      );\n                    }}\n                    className={`dashicons dashicons-editor-alignleft ${\n                      middleSection.textCommonStyle.textAlign == \"left\"\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                  ></span>\n                </div>\n                <div>\n                  <span\n                    onClick={() => {\n                      updateSlides(\n                        \"textCommonStyle\",\n                        \"center\",\n                        \"textAlign\",\n                        true\n                      );\n                    }}\n                    className={`dashicons dashicons-editor-aligncenter ${\n                      middleSection.textCommonStyle.textAlign == \"center\"\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                  ></span>\n                </div>\n              </div>\n              {/* text allign  */}\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <p>\n                  <strong>{__(\"Font Family\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    ref={familyRef}\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span\n                      style={{\n                        fontFamily: middleSection.textCommonStyle.fontFamily,\n                      }}\n                    >\n                      {middleSection.textCommonStyle.fontFamily\n                        ? middleSection.textCommonStyle.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            updateSlides(\n                              \"textCommonStyle\",\n                              family,\n                              \"fontFamily\",\n                              true\n                            );\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Text Font Size\", \"unlimited-blocks\")}\n                value={middleSection.textCommonStyle.fontSize}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"textCommonStyle\", e, \"fontSize\", true);\n                }}\n              />\n              <RangeControl\n                label={__(\"Icon Font Size\", \"unlimited-blocks\")}\n                value={middleSection.iconCommonStyle.fontSize}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"iconCommonStyle\", e, \"fontSize\", true);\n                }}\n              />\n              <RangeControl\n                label={__(\"Space Between Text\", \"unlimited-blocks\")}\n                value={middleSection.textCommonStyle.margin}\n                min={0}\n                max={60}\n                onChange={(e) => {\n                  updateSlides(\"textCommonStyle\", e, \"margin\", true);\n                }}\n              />\n\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={middleSection.textCommonStyle.color}\n                onChange={(color) => {\n                  updateSlides(\"textCommonStyle\", color, \"color\", true);\n                }}\n              />\n              <p>\n                <strong>{__(\"Underline\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ToggleControl\n                label={\n                  middleSection.textCommonStyle.underLine.enable\n                    ? __(\"Disable\", \"unlimited-blocks\")\n                    : __(\"Enable\", \"unlimited-blocks\")\n                }\n                checked={middleSection.textCommonStyle.underLine.enable}\n                onChange={(e) => {\n                  let middleSection_ = { ...middleSection };\n                  middleSection_.textCommonStyle.underLine.enable = e;\n                  setAttributes({ middleSection: middleSection_ });\n                }}\n              />\n              {middleSection.textCommonStyle.underLine.enable && (\n                <>\n                  <RangeControl\n                    label={__(\"Height\", \"unlimited-blocks\")}\n                    value={middleSection.textCommonStyle.underLine.height}\n                    min={0}\n                    max={20}\n                    onChange={(e) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.height = e;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={middleSection.textCommonStyle.underLine.width}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.width = e;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={middleSection.textCommonStyle.underLine.color}\n                    onChange={(color) => {\n                      let middleSection_ = { ...middleSection };\n                      middleSection_.textCommonStyle.underLine.color = color;\n                      setAttributes({ middleSection: middleSection_ });\n                    }}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Button Section\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* button section  */}\n          <div class=\"ubl-switcher-button-section sub\">\n            <span\n              onClick={() => setfooterButtonSec(\"content\")}\n              className={footerButtonSec == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => setfooterButtonSec(\"style\")}\n              className={footerButtonSec == \"style\" ? \"selected\" : \"\"}\n            >\n              {__(\"Style\", \"unlimited-blocks\")}\n            </span>\n          </div>\n\n          {footerButtonSec == \"content\" ? (\n            <>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Button Text\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={linkContent.text}\n                  onChange={(e) => {\n                    let link = { ...linkContent };\n                    link[\"text\"] = e;\n                    setAttributes({ linkContent: link });\n                  }}\n                />\n              </div>\n              <p>\n                <strong>{__(\"Button Link\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div className=\"ubl-blocks-linkbtn\">\n                <LinkControl\n                  value={{\n                    url: linkContent.linkUrl.link,\n                    opensInNewTab: linkContent.linkUrl.target,\n                  }}\n                  onChange={(vall) => {\n                    let link = { ...linkContent };\n                    if (\"url\" in vall) {\n                      link.linkUrl.link = vall.url;\n                    }\n                    if (\"opensInNewTab\" in vall) {\n                      link.linkUrl.target = vall.opensInNewTab;\n                    }\n                    setAttributes({ linkContent: link });\n                  }}\n                />\n              </div>\n              <div className=\"ubl-panel-custom\">\n                <label className=\"normal-label\">\n                  {__(\"Short Description\", \"unlimited-blocks\")}\n                </label>\n                <InputControl\n                  value={shortDescription.text}\n                  onChange={(e) => {\n                    let shortDesc = { ...shortDescription };\n                    shortDesc[\"text\"] = e;\n                    setAttributes({ shortDescription: shortDesc });\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <p>\n                <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <div class=\"ubl-switcher-button-section sub\">\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"type\"] = \"color\";\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                  className={footerBgColor.type == \"color\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Solid\", \"unlimited-blocks\")}\n                </span>\n                <span\n                  onClick={() => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"type\"] = \"gradient\";\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                  className={footerBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n                >\n                  {__(\"Gradient\", \"unlimited-blocks\")}\n                </span>\n              </div>\n              {\"color\" == footerBgColor.type ? (\n                <ColorPicker\n                  color={footerBgColor.color}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"color\"] = color;\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                />\n              ) : (\n                <GradientPicker\n                  disableCustomGradients={false}\n                  value={footerBgColor.gradient}\n                  gradients={UBLGraDientColors}\n                  onChange={(newGradient) => {\n                    let getBgcolor = { ...footerBgColor };\n                    getBgcolor[\"gradient\"] = newGradient;\n                    setAttributes({ footerBgColor: getBgcolor });\n                  }}\n                />\n              )}\n              {/* bg color  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"footer-button-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"footer-button-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"footer-button-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Button Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={linkContent.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link[\"fontSize\"] = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={linkContent.color}\n                    onChange={(color) => {\n                      let link = { ...linkContent };\n                      link[\"color\"] = color;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  {/* font weight */}\n                  <div className=\"flex-section\">\n                    <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={linkContent.fontWeight}\n                      onChange={(e) => {\n                        let link = { ...linkContent };\n                        link[\"fontWeight\"] = e.target.value;\n                        setAttributes({ linkContent: link });\n                      }}\n                    >\n                      <option value=\"400\">400</option>\n                      <option value=\"500\">500</option>\n                      <option value=\"700\">700</option>\n                      <option value=\"900\">900</option>\n                      <option value=\"bold\">Bold</option>\n                      <option value=\"bolder\">Bolder</option>\n                    </select>\n                  </div>\n                  {/* font weight */}\n                  <p>\n                    <strong>\n                      {__(\"Background Color\", \"unlimited-blocks\")}\n                    </strong>\n                  </p>\n\n                  <div class=\"ubl-switcher-button-section sub\">\n                    <span\n                      onClick={() => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"type\"] = \"color\";\n                        setAttributes({ linkContent: link });\n                      }}\n                      className={\n                        linkContent.backgroundColor.type == \"color\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Solid\", \"unlimited-blocks\")}\n                    </span>\n                    <span\n                      onClick={() => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"type\"] = \"gradient\";\n                        setAttributes({ linkContent: link });\n                      }}\n                      className={\n                        linkContent.backgroundColor.type == \"gradient\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Gradient\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n\n                  {\"color\" == linkContent.backgroundColor.type ? (\n                    <ColorPicker\n                      color={linkContent.backgroundColor.color}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"color\"] = color;\n                        setAttributes({ linkContent: link });\n                      }}\n                    />\n                  ) : (\n                    <GradientPicker\n                      disableCustomGradients={false}\n                      value={linkContent.backgroundColor.gradient}\n                      gradients={UBLGraDientColors}\n                      onChange={(newGradient) => {\n                        let link = { ...linkContent };\n                        link.backgroundColor[\"gradient\"] = newGradient;\n                        setAttributes({ linkContent: link });\n                      }}\n                    />\n                  )}\n\n                  {/* bg color  */}\n                  <RangeControl\n                    label={__(\"Padding Top & Bottom\", \"unlimited-blocks\")}\n                    value={linkContent.spaceV}\n                    min={0}\n                    max={300}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.spaceV = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Padding Left & Right\", \"unlimited-blocks\")}\n                    value={linkContent.spaceH}\n                    min={5}\n                    max={100}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.spaceH = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                  </p>\n\n                  <ToggleControl\n                    label={\n                      linkContent.border.enable\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={linkContent.border.enable}\n                    onChange={(e) => {\n                      let link = { ...linkContent };\n                      link.border.enable = e;\n                      setAttributes({ linkContent: link });\n                    }}\n                  />\n                  {linkContent.border.enable && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={linkContent.border.width}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let link = { ...linkContent };\n                          link.border.width = e;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={linkContent.border.radius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let link = { ...linkContent };\n                          link.border.radius = e;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={linkContent.border.color}\n                        onChange={(color) => {\n                          let link = { ...linkContent };\n                          link.border.color = color;\n                          setAttributes({ linkContent: link });\n                        }}\n                      />\n                    </div>\n                  )}\n                  {/* element  */}\n                </div>\n              </div>\n              {/* button section  */}\n              <div\n                className={`slide-panel-single ${\n                  commonDropDown == \"footer-description-style\" ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  class=\"slide-nav\"\n                  onClick={() => {\n                    if (commonDropDown == \"footer-description-style\") {\n                      setcommonDropDown(\"\");\n                    } else {\n                      setcommonDropDown(\"footer-description-style\");\n                    }\n                  }}\n                >\n                  <span>{__(\"Description Style\", \"unlimited-blocks\")}</span>\n                  <div class=\"caret\">\n                    <i class=\"fas fa-caret-down\"></i>\n                  </div>\n                </div>\n                <div className=\"slides-element\">\n                  {/* element  */}\n                  {/* font family */}\n                  <div className=\"THK-font-family-wrapper\">\n                    <label className=\"normal-label\">\n                      {__(\"Font Family\", \"unlimited-blocks\")}\n                    </label>\n                    <div\n                      ref={familyRef}\n                      className={`font-family-drop-down ${\n                        activeFamilyContainer ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        ref={familyRef}\n                        onClick={() => {\n                          let applyActive = !activeFamilyContainer;\n                          activeFamilyDrop(applyActive);\n                        }}\n                        className=\"font-family-show\"\n                      >\n                        <span\n                          style={{ fontFamily: shortDescription.fontFamily }}\n                        >\n                          {shortDescription.fontFamily\n                            ? shortDescription.fontFamily\n                            : __(\"Choose Family\", \"unlimited-blocks\")}\n                        </span>\n                      </div>\n                      <div className=\"family-items\">\n                        {fontFamily.map((family, key_) => {\n                          return (\n                            <span\n                              onClick={() => {\n                                let descrip = { ...shortDescription };\n                                descrip.fontFamily = family;\n                                setAttributes({ shortDescription: descrip });\n                              }}\n                              style={{ fontFamily: family }}\n                            >\n                              {family}\n                            </span>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={shortDescription.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.fontSize = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    value={shortDescription.color}\n                    onChange={(color) => {\n                      let descrip = { ...shortDescription };\n                      descrip.color = color;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Font Size\", \"unlimited-blocks\")}\n                    value={shortDescription.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.fontSize = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Top & Bottom Spacing\", \"unlimited-blocks\")}\n                    value={shortDescription.topBottomSpace}\n                    min={0}\n                    max={70}\n                    onChange={(e) => {\n                      let descrip = { ...shortDescription };\n                      descrip.topBottomSpace = e;\n                      setAttributes({ shortDescription: descrip });\n                    }}\n                  />\n\n                  {/* element  */}\n                </div>\n              </div>\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Container Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"unlimited-blocks\")\n                : __(\"Enable\", \"unlimited-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"unlimited-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"unlimited-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n              <ColorPalette\n                value={containerBorderColor}\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div className=\"pricing-table-top\" style={headerBgStyle}>\n          <RichText\n            allowedFormats={[]}\n            key=\"editable\"\n            tagName={headingTag}\n            placeholder={__(\"Pricing Table\", \"unlimited-blocks\")}\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n            onChange={(e) => setAttributes({ headingTxt: e })}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText\n            allowedFormats={[]}\n            key=\"editable\"\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n            onChange={(e) => setAttributes({ headingDescription: e })}\n          />\n        </div>\n        <div className=\"pricing-table-middle\" style={middleBgColorStyle}>\n          {pricePosition == \"middle\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"middle-sections\">\n            {middleSection.sections.map((section, index_) => {\n              return (\n                <>\n                  <div\n                    className={\n                      index_ == selectedMiddleSection ? \"selected\" : null\n                    }\n                    onClick={() => setselectedMiddleSection(index_)}\n                    style={{\n                      fontSize: middleSection.textCommonStyle.fontSize,\n                      color: middleSection.textCommonStyle.color,\n                      fontFamily: middleSection.textCommonStyle.fontFamily,\n                      margin: `${middleSection.textCommonStyle.margin}px 0`,\n                      justifyContent: middleSection.textCommonStyle.textAlign,\n                    }}\n                  >\n                    <div className=\"icon\">\n                      <i\n                        className={section.icon}\n                        style={{\n                          ...section.iconStyle,\n                          ...{\n                            fontSize:\n                              middleSection.iconCommonStyle.fontSize + \"px\",\n                          },\n                        }}\n                      ></i>\n                    </div>\n                    <div className=\"text\">\n                      <RichText\n                        allowedFormats={[]}\n                        key=\"editable\"\n                        tagName=\"span\"\n                        placeholder={__(\"Add Some Text\", \"unlimited-blocks\")}\n                        value={section.text}\n                        onChange={(e) => {\n                          updateSlides(index_, e, \"text\");\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {middleSection.textCommonStyle.underLine.enable && (\n                    <div\n                      className=\"underline\"\n                      style={{\n                        ...{\n                          height:\n                            middleSection.textCommonStyle.underLine.height +\n                            \"px\",\n                          width:\n                            middleSection.textCommonStyle.underLine.width + \"%\",\n                          backgroundColor:\n                            middleSection.textCommonStyle.underLine.color,\n                        },\n                        ...{\n                          margin:\n                            middleSection.textCommonStyle.textAlign == \"center\"\n                              ? \"auto\"\n                              : null,\n                        },\n                      }}\n                    ></div>\n                  )}\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"pricing-table-bottom\" style={footerBgColorStyle}>\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <RichText\n              allowedFormats={[]}\n              key=\"editable\"\n              tagName=\"p\"\n              placeholder={__(\"Click Me\", \"unlimited-blocks\")}\n              value={linkContent.text}\n              onChange={(e) => {\n                let link = { ...linkContent };\n                link[\"text\"] = e;\n                setAttributes({ linkContent: link });\n              }}\n              style={link_style}\n            />\n          </div>\n\n          <RichText\n            allowedFormats={[]}\n            className=\"bottom-text\"\n            key=\"editable\"\n            tagName=\"p\"\n            placeholder={__(\"Price\", \"unlimited-blocks\")}\n            value={shortDescription.text}\n            onChange={(e) => {\n              let shortDesc = { ...shortDescription };\n              shortDesc[\"text\"] = e;\n              setAttributes({ shortDescription: shortDesc });\n            }}\n            style={{\n              color: shortDescription.color,\n              fontSize: shortDescription.fontSize + \"px\",\n              fontFamily: shortDescription.fontFamily,\n              margin: `${shortDescription.topBottomSpace}px 0`,\n            }}\n          />\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const {\n      headerBackground,\n      headingTxt,\n      headingTag,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleSection,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      // currencyColor,\n      currencyFs,\n      currencyFormate,\n      linkContent,\n      shortDescription,\n      footerBgColor,\n      // container\n      // containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = props.attributes;\n\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    // price style\n    let priceStyle = {\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n    // pricing bg color\n    if (priceBgColor.type == \"color\") {\n      priceStyle[\"backgroundColor\"] = priceBgColor.color;\n    } else if (priceBgColor.type == \"gradient\") {\n      priceStyle[\"backgroundImage\"] = priceBgColor.gradient;\n    }\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n    let link_style = {\n      color: linkContent.color,\n      fontSize: linkContent.fontSize + \"px\",\n      width: linkContent.spaceH + \"%\",\n      minHeight: linkContent.spaceV + \"px\",\n    };\n    link_style = linkContent.border.enable\n      ? {\n          ...{\n            borderWidth: linkContent.border.width + \"px\",\n            borderRadius: linkContent.border.radius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkContent.border.color,\n          },\n          ...link_style,\n        }\n      : link_style;\n    //link bg style\n    if (linkContent.backgroundColor.type == \"color\") {\n      link_style[\"backgroundColor\"] = linkContent.backgroundColor.color;\n    } else if (linkContent.backgroundColor.type == \"gradient\") {\n      link_style[\"backgroundImage\"] = linkContent.backgroundColor.gradient;\n    }\n    //header bg style\n    let headerBgStyle = null;\n    if (headerBackground.type == \"color\") {\n      headerBgStyle = { backgroundColor: headerBackground.color };\n    } else if (headerBackground.type == \"gradient\") {\n      headerBgStyle = { backgroundImage: headerBackground.gradient };\n    }\n    //middle\n    let middleBgColorStyle = null;\n    if (middleSection.textCommonStyle.backgroundColor.type == \"color\") {\n      middleBgColorStyle = {\n        backgroundColor: middleSection.textCommonStyle.backgroundColor.color,\n      };\n    } else if (\n      middleSection.textCommonStyle.backgroundColor.type == \"gradient\"\n    ) {\n      middleBgColorStyle = {\n        backgroundImage: middleSection.textCommonStyle.backgroundColor.gradient,\n      };\n    }\n    // footer style\n    let footerBgColorStyle = null;\n    if (footerBgColor.type == \"color\") {\n      footerBgColorStyle = { backgroundColor: footerBgColor.color };\n    } else if (footerBgColor.type == \"gradient\") {\n      footerBgColorStyle = { backgroundImage: footerBgColor.gradient };\n    }\n    return (\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div className=\"pricing-table-top\" style={headerBgStyle}>\n          <RichText.Content\n            tagName={headingTag}\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText.Content\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n          />\n        </div>\n        <div className=\"pricing-table-middle\" style={middleBgColorStyle}>\n          {pricePosition == \"middle\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"middle-sections\">\n            {middleSection.sections.map((section, index_) => {\n              return (\n                <>\n                  <div\n                    style={{\n                      fontSize: middleSection.textCommonStyle.fontSize,\n                      color: middleSection.textCommonStyle.color,\n                      fontFamily: middleSection.textCommonStyle.fontFamily,\n                      margin: `${middleSection.textCommonStyle.margin}px 0`,\n                      justifyContent: middleSection.textCommonStyle.textAlign,\n                    }}\n                  >\n                    <div className=\"icon\">\n                      <i\n                        className={section.icon}\n                        style={{\n                          ...section.iconStyle,\n                          ...{\n                            fontSize:\n                              middleSection.iconCommonStyle.fontSize + \"px\",\n                          },\n                        }}\n                      ></i>\n                    </div>\n                    <div className=\"text\">\n                      <RichText.Content tagName=\"span\" value={section.text} />\n                    </div>\n                  </div>\n                  {middleSection.textCommonStyle.underLine.enable && (\n                    <div\n                      className=\"underline\"\n                      style={{\n                        ...{\n                          height:\n                            middleSection.textCommonStyle.underLine.height +\n                            \"px\",\n                          width:\n                            middleSection.textCommonStyle.underLine.width + \"%\",\n                          backgroundColor:\n                            middleSection.textCommonStyle.underLine.color,\n                        },\n                        ...{\n                          margin:\n                            middleSection.textCommonStyle.textAlign == \"center\"\n                              ? \"auto\"\n                              : null,\n                        },\n                      }}\n                    ></div>\n                  )}\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"pricing-table-bottom\" style={footerBgColorStyle}>\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate == \"1\" ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <a\n              target={linkContent.linkUrl.target ? \"_blank\" : null}\n              rel={linkContent.linkUrl.target ? \"noopener noreferrer\" : null}\n              href={linkContent.linkUrl.link}\n            >\n              <RichText.Content\n                tagName=\"p\"\n                value={linkContent.text}\n                style={link_style}\n              />\n            </a>\n          </div>\n          <RichText.Content\n            className=\"bottom-text\"\n            tagName=\"p\"\n            value={shortDescription.text}\n            style={{\n              color: shortDescription.color,\n              fontSize: shortDescription.fontSize + \"px\",\n              fontFamily: shortDescription.fontFamily,\n              margin: `${shortDescription.topBottomSpace}px 0`,\n            }}\n          />\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\n// import fontFamily from \"../block-assets/font-family\";\n// import icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  InspectorControls,\n  ColorPalette,\n  RichText,\n} from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl, ToggleControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  circleRadius: { type: \"number\", default: 80 },\n  strokeWidth: { type: \"number\", default: 15 },\n  strokeColor: { type: \"string\", default: \"blue\" },\n  strokeBgColor: { type: \"string\", default: \"grey\" },\n  fillBgColor: { type: \"string\", default: \"pink\" },\n  animationDelay: { type: \"number\", default: 10 },\n  lineCap: { type: \"boolean\", default: false },\n  alignment: { type: \"string\", default: \"center\" },\n  text: { type: \"number\", default: 50 },\n  textFs: { type: \"number\", default: 18 },\n  textColor: { type: \"string\", default: \"black\" },\n  percentTitleE: { type: \"boolean\", default: true },\n  percentTitle: { type: \"string\", default: __(\"Add Title\", \"unlimited-blocks\") },\n  percentTitleFs: { type: \"number\" },\n  percentTitleColor: { type: \"string\" },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { progress_bar_pie } = blocksDetail;\n  \nregisterBlockType(\"unlimited-blocks/progress-bar-pie\", {\n  title: progress_bar_pie.title,\n  description: progress_bar_pie.description,\n  icon: progress_bar_pie.icon,\n  keywords: progress_bar_pie.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrs_,\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      lineCap,\n      animationDelay,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Circle Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Percent\", \"unlimited-blocks\")}\n            value={text}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ text: e })}\n          />\n          <RangeControl\n            label={__(\"Width\", \"unlimited-blocks\")}\n            value={circleRadius}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ circleRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Stroke Width\", \"unlimited-blocks\")}\n            value={strokeWidth}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ strokeWidth: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"unlimited-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Edges Type\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              lineCap\n                ? __(\"Flat\", \"unlimited-blocks\")\n                : __(\"Circular\", \"unlimited-blocks\")\n            }\n            checked={lineCap}\n            onChange={(e) => setAttributes({ lineCap: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeColor}\n            onChange={(color) => setAttributes({ strokeColor: color })}\n          />\n          <p>\n            <strong>{__(\"Stroke Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeBgColor}\n            onChange={(color) => setAttributes({ strokeBgColor: color })}\n          />\n          <p>\n            <strong>{__(\"Fill Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={fillBgColor}\n            onChange={(color) => setAttributes({ fillBgColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Text Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Title Setting\", \"unlimited-blocks\")}</p>\n          <ToggleControl\n            label={\n              percentTitleE\n                ? __(\"Hide\", \"unlimited-blocks\")\n                : __(\"Show\", \"unlimited-blocks\")\n            }\n            checked={percentTitleE}\n            onChange={(e) => setAttributes({ percentTitleE: e })}\n          />\n          {percentTitleE && (\n            <>\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={percentTitleFs}\n                min={1}\n                max={50}\n                onChange={(e) => setAttributes({ percentTitleFs: e })}\n              />\n              <p>\n                <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={percentTitleColor}\n                onChange={(color) =>\n                  setAttributes({ percentTitleColor: color })\n                }\n              />\n            </>\n          )}\n          <p className=\"block-inside\">{__(\"Percent Setting\", \"unlimited-blocks\")}</p>\n          <RangeControl\n            label={__(\"Font Size\", \"unlimited-blocks\")}\n            value={textFs}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ textFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={textColor}\n            onChange={(color) => setAttributes({ textColor: color })}\n          />\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"ubl-block-pie-circle\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText\n                  allowedFormats={[]}\n                  className=\"title_\"\n                  key=\"editable\"\n                  tagName=\"span\"\n                  placeholder={__(\"Add Title\", \"unlimited-blocks\")}\n                  value={percentTitle}\n                  onChange={(e) => setAttributes({ percentTitle: e })}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              >\n                {text}%\n              </span>\n            </div>\n            <svg height={HW} width={HW}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                stroke-width={strokeWidth}\n                fill=\"none\"\n                stroke={strokeColor}\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n                stroke-dasharray={`${\n                  text * ((Math.PI * (circleRadius * 2)) / 100)\n                } ${Math.PI * (circleRadius * 2)}`}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      animationDelay,\n      lineCap,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let circleData = {\n      radius: circleRadius,\n      strokeWidth: strokeWidth,\n      strokeColor: strokeColor,\n      strokeBgColor: strokeBgColor,\n      lineCap: lineCap,\n      animationDelay: animationDelay,\n      text: text,\n    };\n    circleData = JSON.stringify(circleData);\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return (\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"ubl-block-pie-circle front_\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText.Content\n                  className=\"title_\"\n                  tagName=\"span\"\n                  value={percentTitle}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              ></span>\n            </div>\n\n            <svg height={HW} width={HW} data={circleData}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                className=\"percent-apply\"\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                fill=\"none\"\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  blockUniqueId: { type: \"number\", default: false },\n  percentTitle: { type: \"string\", default: __(\"Percent title\", \"unlimited-blocks\") },\n  titleFs: { type: \"number\" },\n  titleFf: { type: \"string\" },\n  titleIn: { type: \"boolean\", default: false },\n  titleColor: { type: \"string\" },\n  progressHeight: { type: \"number\", default: 12 },\n  percent: { type: \"number\", default: 40 },\n  animationDelay: { type: \"number\", default: 10 },\n  percentColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"rgb(255, 36, 0)\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  percentBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"yellow\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  borderRadius: { type: \"number\" },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { linear_progress } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/progress-block\", {\n  title: linear_progress.title,\n  description: linear_progress.description,\n  icon: linear_progress.icon,\n  keywords: linear_progress.keywords,\n  category: \"unlimited-blocks-category\",\n  attributes: attrs_,\n  example: () => {},\n  edit: (props) => {\n    const { attributes, setAttributes } = props;\n    const {\n      percent,\n      progressHeight,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      animationDelay,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n      blockUniqueId,\n    } = attributes;\n    // bg container\n    let percentBgColorStyle = {\n      height: progressHeight + \"px\",\n      borderRadius: borderRadius + \"px\",\n    };\n    if (percentBgColor.type == \"color\") {\n      percentBgColorStyle[\"backgroundColor\"] = percentBgColor.color;\n    } else if (percentBgColor.type == \"gradient\") {\n      percentBgColorStyle[\"backgroundImage\"] = percentBgColor.gradient;\n    }\n    // bg percent\n    let percentStyle = {\n      width: percent + \"%\",\n    };\n    if (percentColor.type == \"color\") {\n      percentStyle[\"backgroundColor\"] = percentColor.color;\n    } else if (percentColor.type == \"gradient\") {\n      percentStyle[\"backgroundImage\"] = percentColor.gradient;\n    }\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Title Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              titleIn\n                ? __(\"Outside\", \"unlimited-blocks\")\n                : __(\"Inside\", \"unlimited-blocks\")\n            }\n            checked={titleIn}\n            onChange={(e) => setAttributes({ titleIn: e })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"unlimited-blocks\")}\n            value={titleFs}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ titleFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={titleColor}\n            onChange={(color) => setAttributes({ titleColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Progress Bar Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Height\", \"unlimited-blocks\")}\n            value={progressHeight}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ progressHeight: e })}\n          />\n          <RangeControl\n            label={__(\"Percent\", \"unlimited-blocks\")}\n            value={percent}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ percent: e })}\n          />\n\n          <RangeControl\n            label={__(\"Border Radius\", \"unlimited-blocks\")}\n            value={borderRadius}\n            min={1}\n            max={60}\n            onChange={(e) => setAttributes({ borderRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"unlimited-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          {/* <ColorPalette\n            value={percentColor}\n            onChange={(color) => setAttributes({ percentColor: color })}\n          /> */}\n          {/* bg color  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ percentColor: getBgcolor });\n              }}\n              className={percentColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ percentColor: getBgcolor });\n              }}\n              className={percentColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == percentColor.type ? (\n            <ColorPicker\n              color={percentColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ percentColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={percentColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...percentColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ percentColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n          <p>\n            <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n          </p>\n          {/* <ColorPalette\n            value={percentBgColor}\n            onChange={(color) => setAttributes({ percentBgColor: color })}\n          /> */}\n          {/* bg color  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n              className={percentBgColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n              className={percentBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == percentBgColor.type ? (\n            <ColorPicker\n              color={percentBgColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={percentBgColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...percentBgColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ percentBgColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper\">\n        <div className=\"ubl-linear-progress-bar\">\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText\n              allowedFormats={[]}\n              value={percentTitle}\n              tagName=\"p\"\n              onChange={(e) => setAttributes({ percentTitle: e })}\n            />\n            {!titleIn && <span className=\"percent_\">{percent}%</span>}\n          </div>\n          <div style={percentBgColorStyle} className=\"line_\">\n            <div style={percentStyle} className=\"line-inner_\">\n              {titleIn && <span className=\"percent_\">{percent}%</span>}\n            </div>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      progressHeight,\n      percent,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n      animationDelay,\n    } = attributes;\n    // bg container\n    let percentBgColorStyle = {\n      height: progressHeight + \"px\",\n      borderRadius: borderRadius + \"px\",\n    };\n    if (percentBgColor.type == \"color\") {\n      percentBgColorStyle[\"backgroundColor\"] = percentBgColor.color;\n    } else if (percentBgColor.type == \"gradient\") {\n      percentBgColorStyle[\"backgroundImage\"] = percentBgColor.gradient;\n    }\n    // bg percent\n    let percentStyle = {};\n    if (percentColor.type == \"color\") {\n      percentStyle[\"backgroundColor\"] = percentColor.color;\n    } else if (percentColor.type == \"gradient\") {\n      percentStyle[\"backgroundImage\"] = percentColor.gradient;\n    }\n    return (\n      <div className=\"thk-progress-bar-wrapper\">\n        <div\n          className=\"ubl-linear-progress-bar front_\"\n          percent={percent}\n          delay={animationDelay}\n        >\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText.Content value={percentTitle} tagName=\"p\" />\n            {!titleIn && <span className=\"percent_\"></span>}\n          </div>\n          <div style={percentBgColorStyle} className=\"line_\">\n            <div style={percentStyle} className=\"line-inner_\">\n              {titleIn && <span className=\"percent_\"></span>}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","// import \"./parent\";\nimport icons_ from \"../block-assets/icons\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\n\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst attrSave = {\n  image: {\n    type: \"string\",\n    default: \"icon\",\n  },\n  imageStyle: {\n    type: \"object\",\n    default: {\n      padding: 0,\n      width: 30,\n      border: false,\n      borderRadius: 0,\n      borderType: \"solid\",\n      borderColor: \"yellow\",\n      borderWidth: 1,\n      imgUrl: plugin_url.url + \"assets/img/image2.jpg\",\n      imageLink: {\n        keepUrl: false,\n        link: \"#\",\n        target: false,\n      },\n    },\n  },\n  title: {\n    type: \"object\",\n    default: {\n      value: __(\"Add Title\", \"unlimited-blocks\"),\n      url: { keepUrl: false, url: \"\", target: \"\" },\n      style: {\n        fontSize: 21,\n        color: \"#ffa600\",\n        fontFamily: \"\",\n        fontWeight: 600,\n      },\n    },\n  },\n  description: {\n    type: \"object\",\n    default: {\n      value: __(\"Add Service Description\", \"unlimited-blocks\"),\n      style: { fontSize: 21, color: \"\", fontFamily: \"\" },\n    },\n  },\n  containerBgColor: {\n    type: \"object\",\n    default: {\n      type: \"color\",\n      color: \"#EEF6F9\",\n      gradient: \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n    },\n  },\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  containerBorderRadius: {\n    type: \"number\",\n    default: 3,\n  },\n  containerBorderColor: {\n    type: \"string\",\n    default: \"black\",\n  },\n  //   icon\n  iconClass: {\n    type: \"string\",\n    default: \"fas fa-coffee\",\n  },\n  //////----------------\n  iconStyle: {\n    type: \"object\",\n    default: {\n      fontSize: 40,\n      color: \"#ffa600\",\n      width: 79,\n      backgroundColor: {\n        type: \"color\",\n        color: \"#EEF6F9\",\n        gradient:\n          \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n      },\n    },\n  },\n  iconBorder: {\n    type: \"object\",\n    default: {\n      border: true,\n      color: \"#ffa600\",\n      width: 2,\n      radius: 50,\n    },\n  },\n  imageBorder: {\n    type: \"object\",\n    default: {\n      border: true,\n      color: \"#ffa600\",\n      width: 2,\n      radius: 5,\n    },\n  },\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { service_section } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/icon-image-content\", {\n  title: service_section.title,\n  description: service_section.description,\n  icon: service_section.icon,\n  keywords: service_section.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {},\n  attributes: attrSave,\n  example: () => {},\n  edit: (props) => {\n    // console.log(\"props\", props);\n    const { attributes, setAttributes } = props;\n    const {\n      image,\n      imageStyle,\n      title,\n      description,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      //icon\n      iconStyle,\n      iconBorder,\n      //icon\n      iconClass,\n    } = attributes;\n\n    //icon border\n    let borderStyle = iconBorder.border\n      ? {\n          borderWidth: iconBorder.width + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorder.color,\n          borderRadius: iconBorder.radius + \"%\",\n          width: iconStyle.width + \"px\",\n          height: iconStyle.width + \"px\",\n        }\n      : {};\n    if (iconStyle.backgroundColor.type == \"color\") {\n      borderStyle[\"backgroundColor\"] = iconStyle.backgroundColor.color;\n    } else if (iconStyle.backgroundColor.type == \"gradient\") {\n      borderStyle[\"backgroundImage\"] = iconStyle.backgroundColor.gradient;\n    }\n\n    let customImgStyle = {\n      width: imageStyle.width + \"%\",\n      padding: imageStyle.padding + \"px\",\n    };\n    if (imageStyle.border) {\n      customImgStyle = {\n        ...customImgStyle,\n        ...{\n          borderRadius: imageStyle.borderRadius + \"px\",\n          borderWidth: imageStyle.borderWidth + \"px\",\n          borderColor: imageStyle.borderColor,\n          borderStyle: imageStyle.borderType,\n        },\n      };\n    }\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    // if(containerBgColor)\n    if (containerBgColor.type == \"color\") {\n      containerBorderStyle[\"backgroundColor\"] = containerBgColor.color;\n    } else if (containerBgColor.type == \"gradient\") {\n      containerBorderStyle[\"backgroundImage\"] = containerBgColor.gradient;\n    }\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    const [titleDescription, setTitleDescription] = useState(\"title\");\n    const [contentORborder, setcontentORborder] = useState(\"content\");\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Image and Icon Setting\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div className=\"flex-section\">\n            <p>{__(\"Image and Icon\", \"unlimited-blocks\")}</p>\n            <select\n              value={image}\n              onChange={(e) => {\n                setAttributes({ image: e.target.value });\n              }}\n            >\n              <option value=\"icon\">{__(\"Icon\", \"unlimited-blocks\")}</option>\n              <option value=\"image\">{__(\"Image\", \"unlimited-blocks\")}</option>\n            </select>\n          </div>\n          {/* content or border  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setcontentORborder(\"content\");\n              }}\n              className={contentORborder == \"content\" ? \"selected\" : \"\"}\n            >\n              {__(\"Content\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setcontentORborder(\"border\");\n              }}\n              className={contentORborder == \"border\" ? \"selected\" : \"\"}\n            >\n              {__(\"Border\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* content or border  */}\n          {image == \"image\" && (\n            <div className=\"service-image-setting\">\n              {contentORborder == \"content\" ? (\n                <>\n                  <p>\n                    <strong>{__(\"Background image\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <MediaUpload\n                    allowedType=\"image\"\n                    onSelect={(newImage) => {\n                      let image = { ...imageStyle };\n                      image[\"imgUrl\"] = newImage.sizes.full.url;\n                      setAttributes({ imageStyle: image });\n                    }}\n                    value={imageStyle.imgUrl}\n                    render={({ open }) => (\n                      <div\n                        onClick={open}\n                        className={`ubl-block-image-uploader ${\n                          !imageStyle.imgUrl ? \"blank\" : \"\"\n                        }`}\n                      >\n                        <div>\n                          <i className=\"fas fa-plus\"></i>\n                        </div>\n                        {imageStyle.imgUrl ? (\n                          <img src={imageStyle.imgUrl} />\n                        ) : (\n                          \"\"\n                        )}\n                      </div>\n                    )}\n                  />\n                  <p>\n                    <strong>{__(\"Image Link\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <ToggleControl\n                    label={\n                      imageStyle.imageLink.keepUrl\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={imageStyle.imageLink.keepUrl}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image.imageLink.keepUrl = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                  {imageStyle.imageLink.keepUrl && (\n                    <div className=\"ubl-blocks-linkbtn\">\n                      <LinkControl\n                        value={{\n                          url: imageStyle.imageLink.link,\n                          opensInNewTab: imageStyle.imageLink.target,\n                        }}\n                        onChange={(vall) => {\n                          if (\"url\" in vall) {\n                            let image = { ...imageStyle };\n                            image.imageLink.link = vall.url;\n                            setAttributes({ imageStyle: image });\n                          }\n                          //target\n                          if (\"opensInNewTab\" in vall) {\n                            let image = { ...imageStyle };\n                            image.imageLink.target = vall.opensInNewTab;\n                            setAttributes({ imageStyle: image });\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={imageStyle.width}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image[\"width\"] = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                  <RangeControl\n                    label={__(\"Padding\", \"unlimited-blocks\")}\n                    value={imageStyle.padding}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let image = { ...imageStyle };\n                      image[\"padding\"] = e;\n                      setAttributes({ imageStyle: image });\n                    }}\n                  />\n                </>\n              ) : (\n                <>\n                  <ToggleControl\n                    label={\n                      imageStyle.border\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={imageStyle.border}\n                    onChange={(e) => {\n                      let border = { ...imageStyle };\n                      border[\"border\"] = e;\n                      setAttributes({ imageStyle: border });\n                    }}\n                  />\n                  {imageStyle.border && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={imageStyle.borderWidth}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let border = { ...imageStyle };\n                          border[\"borderWidth\"] = e;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={imageStyle.borderRadius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let border = { ...imageStyle };\n                          border[\"borderRadius\"] = e;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={imageStyle.borderColor}\n                        onChange={(color) => {\n                          let border = { ...imageStyle };\n                          border[\"borderColor\"] = color;\n                          setAttributes({ imageStyle: border });\n                        }}\n                      />\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"service-icon-setting\">\n              {contentORborder == \"content\" ? (\n                <>\n                  <p>\n                    <strong>{__(\"Choose Icon\", \"unlimited-blocks\")}</strong>\n                  </p>\n                  <div\n                    ref={iconReff}\n                    className={`wpgt-radio-wrap ${\n                      activeIconContainer ? \"active\" : \"\"\n                    }`}\n                  >\n                    <div\n                      className=\"selected-icon\"\n                      onClick={(e) => {\n                        activeIconContainerSet(true);\n                      }}\n                    >\n                      <i className={iconClass}></i>\n                      <div className=\"search-container\">\n                        <i className=\"fas fa-search\"></i>\n                        <input\n                          type=\"text\"\n                          onChange={(e) => {\n                            let value_ = e.target.value;\n                            if (value_ != \"\") {\n                              let newAr = icons_.filter(\n                                (checkStr) => checkStr.search(value_) != -1\n                              );\n                              if (newAr.length) {\n                                setIconList(newAr);\n                              }\n                            } else {\n                              setIconList(icons_);\n                            }\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div\n                      className=\"wpgt-radio-container\"\n                      onChange={(e) => {\n                        setAttributes({ iconClass: e.target.value });\n                      }}\n                    >\n                      {iconList.map((iconValue) => {\n                        return (\n                          <div className=\"wpgt-radio-wrapper\">\n                            <input\n                              id={\"wpgt-Radio-\" + iconValue}\n                              type=\"radio\"\n                              name=\"wpgt-choose-icon\"\n                              className=\"radio-input\"\n                              value={iconValue}\n                            />\n                            <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                              <i className={iconValue}></i>\n                            </label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <label className=\"normal-label\">\n                    {__(\"Font Size\", \"unlimited-blocks\")}\n                  </label>\n                  <RangeControl\n                    value={iconStyle.fontSize}\n                    min={0}\n                    max={100}\n                    onChange={(e) => {\n                      let iconStyle_ = { ...iconStyle };\n                      iconStyle_[\"fontSize\"] = e;\n                      setAttributes({ iconStyle: iconStyle_ });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Color\", \"unlimited-blocks\")}\n                  </label>\n                  <ColorPalette\n                    onChange={(color) => {\n                      let iconStyle_ = { ...iconStyle };\n                      iconStyle_[\"color\"] = color;\n                      setAttributes({ iconStyle: iconStyle_ });\n                    }}\n                  />\n                  <label className=\"normal-label\">\n                    {__(\"Background Color\", \"unlimited-blocks\")}\n                  </label>\n                  {/* bg color  */}\n                  <div class=\"ubl-switcher-button-section sub\">\n                    <span\n                      onClick={() => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.type = \"color\";\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                      className={\n                        iconStyle.backgroundColor.type == \"color\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Solid\", \"unlimited-blocks\")}\n                    </span>\n                    <span\n                      onClick={() => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.type = \"gradient\";\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                      className={\n                        iconStyle.backgroundColor.type == \"gradient\"\n                          ? \"selected\"\n                          : \"\"\n                      }\n                    >\n                      {__(\"Gradient\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  {\"color\" == iconStyle.backgroundColor.type ? (\n                    <ColorPicker\n                      color={iconStyle.backgroundColor.color}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.color = color;\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                    />\n                  ) : (\n                    <GradientPicker\n                      disableCustomGradients={false}\n                      value={iconStyle.backgroundColor.gradient}\n                      gradients={UBLGraDientColors}\n                      onChange={(newGradient) => {\n                        let getBgcolor = { ...iconStyle };\n                        getBgcolor.backgroundColor.gradient = newGradient;\n                        setAttributes({ iconStyle: getBgcolor });\n                      }}\n                    />\n                  )}\n                </>\n              ) : (\n                <>\n                  <ToggleControl\n                    label={\n                      iconBorder.border\n                        ? __(\"Disable\", \"unlimited-blocks\")\n                        : __(\"Enable\", \"unlimited-blocks\")\n                    }\n                    checked={iconBorder.border}\n                    onChange={(e) => {\n                      let border = { ...iconBorder };\n                      border[\"border\"] = e;\n                      setAttributes({ iconBorder: border });\n                    }}\n                  />\n                  {iconBorder.border && (\n                    <div className=\"icon-border-setting\">\n                      <RangeControl\n                        label={__(\"Icon Space\", \"unlimited-blocks\")}\n                        value={iconStyle.width}\n                        min={0}\n                        max={200}\n                        onChange={(e) => {\n                          let iconStyle_ = { ...iconStyle };\n                          iconStyle_[\"width\"] = e;\n                          setAttributes({ iconStyle: iconStyle_ });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Width\", \"unlimited-blocks\")}\n                        value={iconBorder.width}\n                        min={0}\n                        max={100}\n                        onChange={(e) => {\n                          let border = { ...iconBorder };\n                          border[\"width\"] = e;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                      <RangeControl\n                        label={__(\"Border Radius\", \"unlimited-blocks\")}\n                        value={iconBorder.radius}\n                        min={0}\n                        max={50}\n                        onChange={(e) => {\n                          let border = { ...iconBorder };\n                          border[\"radius\"] = e;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                      <label className=\"normal-label\">\n                        {__(\"Border Color\", \"unlimited-blocks\")}\n                      </label>\n                      <ColorPalette\n                        value={iconBorder.color}\n                        onChange={(color) => {\n                          let border = { ...iconBorder };\n                          border[\"color\"] = color;\n                          setAttributes({ iconBorder: border });\n                        }}\n                      />\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Title / Description Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* title description  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                setTitleDescription(\"title\");\n              }}\n              className={titleDescription == \"title\" ? \"selected\" : \"\"}\n            >\n              {__(\"Title\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                setTitleDescription(\"description\");\n              }}\n              className={titleDescription == \"description\" ? \"selected\" : \"\"}\n            >\n              {__(\"Description\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* title description  */}\n          {titleDescription == \"title\" ? (\n            <>\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <label className=\"normal-label\">\n                  {__(\"Font Family\", \"unlimited-blocks\")}\n                </label>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span style={{ fontFamily: title.style.fontFamily }}>\n                      {title.style.fontFamily\n                        ? title.style.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            let title_ = { ...title };\n                            title_.style.fontFamily = family;\n                            setAttributes({ title: title_ });\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={title.style.fontSize}\n                min={0}\n                max={100}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.style.fontSize = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              <label className=\"normal-label\">\n                {__(\"Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                value={title.style.color}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.style.color = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              {/* font weight */}\n              <div className=\"flex-section\">\n                <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                <select\n                  value={title.style.fontWeight}\n                  onChange={(e) => {\n                    let title_ = { ...title };\n                    title_.style.fontWeight = e.target.value;\n                    setAttributes({ title: title_ });\n                  }}\n                >\n                  <option value=\"400\">400</option>\n                  <option value=\"500\">500</option>\n                  <option value=\"700\">700</option>\n                  <option value=\"900\">900</option>\n                  <option value=\"bold\">Bold</option>\n                  <option value=\"bolder\">Bolder</option>\n                </select>\n              </div>\n              {/* font weight */}\n              <p>\n                <strong>{__(\"Title Link\", \"unlimited-blocks\")}</strong>\n              </p>\n              <ToggleControl\n                label={\n                  title.url.keepUrl\n                    ? __(\"Disable\", \"unlimited-blocks\")\n                    : __(\"Enable\", \"unlimited-blocks\")\n                }\n                checked={title.url.keepUrl}\n                onChange={(e) => {\n                  let title_ = { ...title };\n                  title_.url.keepUrl = e;\n                  setAttributes({ title: title_ });\n                }}\n              />\n              {title.url.keepUrl && (\n                <div className=\"ubl-blocks-linkbtn\">\n                  <LinkControl\n                    value={{\n                      url: title.url.url,\n                      opensInNewTab: title.url.target,\n                    }}\n                    onChange={(vall) => {\n                      if (\"url\" in vall) {\n                        let title_ = { ...title };\n                        title_.url.url = vall.url;\n                        // console.log(\"new title\", title_);\n                        setAttributes({ title: title_ });\n                      }\n                      //target\n                      if (\"opensInNewTab\" in vall) {\n                        let title_ = { ...title };\n                        title_.url.target = vall.opensInNewTab;\n                        setAttributes({ title: title_ });\n                      }\n                    }}\n                  />\n                </div>\n              )}\n            </>\n          ) : (\n            <>\n              {/* font family */}\n              <div className=\"THK-font-family-wrapper\">\n                <label className=\"normal-label\">\n                  {__(\"Font Family\", \"unlimited-blocks\")}\n                </label>\n                <div\n                  ref={familyRef}\n                  className={`font-family-drop-down ${\n                    activeFamilyContainer ? \"active\" : \"\"\n                  }`}\n                >\n                  <div\n                    onClick={() => {\n                      let applyActive = !activeFamilyContainer;\n                      activeFamilyDrop(applyActive);\n                    }}\n                    className=\"font-family-show\"\n                  >\n                    <span style={{ fontFamily: description.style.fontFamily }}>\n                      {description.style.fontFamily\n                        ? description.style.fontFamily\n                        : __(\"Choose Family\", \"unlimited-blocks\")}\n                    </span>\n                  </div>\n                  <div className=\"family-items\">\n                    {fontFamily.map((family, key_) => {\n                      return (\n                        <span\n                          onClick={() => {\n                            let description_ = { ...description };\n                            description_.style.fontFamily = family;\n                            setAttributes({ description: description_ });\n                          }}\n                          style={{ fontFamily: family }}\n                        >\n                          {family}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {/* font family */}\n              <RangeControl\n                label={__(\"Font Size\", \"unlimited-blocks\")}\n                value={description.style.fontSize}\n                min={0}\n                max={100}\n                onChange={(e) => {\n                  let description_ = { ...description };\n                  description_.style.fontSize = e;\n                  setAttributes({ description: description_ });\n                }}\n              />\n              <label className=\"normal-label\">\n                {__(\"Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                value={description.style.color}\n                onChange={(e) => {\n                  let description_ = { ...description };\n                  description_.style.color = e;\n                  setAttributes({ description: description_ });\n                }}\n              />\n              {/* font weight */}\n              <div className=\"flex-section\">\n                <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                <select\n                  value={description.style.fontWeight}\n                  onChange={(e) => {\n                    let description_ = { ...description };\n                    description_.style.fontWeight = e.target.value;\n                    setAttributes({ description: description_ });\n                  }}\n                >\n                  <option value=\"400\">400</option>\n                  <option value=\"500\">500</option>\n                  <option value=\"700\">700</option>\n                  <option value=\"900\">900</option>\n                  <option value=\"bold\">Bold</option>\n                  <option value=\"bolder\">Bolder</option>\n                </select>\n              </div>\n              {/* font weight */}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Background Color\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"type\"] = \"color\";\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n              className={containerBgColor.type == \"color\" ? \"selected\" : \"\"}\n            >\n              {__(\"Solid\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"type\"] = \"gradient\";\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n              className={containerBgColor.type == \"gradient\" ? \"selected\" : \"\"}\n            >\n              {__(\"Gradient\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {\"color\" == containerBgColor.type ? (\n            <ColorPicker\n              color={containerBgColor.color}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"color\"] = color;\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n            />\n          ) : (\n            <GradientPicker\n              disableCustomGradients={false}\n              value={containerBgColor.gradient}\n              gradients={UBLGraDientColors}\n              onChange={(newGradient) => {\n                let getBgcolor = { ...containerBgColor };\n                getBgcolor[\"gradient\"] = newGradient;\n                setAttributes({ containerBgColor: getBgcolor });\n              }}\n            />\n          )}\n          {/* bg color  */}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Container Border Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"unlimited-blocks\")\n                : __(\"Enable\", \"unlimited-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"unlimited-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"unlimited-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <label className=\"normal-label\">\n                {__(\"Border Color\", \"unlimited-blocks\")}\n              </label>\n              <ColorPalette\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              <img style={customImgStyle} src={imageStyle.imgUrl} />\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconStyle.color,\n                  fontSize: iconStyle.fontSize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            <RichText\n              key=\"editable\"\n              tagName=\"h1\"\n              allowedFormats={[]}\n              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n              value={title.value}\n              onChange={(e) => {\n                let title_ = { ...title };\n                title_.value = e;\n                setAttributes({ title: title_ });\n              }}\n              style={{\n                color: title.style.color,\n                fontSize: title.style.fontSize + \"px\",\n                fontFamily: title.style.fontFamily,\n                fontWeight: title.style.fontWeight,\n              }}\n            />\n            <RichText\n              key=\"editable\"\n              tagName=\"p\"\n              allowedFormats={[]}\n              placeholder={__(\"Service Description\", \"unlimited-blocks\")}\n              value={description.value}\n              onChange={(e) => {\n                let description_ = { ...description };\n                description_.value = e;\n                setAttributes({ description: description_ });\n              }}\n              style={{\n                color: description.style.color,\n                fontSize: description.style.fontSize + \"px\",\n                fontFamily: description.style.fontFamily,\n                fontWeight: description.style.fontWeight,\n              }}\n            />\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const { attributes } = props;\n    const {\n      image,\n      imageStyle,\n      title,\n      description,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      //icon\n      iconStyle,\n      iconBorder,\n      iconClass,\n    } = attributes;\n    //icon border\n    let borderStyle = iconBorder.border\n      ? {\n          borderWidth: iconBorder.width + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorder.color,\n          borderRadius: iconBorder.radius + \"%\",\n          width: iconStyle.width + \"px\",\n          height: iconStyle.width + \"px\",\n        }\n      : {};\n    if (iconStyle.backgroundColor.type == \"color\") {\n      borderStyle[\"backgroundColor\"] = iconStyle.backgroundColor.color;\n    } else if (iconStyle.backgroundColor.type == \"gradient\") {\n      borderStyle[\"backgroundImage\"] = iconStyle.backgroundColor.gradient;\n    }\n    //icon border\n\n    let customImgStyle = {\n      width: imageStyle.width + \"%\",\n      padding: imageStyle.padding + \"px\",\n    };\n    if (imageStyle.border) {\n      customImgStyle = {\n        ...customImgStyle,\n        ...{\n          borderRadius: imageStyle.borderRadius + \"px\",\n          borderWidth: imageStyle.borderWidth + \"px\",\n          borderColor: imageStyle.borderColor,\n          borderStyle: imageStyle.borderType,\n        },\n      };\n    }\n\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    if (containerBgColor.type == \"color\") {\n      containerBorderStyle[\"backgroundColor\"] = containerBgColor.color;\n    } else if (containerBgColor.type == \"gradient\") {\n      containerBorderStyle[\"backgroundImage\"] = containerBgColor.gradient;\n    }\n    return (\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              {imageStyle.imageLink.keepUrl ? (\n                <a\n                  href={imageStyle.imageLink.link}\n                  target={imageStyle.imageLink.target ? \"_blank\" : null}\n                  rel={\n                    imageStyle.imageLink.target ? \"noopener noreferrer\" : null\n                  }\n                >\n                  <img style={customImgStyle} src={imageStyle.imgUrl} />\n                </a>\n              ) : (\n                <img style={customImgStyle} src={imageStyle.imgUrl} />\n              )}\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconStyle.color,\n                  fontSize: iconStyle.fontSize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            {title.url.keepUrl && title.url.url != \"\" ? (\n              <a\n                href={title.url.url}\n                target={title.url.target ? \"_blank\" : null}\n                rel={title.url.target ? \"noopener noreferrer\" : null}\n              >\n                <RichText.Content\n                  tagName=\"h1\"\n                  value={title.value}\n                  style={{\n                    color: title.style.color,\n                    fontSize: title.style.fontSize + \"px\",\n                    fontFamily: title.style.fontFamily,\n                    fontWeight: title.style.fontWeight,\n                  }}\n                />\n              </a>\n            ) : (\n              <RichText.Content\n                tagName=\"h1\"\n                value={title.value}\n                style={{\n                  color: title.style.color,\n                  fontSize: title.style.fontSize + \"px\",\n                  fontFamily: title.style.fontFamily,\n                  fontWeight: title.style.fontWeight,\n                }}\n              />\n            )}\n\n            <RichText.Content\n              tagName=\"p\"\n              value={description.value}\n              style={{\n                color: description.style.color,\n                fontSize: description.style.fontSize + \"px\",\n                fontFamily: description.style.fontFamily,\n                fontWeight: description.style.fontWeight,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","import { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport OwlCarousel from \"react-owl-carousel\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nimport {\n  InspectorControls,\n  RichText,\n  ColorPalette,\n  BlockControls,\n  BlockAlignmentToolbar,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  SelectControl,\n  ColorPicker,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport {\n  filterProductInit,\n  firstTimeInitProduct,\n} from \"../block-assets/woocommerce/product-functions\";\nimport ProductCategory from \"../block-assets/woocommerce/productCategory\";\nimport UblStyler from \"../block-assets/Styler\";\nimport { PostNotfound, PostLoader } from \"../block-assets/post-functions\";\nimport BasicToggleNav from \"../block-assets/utility-components/BasicToggleNav\";\nimport Border from \"../block-assets/utility-components/border\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    const { wrapper_id } = props.attributes;\n    this.state = {\n      // pages state from post\n      posts: [],\n      category: [],\n      totalPost: null,\n      preview: false,\n      wrapper_id: wrapper_id ? wrapper_id : \"ubl\" + props.clientId,\n      openPanel: \"style\",\n      // openPanel: \"layout\",\n    };\n  }\n  saveClientId = () => {\n    const { attributes, setAttributes, clientId } = this.props;\n    if (!attributes.wrapper_id) {\n      setAttributes({ wrapper_id: \"ubl\" + clientId });\n    }\n  };\n  componentDidMount() {\n    this.saveClientId();\n    let sendData = { productlayout: \"simple_layout\" };\n    firstTimeInitProduct(this, sendData);\n    // content box style\n    this.styleAdd();\n  }\n\n  styleAdd = () => {\n    let { attributes } = this.props;\n    let { boxStyle } = attributes;\n    let { wrapper_id } = this.state;\n    // bg color for box\n    UblStyler(\n      `${wrapper_id}-box-bg`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom:before`,\n      `background-color:${boxStyle.bgColor}`\n    );\n    UblStyler(\n      `${wrapper_id}-box-bg-boxShadow`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n      `color:${boxStyle.boxShadowColor}`\n    );\n    UblStyler(\n      `${wrapper_id}-box-bg-boxShadowhover`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap:hover .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap:hover .elemento-product-simple-inner-bottom`,\n      `color:${boxStyle.boxShadowColorHover}`\n    );\n    // --------------------------------box border--------------------------------\n    UblStyler(\n      `${wrapper_id}-box-border-width`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n      `border-width:${boxStyle.borderWidth}`\n    );\n    UblStyler(\n      `${wrapper_id}-box-border-style`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n      `border-style:${boxStyle.borderStyle}`\n    );\n    UblStyler(\n      `${wrapper_id}-box-border-color`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n      `border-color:${boxStyle.borderColor}`\n    );\n    UblStyler(\n      `${wrapper_id}-box-border-radius`,\n      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n      `border-radius:${boxStyle.borderRadius}`\n    );\n    // --------------------------------box border--------------------------------\n  };\n  // 'attributes' => [ \"boxStyle\" => [\"bgColor\" => \"#b1b1b1\",]]\n  // -------------------key----------key2---------value\n  updateStyle = (key_, value, key2, multiple = false) => {\n    const { attributes, setAttributes } = this.props;\n    let getStyle = { ...attributes[key_] };\n    if (multiple) {\n      getStyle = { ...getStyle, ...multiple };\n    } else {\n      getStyle[key2] = value;\n    }\n    let SetAttr = {};\n    SetAttr[key_] = getStyle;\n    setAttributes(SetAttr);\n  };\n  // this will call api\n  updateProduct(key_, val_) {\n    let SendObj = {};\n    SendObj[key_] = val_;\n    SendObj[\"productlayout\"] = \"simple_layout\";\n    filterProductInit(this, SendObj);\n  }\n\n  render() {\n    // ++++++++++++++===============\n    console.log(\"product props\", this.props);\n    // console.log(\"product state\", this.state);\n    const { wrapper_id, preview, posts, totalPost } = this.state;\n    const { attributes, setAttributes } = this.props;\n    let { product_cate, numberOfPosts, boxStyle, sliderSettings } = attributes;\n    // slider options\n    const slider_options_ = {\n      // items: 1,\n      // nav: true,\n      // navText: [\n      //   \"<div className='nav-btn prev-slide'></div>\",\n      //   \"<div className='nav-btn next-slide'></div>\",\n      // ],\n      // rewind: true,\n      // autoplay: true,\n      // slideBy: 1,\n      // dots: true,\n      // dotsEach: true,\n      // dotData: true,\n      mouseDrag: true,\n      touchDrag: true,\n    };\n\n    if (numberOfPosts) {\n      if (numberOfPosts > sliderSettings.numberOfColumn) {\n        slider_options_[\"items\"] = sliderSettings.numberOfColumn;\n      } else {\n        slider_options_[\"items\"] = numberOfPosts;\n      }\n    }\n    if (sliderSettings.autoplay) {\n      slider_options_[\"autoplay\"] = true;\n    }\n    if (sliderSettings.loop == \"on\") {\n      slider_options_[\"loop\"] = true;\n    }\n    if (sliderSettings.margin) {\n      slider_options_[\"margin\"] = sliderSettings.margin;\n    }\n\n    // margin: 30, box-spacing\n\n    const OwlSlider = () => (\n      <OwlCarousel\n        className=\"owl-theme ul-simple-product-slider\"\n        {...slider_options_}\n      >\n        {posts.map((val_) => (\n          <div className=\"item\">{ReactHtmlParser(val_)}</div>\n        ))}\n      </OwlCarousel>\n    );\n    return (\n      <>\n        <BlockControls key=\"controls\">\n          <BlockAlignmentToolbar\n            value={attributes.align}\n            onChange={(align) => setAttributes({ align })}\n            controls={[\"wide\", \"full\"]}\n          />\n        </BlockControls>\n        <InspectorControls>\n          <PanelBody initialOpen={true}>\n            <BasicToggleNav\n              value={this.state.openPanel}\n              navItem={[\n                {\n                  name: \"layout\",\n                  title: \"Layout\",\n                  icon: \"dashicons dashicons-editor-table\",\n                },\n                {\n                  name: \"style\",\n                  title: \"Style\",\n                  icon: \"dashicons dashicons-admin-customizer\",\n                },\n              ]}\n              clickme={(value_) => {\n                this.setState({ openPanel: value_ });\n              }}\n            />\n          </PanelBody>\n\n          {this.state.openPanel == \"layout\" ? (\n            <>\n              <PanelBody\n                initialOpen={true}\n                title={__(\"Product Settings\", \"unlimited-blocks\")}\n              >\n                <ToggleControl\n                  label={__(\"Preview\", \"unlimited-blocks\")}\n                  checked={preview}\n                  onChange={(e) => this.setState({ preview: e })}\n                />\n                <p>\n                  <strong>\n                    {__(\"Number of Post Display\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={numberOfPosts}\n                  min={1}\n                  max={24}\n                  onChange={(e) => {\n                    setAttributes({ numberOfPosts: e });\n                    this.updateProduct(\"numberOfPosts\", e);\n                  }}\n                />\n\n                <ProductCategory\n                  value={product_cate}\n                  category={this.state.category}\n                  onMovement={(category) => {\n                    setAttributes({ product_cate: category });\n                    this.updateProduct(\"product_cate\", category);\n                  }}\n                />\n              </PanelBody>\n              <PanelBody\n                initialOpen={false}\n                title={__(\"Slider Settings\", \"unlimited-blocks\")}\n              >\n                <p>\n                  <strong>{__(\"Number of Column\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSettings.numberOfColumn}\n                  min={1}\n                  max={6}\n                  onChange={(e) => {\n                    this.updateStyle(\"sliderSettings\", e, \"numberOfColumn\");\n                  }}\n                />\n                <ToggleControl\n                  label={__(\"AutoPlay\", \"unlimited-blocks\")}\n                  checked={sliderSettings.autoplay == \"on\"}\n                  onChange={(e) => {\n                    let put = e ? \"on\" : \"\";\n                    this.updateStyle(\"sliderSettings\", put, \"autoplay\");\n                  }}\n                />\n                <ToggleControl\n                  label={__(\"Loop\", \"unlimited-blocks\")}\n                  checked={sliderSettings.loop == \"on\"}\n                  onChange={(e) => {\n                    let put = e ? \"on\" : \"\";\n                    this.updateStyle(\"sliderSettings\", put, \"loop\");\n                  }}\n                />\n              </PanelBody>\n            </>\n          ) : (\n            <>\n              <PanelBody\n                initialOpen={false}\n                title={__(\"Product Box Style\", \"unlimited-blocks\")}\n              >\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={boxStyle.bgColor}\n                  onChange={(color) => {\n                    this.updateStyle(\"boxStyle\", color, \"bgColor\");\n                    UblStyler(\n                      `${wrapper_id}-box-bg`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n                      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n                      `background-color:${color}`\n                    );\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Box Spacing\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSettings.margin}\n                  min={1}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateStyle(\"sliderSettings\", e, \"margin\");\n                  }}\n                />\n              </PanelBody>\n              <PanelBody\n                initialOpen={false}\n                title={__(\"Box Border & BoxShadow\", \"unlimited-blocks\")}\n              >\n                <Border\n                  value={{\n                    allUnit: \"px\",\n                    borderStyle: boxStyle.borderStyle,\n                    borderWidth: boxStyle.borderWidth,\n                    borderColor: boxStyle.borderColor,\n                    borderRadius: boxStyle.borderRadius,\n                    borderWidthLink: boxStyle.borderWidthLink,\n                    borderRadiusLink: boxStyle.borderRadiusLink,\n                  }}\n                  changeme={(getProperty) => {\n                    this.updateStyle(\"boxStyle\", true, true, getProperty);\n\n                    UblStyler(\n                      `${wrapper_id}-box-border-width`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom:before`,\n                      `border-width:${getProperty.borderWidth}`\n                    );\n                    UblStyler(\n                      `${wrapper_id}-box-border-style`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n                      `border-style:${getProperty.borderStyle}`\n                    );\n                    UblStyler(\n                      `${wrapper_id}-box-border-color`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n                      `border-color:${getProperty.borderColor}`\n                    );\n                    UblStyler(\n                      `${wrapper_id}-box-border-radius`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n                      `border-radius:${getProperty.borderRadius}`\n                    );\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Box Shadow Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={boxStyle.boxShadowColor}\n                  onChange={(color) => {\n                    this.updateStyle(\"boxStyle\", color, \"boxShadowColor\");\n                    UblStyler(\n                      `${wrapper_id}-box-bg-boxShadow`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-wrap,\n                      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap .elemento-product-simple-inner-bottom`,\n                      `color:${color}`\n                    );\n                  }}\n                />\n                <p>\n                  <strong>\n                    {__(\"Box Shadow Hover Color\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <ColorPalette\n                  value={boxStyle.boxShadowColorHover}\n                  onChange={(color) => {\n                    this.updateStyle(\"boxStyle\", color, \"boxShadowColorHover\");\n                    UblStyler(\n                      `${wrapper_id}-box-bg-boxShadowhover`,\n                      `.${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap:hover .elemento-product-simple-inner-wrap,\n      .${wrapper_id}.ul-blocks-simple-product .elemento-product-outer-wrap:hover .elemento-product-simple-inner-bottom`,\n                      `color:${color}`\n                    );\n                  }}\n                />\n              </PanelBody>\n            </>\n          )}\n        </InspectorControls>\n        <div\n          className={`${wrapper_id} ul-blocks-simple-product ${\n            preview ? \"elemento-simple-product-previewon\" : \"\"\n          }`}\n        >\n          {!posts ? (\n            <PostNotfound msg=\"Product Not Found.\" />\n          ) : posts.length ? (\n            <OwlSlider />\n          ) : (\n            <PostLoader msg=\"Product Loading...\" />\n          )}\n        </div>\n      </>\n    );\n    // ++++++++++++++===============\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { __ } from \"@wordpress/i18n\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { ubl_block_product } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-product\", {\n  title: ubl_block_product.title,\n  description: ubl_block_product.description,\n  icon: ubl_block_product.icon,\n  keywords: ubl_block_product.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    const { align } = attributes;\n    if (align) {\n      return { \"data-align\": align };\n    }\n  },\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n  __experimentalLinkControl as LinkControl,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  __experimentalGradientPicker as GradientPicker,\n  __experimentalInputControl as InputControl,\n} from \"@wordpress/components\";\n\nimport { UBLGraDientColors } from \"../block-assets/post-functions\";\nimport { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSlide: 0,\n      twoBtn: \"buttoneOne\",\n      trigger: \"linear\",\n      slideSetting: \"slides\",\n      sideContentOpen: false,\n      commonDropDown: \"\",\n      slideBgButton: \"\",\n    };\n  }\n\n  addSlide = () => {\n    let defaultArray = {\n      container: {\n        bgImage: \"\",\n        overlayColor: {\n          type: \"color\",\n          color: \"rgb(10 10 10)\",\n          gradient:\n            \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          opacity: 0.6,\n        },\n        bgSize: \"cover\",\n      },\n      // wrapper: {\n      //   bgcolor: \"\",\n      //   border: \"\",\n      //   alignment: \"center\",\n      //   spacing: \"2\",\n      // },\n      title: {\n        text: __(\"This Is Title text\", \"unlimited-blocks\"),\n        // fontSize: 17,\n        // color: \"red\",\n      },\n      text: {\n        text: __(\"Add Description\", \"unlimited-blocks\"),\n        // fontSize: 17,\n        // color: \"red\",\n      },\n      buttoneOne: {\n        enable: true,\n        text: __(\"Button One\", \"unlimited-blocks\"),\n        link: \"#\",\n        target: false,\n      },\n      buttoneTwo: {\n        enable: true,\n        text: __(\"Button Two\", \"unlimited-blocks\"),\n        link: \"#\",\n        target: false,\n      },\n    };\n    let slides_ = this.props.attributes.slides;\n    this.props.setAttributes({ slides: [...slides_, defaultArray] });\n    this.setState({ selectedSlide: slides_.length, sideContentOpen: false });\n  };\n  removeSlide(slideINdex = false) {\n    let slides_ = [...this.props.attributes.slides];\n    let removeItem = slideINdex ? slideINdex : this.state.selectedSlide;\n    let afterRemove = [\n      ...slides_.slice(0, removeItem),\n      ...slides_.slice(removeItem + 1),\n    ];\n    let putSlide_ = removeItem - 1 >= 0 ? removeItem - 1 : removeItem;\n    this.setState({\n      selectedSlide: putSlide_,\n      sideContentOpen: false,\n    });\n    this.props.setAttributes({ slides: afterRemove });\n  }\n  updateSlides = (value, for_, type) => {\n    let slides_ = this.props.attributes.slides;\n    let newSlide = [...slides_];\n    newSlide[this.state.selectedSlide][for_][type] = value;\n    this.props.setAttributes({ slides: newSlide });\n  };\n  // this.updateGlobalSlide(\"left\", \"wrapper\", \"alignment\");\n  updateGlobalSlide = (value, for_, type) => {\n    let sliderSetting = this.props.attributes.sliderSetting;\n    let newSetting = [...sliderSetting];\n    if (type) {\n      newSetting[0][for_][type] = value;\n    } else {\n      newSetting[0][for_] = value;\n    }\n    this.props.setAttributes({ sliderSetting: newSetting });\n  };\n\n  render() {\n    // console.log(\"slider->\", this.props);\n    let { slides, sliderSetting } = this.props.attributes;\n    const thisState = this.state;\n    const stateIndex = thisState.selectedSlide;\n    // console.log(\"stateIndex->\", stateIndex);\n\n    const currentSlide = slides[stateIndex];\n    // console.log(\"currentSlide\", currentSlide);\n    // // undefined check\n    // if (currentSlide) {\n    sliderSetting = sliderSetting[0];\n    const activeTwoBtnState = thisState.twoBtn;\n    let triggerActive = thisState.trigger;\n    let buttonOneStyle = {\n      fontSize: sliderSetting.buttoneOne.fontSize,\n      color: sliderSetting.buttoneOne.color,\n      paddingTop: sliderSetting.buttoneOne.height,\n      paddingBottom: sliderSetting.buttoneOne.height,\n      paddingLeft: sliderSetting.buttoneOne.width,\n      paddingRight: sliderSetting.buttoneOne.width,\n    };\n    buttonOneStyle = sliderSetting.buttoneOne.border\n      ? {\n          ...{\n            borderColor: sliderSetting.buttoneOne.borderColor,\n            borderWidth: sliderSetting.buttoneOne.borderWidth,\n            borderRadius: sliderSetting.buttoneOne.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonOneStyle,\n        }\n      : buttonOneStyle;\n    // background color btn\n    if (sliderSetting.buttoneOne.backgroundColor.type == \"color\") {\n      buttonOneStyle[\"backgroundColor\"] =\n        sliderSetting.buttoneOne.backgroundColor.color;\n    } else if (sliderSetting.buttoneOne.backgroundColor.type == \"gradient\") {\n      buttonOneStyle[\"backgroundImage\"] =\n        sliderSetting.buttoneOne.backgroundColor.gradient;\n    }\n\n    let buttonTwoStyle = {\n      fontSize: sliderSetting.buttoneTwo.fontSize,\n      color: sliderSetting.buttoneTwo.color,\n      paddingTop: sliderSetting.buttoneTwo.height,\n      paddingBottom: sliderSetting.buttoneTwo.height,\n      paddingLeft: sliderSetting.buttoneTwo.width,\n      paddingRight: sliderSetting.buttoneTwo.width,\n    };\n    buttonTwoStyle = sliderSetting.buttoneTwo.border\n      ? {\n          ...{\n            borderColor: sliderSetting.buttoneTwo.borderColor,\n            borderWidth: sliderSetting.buttoneTwo.borderWidth,\n            borderRadius: sliderSetting.buttoneTwo.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonTwoStyle,\n        }\n      : buttonTwoStyle;\n    // background color btn\n    if (sliderSetting.buttoneTwo.backgroundColor.type == \"color\") {\n      buttonTwoStyle[\"backgroundColor\"] =\n        sliderSetting.buttoneTwo.backgroundColor.color;\n    } else if (sliderSetting.buttoneTwo.backgroundColor.type == \"gradient\") {\n      buttonTwoStyle[\"backgroundImage\"] =\n        sliderSetting.buttoneTwo.backgroundColor.gradient;\n    }\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      // backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let SlideulStyle = null;\n    if (sliderSetting.dimension.height) {\n      SlideulStyle = { minHeight: sliderSetting.dimension.custom_height };\n    }\n    // wrapper style\n    let wrapperAlignment = sliderSetting.wrapper.alignment;\n    let wrapperSpacing = {\n      marginTop: sliderSetting.wrapper.spacing + \"px\",\n      marginBottom: sliderSetting.wrapper.spacing + \"px\",\n      textAlign: sliderSetting.wrapper.textAlign,\n    };\n    // wrapper style\n    // title style\n    let TitleStyle = {\n      fontSize: sliderSetting.title.fontSize + \"px\",\n      color: sliderSetting.title.color,\n    };\n    // title style\n    // description style\n    let descriptionStyle = {\n      fontSize: sliderSetting.text.fontSize + \"px\",\n      color: sliderSetting.text.color,\n    };\n    // description style\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Slider Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          {/* top nav  */}\n          <div class=\"ubl-switcher-button-section\">\n            <span\n              onClick={() => {\n                this.setState({ slideSetting: \"slides\" });\n              }}\n              className={thisState.slideSetting == \"slides\" ? \"selected\" : \"\"}\n            >\n              {__(\"Slides\", \"unlimited-blocks\")}\n            </span>\n            <span\n              onClick={() => {\n                this.setState({ slideSetting: \"option\" });\n              }}\n              className={thisState.slideSetting == \"option\" ? \"selected\" : \"\"}\n            >\n              {__(\"Slider Options\", \"unlimited-blocks\")}\n            </span>\n          </div>\n          {/* top nav  */}\n          <div className=\"ubl-panel-container ubl-slider-panel\">\n            {thisState.slideSetting == \"slides\" ? (\n              <>\n                <div className=\"slides-option\">\n                  {slides.map((slides_, slides_I) => {\n                    let serial = slides_I + 1;\n                    return (\n                      <div\n                        className={`slide-panel-single ${\n                          thisState.selectedSlide == slides_I &&\n                          thisState.sideContentOpen\n                            ? \"active\"\n                            : \"\"\n                        }`}\n                      >\n                        <div\n                          className=\"slide-nav\"\n                          onClick={() => {\n                            if (\n                              thisState.sideContentOpen &&\n                              thisState.selectedSlide == slides_I\n                            ) {\n                              this.setState({\n                                sideContentOpen: false,\n                              });\n                            } else {\n                              this.setState({\n                                selectedSlide: slides_I,\n                                sideContentOpen: true,\n                                slideBgButton: serial + \"background\",\n                              });\n                            }\n                          }}\n                        >\n                          <span>\n                            {__(\"Slide\", \"unlimited-blocks\") + \" \" + serial}\n                          </span>\n                          {serial !== slides.length && slides.length > 1 ? (\n                            <div className=\"controlls\">\n                              <span\n                                onClick={() => {\n                                  this.removeSlide(slides_I);\n                                }}\n                              >\n                                <i className=\"fas fa-trash-alt\"></i>\n                              </span>\n                            </div>\n                          ) : (\n                            \"\"\n                          )}\n                          <div className=\"caret\">\n                            <i className=\"fas fa-caret-down\"></i>\n                          </div>\n                        </div>\n                        <div className=\"slides-element\">\n                          {/* background and link url  */}\n                          <div class=\"ubl-switcher-button-section sub\">\n                            <span\n                              onClick={() => {\n                                this.setState({\n                                  slideBgButton: serial + \"background\",\n                                });\n                              }}\n                              className={\n                                thisState.slideBgButton == serial + \"background\"\n                                  ? \"selected\"\n                                  : \"\"\n                              }\n                            >\n                              {__(\"Background\", \"unlimited-blocks\")}\n                            </span>\n                            <span\n                              onClick={() => {\n                                this.setState({\n                                  slideBgButton: serial + \"button\",\n                                });\n                              }}\n                              className={\n                                thisState.slideBgButton == serial + \"button\"\n                                  ? \"selected\"\n                                  : \"\"\n                              }\n                            >\n                              {__(\"Button Links\", \"unlimited-blocks\")}\n                            </span>\n                          </div>\n                          {/* background and link url  */}\n                          {thisState.slideBgButton == serial + \"background\" ? (\n                            <>\n                              {/* background  */}\n                              <p>\n                                <strong>\n                                  {__(\"Background image\", \"unlimited-blocks\")}\n                                </strong>\n                              </p>\n                              <MediaUpload\n                                allowedType=\"image\"\n                                onSelect={(newImage) =>\n                                  this.updateSlides(\n                                    newImage.sizes.full.url,\n                                    \"container\",\n                                    \"bgImage\"\n                                  )\n                                }\n                                value={slides_.container.bgImage}\n                                render={({ open }) => (\n                                  <div\n                                    onClick={open}\n                                    className={`ubl-block-image-uploader ${\n                                      !slides_.container.bgImage ? \"blank\" : \"\"\n                                    }`}\n                                  >\n                                    <div>\n                                      <i className=\"fas fa-plus\"></i>\n                                    </div>\n                                    {slides_.container.bgImage ? (\n                                      <img src={slides_.container.bgImage} />\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </div>\n                                )}\n                              />\n                              {slides_.container.bgImage && (\n                                <>\n                                  <div className=\"remove-image\">\n                                    <span\n                                      onClick={() => {\n                                        this.updateSlides(\n                                          \"\",\n                                          \"container\",\n                                          \"bgImage\"\n                                        );\n                                      }}\n                                    >\n                                      {__(\"Remove\", \"unlimited-blocks\")}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex-section-slider\">\n                                    <p>\n                                      {__(\"Background Size\", \"unlimited-blocks\")}\n                                    </p>\n                                    <select\n                                      value={currentSlide.container.bgSize}\n                                      onChange={(e) => {\n                                        this.updateSlides(\n                                          e.target.value,\n                                          \"container\",\n                                          \"bgSize\"\n                                        );\n                                      }}\n                                    >\n                                      <option value=\"auto\">\n                                        {__(\"Auto\", \"unlimited-blocks\")}\n                                      </option>\n                                      <option value=\"cover\">\n                                        {__(\"Cover\", \"unlimited-blocks\")}\n                                      </option>\n                                      <option value=\"contain\">\n                                        {__(\"Contain\", \"unlimited-blocks\")}\n                                      </option>\n                                    </select>\n                                  </div>\n                                </>\n                              )}\n                              <p>\n                                <strong>\n                                  {__(\n                                    \"Overlay / Background Color\",\n                                    \"unlimited-blocks\"\n                                  )}\n                                </strong>\n                              </p>\n                              <div class=\"ubl-switcher-button-section sub\">\n                                <span\n                                  onClick={() => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"type\"] = \"color\";\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                  className={\n                                    slides_.container.overlayColor.type ==\n                                    \"color\"\n                                      ? \"selected\"\n                                      : \"\"\n                                  }\n                                >\n                                  {__(\"Solid\", \"unlimited-blocks\")}\n                                </span>\n                                <span\n                                  onClick={() => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"type\"] = \"gradient\";\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                  className={\n                                    slides_.container.overlayColor.type ==\n                                    \"gradient\"\n                                      ? \"selected\"\n                                      : \"\"\n                                  }\n                                >\n                                  {__(\"Gradient\", \"unlimited-blocks\")}\n                                </span>\n                              </div>\n                              {\"color\" ==\n                              slides_.container.overlayColor.type ? (\n                                <ColorPalette\n                                  value={slides_.container.overlayColor.color}\n                                  onChange={(color) => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"color\"] = color;\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                />\n                              ) : (\n                                <GradientPicker\n                                  disableCustomGradients={false}\n                                  value={\n                                    slides_.container.overlayColor.gradient\n                                  }\n                                  gradients={UBLGraDientColors}\n                                  onChange={(newGradient) => {\n                                    let getBgcolor = {\n                                      ...slides_.container.overlayColor,\n                                    };\n                                    getBgcolor[\"gradient\"] = newGradient;\n                                    this.updateSlides(\n                                      getBgcolor,\n                                      \"container\",\n                                      \"overlayColor\"\n                                    );\n                                  }}\n                                />\n                              )}\n                              <RangeControl\n                                label={__(\"Opacity\", \"unlimited-blocks\")}\n                                value={slides_.container.overlayColor.opacity}\n                                min={0}\n                                max={1}\n                                step={0.1}\n                                onChange={(e) => {\n                                  let getBgcolor = {\n                                    ...slides_.container.overlayColor,\n                                  };\n                                  getBgcolor[\"opacity\"] = e;\n                                  this.updateSlides(\n                                    getBgcolor,\n                                    \"container\",\n                                    \"overlayColor\"\n                                  );\n                                }}\n                              />\n                              {/* bg color  */}\n                              {/* background  */}\n                            </>\n                          ) : (\n                            <>\n                              {/* link  */}\n                              <p>\n                                <strong>{__(\"Button 1\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <ToggleControl\n                                label={\n                                  slides_.buttoneOne.enable\n                                    ? __(\"Disable\", \"unlimited-blocks\")\n                                    : __(\"Enable\", \"unlimited-blocks\")\n                                }\n                                checked={slides_.buttoneOne.enable}\n                                onChange={(e) => {\n                                  this.updateSlides(e, \"buttoneOne\", \"enable\");\n                                }}\n                              />\n                              {slides_.buttoneOne.enable && (\n                                <div className=\"ubl-blocks-linkbtn\">\n                                  <LinkControl\n                                    value={{\n                                      url: slides_.buttoneOne.link,\n                                      opensInNewTab: slides_.buttoneOne.target,\n                                    }}\n                                    onChange={(vall) => {\n                                      if (\"url\" in vall) {\n                                        this.updateSlides(\n                                          vall.url,\n                                          \"buttoneOne\",\n                                          \"link\"\n                                        );\n                                      }\n                                      //target\n                                      if (\"opensInNewTab\" in vall) {\n                                        this.updateSlides(\n                                          vall.opensInNewTab,\n                                          \"buttoneOne\",\n                                          \"target\"\n                                        );\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              )}\n                              <p>\n                                <strong>{__(\"Button 2\", \"unlimited-blocks\")}</strong>\n                              </p>\n                              <ToggleControl\n                                label={\n                                  slides_.buttoneTwo.enable\n                                    ? __(\"Disable\", \"unlimited-blocks\")\n                                    : __(\"Enable\", \"unlimited-blocks\")\n                                }\n                                checked={slides_.buttoneTwo.enable}\n                                onChange={(e) => {\n                                  this.updateSlides(e, \"buttoneTwo\", \"enable\");\n                                }}\n                              />\n                              {slides_.buttoneTwo.enable && (\n                                <div className=\"ubl-blocks-linkbtn\">\n                                  <LinkControl\n                                    value={{\n                                      url: slides_.buttoneTwo.link,\n                                      opensInNewTab: slides_.buttoneTwo.target,\n                                    }}\n                                    onChange={(vall) => {\n                                      if (\"url\" in vall) {\n                                        this.updateSlides(\n                                          vall.url,\n                                          \"buttoneTwo\",\n                                          \"link\"\n                                        );\n                                      }\n                                      //target\n                                      if (\"opensInNewTab\" in vall) {\n                                        this.updateSlides(\n                                          vall.opensInNewTab,\n                                          \"buttoneTwo\",\n                                          \"target\"\n                                        );\n                                      }\n                                    }}\n                                  />\n                                </div>\n                              )}\n                              {/* link  */}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"add-new-slide\">\n                  <span\n                    onClick={() => {\n                      this.addSlide();\n                    }}\n                  >\n                    <i class=\"fas fa-plus\"></i>Add New\n                  </span>\n                </div>\n                <p>\n                  <strong>{__(\"Width\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting.dimension.width\n                      ? __(\"Full Width\", \"unlimited-blocks\")\n                      : __(\"Custom Width\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.dimension.width}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"dimension\", \"width\");\n                  }}\n                />\n                {sliderSetting.dimension.width && (\n                  <RangeControl\n                    label={__(\"Width\", \"unlimited-blocks\")}\n                    value={sliderSetting.dimension.custom_width}\n                    min={200}\n                    max={1400}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"dimension\", \"custom_width\")\n                    }\n                  />\n                )}\n                <p>\n                  <strong>{__(\"Height\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting.dimension.width\n                      ? __(\"Auto\", \"unlimited-blocks\")\n                      : __(\"Custom Height\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.dimension.height}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"dimension\", \"height\");\n                  }}\n                />\n                {sliderSetting.dimension.height && (\n                  <RangeControl\n                    label={__(\"Height\", \"unlimited-blocks\")}\n                    value={sliderSetting.dimension.custom_height}\n                    min={360}\n                    max={1000}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"dimension\", \"custom_height\")\n                    }\n                  />\n                )}\n              </>\n            ) : (\n              <div className=\"slides-settings\">\n                <>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Navigation\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={sliderSetting.triggerActive}\n                      onChange={(e) => {\n                        this.updateGlobalSlide(e.target.value, \"triggerActive\");\n                      }}\n                    >\n                      <option value=\"both\">\n                        {__(\"Arrows and Dots\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"arrows\">\n                        {__(\"Arrows\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"dots\">{__(\"Dots\", \"unlimited-blocks\")}</option>\n                      <option value=\"n\">{__(\"None\", \"unlimited-blocks\")}</option>\n                    </select>\n                  </div>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Transition\", \"unlimited-blocks\")}</p>\n                    <select\n                      value={sliderSetting.sliderEffect}\n                      onChange={(e) => {\n                        this.updateGlobalSlide(e.target.value, \"sliderEffect\");\n                      }}\n                    >\n                      <option value=\"fadeEffect\">\n                        {__(\"Fade\", \"unlimited-blocks\")}\n                      </option>\n                      <option value=\"slideEffect\">\n                        {__(\"Slide\", \"unlimited-blocks\")}\n                      </option>\n                    </select>\n                  </div>\n                  <div className=\"flex-section-slider\">\n                    <p>{__(\"Autoplay\", \"unlimited-blocks\")}</p>\n                    <ToggleControl\n                      checked={sliderSetting.autoTrigger.enable}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(e, \"autoTrigger\", \"enable\")\n                      }\n                    />\n                  </div>\n                  {sliderSetting.autoTrigger.enable && (\n                    <RangeControl\n                      label={__(\"Autoplay Speed\", \"unlimited-blocks\")}\n                      value={sliderSetting.autoTrigger.delay}\n                      min={0}\n                      max={12}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(e, \"autoTrigger\", \"delay\")\n                      }\n                    />\n                  )}\n                  {(sliderSetting.triggerActive == \"both\" ||\n                    sliderSetting.triggerActive == \"dots\") && (\n                    <div\n                      className={`slide-panel-single ${\n                        thisState.commonDropDown == \"dots-style\" ? \"active\" : \"\"\n                      }`}\n                    >\n                      <div\n                        class=\"slide-nav\"\n                        onClick={() => {\n                          if (thisState.commonDropDown == \"dots-style\") {\n                            this.setState({ commonDropDown: \"\" });\n                          } else {\n                            this.setState({ commonDropDown: \"dots-style\" });\n                          }\n                        }}\n                      >\n                        <span>{__(\"Dotts Styles\", \"unlimited-blocks\")}</span>\n                        <div class=\"caret\">\n                          <i class=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        <RangeControl\n                          label={__(\"Size\", \"unlimited-blocks\")}\n                          value={sliderSetting.linearTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"linearTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.color}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"color\"\n                            );\n                          }}\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Active Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.activeColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"activeColor\"\n                            );\n                          }}\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  {(sliderSetting.triggerActive == \"both\" ||\n                    sliderSetting.triggerActive == \"arrows\") && (\n                    <div\n                      className={`slide-panel-single ${\n                        thisState.commonDropDown == \"arrow-style\"\n                          ? \"active\"\n                          : \"\"\n                      }`}\n                    >\n                      <div\n                        class=\"slide-nav\"\n                        onClick={() => {\n                          if (thisState.commonDropDown == \"arrow-style\") {\n                            this.setState({ commonDropDown: \"\" });\n                          } else {\n                            this.setState({ commonDropDown: \"arrow-style\" });\n                          }\n                        }}\n                      >\n                        <span>{__(\"Arrows Styles\", \"unlimited-blocks\")}</span>\n                        <div class=\"caret\">\n                          <i class=\"fas fa-caret-down\"></i>\n                        </div>\n                      </div>\n                      <div className=\"slides-element\">\n                        <RangeControl\n                          label={__(\"Font Size\", \"unlimited-blocks\")}\n                          value={sliderSetting.leftRightTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"leftRightTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <label className=\"normal-label\">\n                          {__(\"Color\", \"unlimited-blocks\")}\n                        </label>\n                        <ColorPalette\n                          value={sliderSetting.leftRightTrigger.color}\n                          onChange={(color) =>\n                            this.updateGlobalSlide(\n                              color,\n                              \"leftRightTrigger\",\n                              \"color\"\n                            )\n                          }\n                        />\n                      </div>\n                    </div>\n                  )}\n                  {/* arrows and dots */}\n                </>\n              </div>\n            )}\n          </div>\n        </PanelBody>\n        <PanelBody\n          title={__(\"Content Settings\", \"unlimited-blocks\")}\n          initialOpen={false}\n        >\n          <div className=\"ubl-slider-panel\">\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.wrapper.alignment == \"left\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.wrapper.alignment == \"center\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"wrapper\", \"alignment\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.wrapper.alignment == \"right\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n            <p>\n              <strong>{__(\"Text Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.wrapper.textAlign == \"left\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.wrapper.textAlign == \"center\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"wrapper\", \"textAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.wrapper.textAlign == \"right\" ? \"active\" : \"\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n\n            <p>\n              <strong>{__(\"Text Vertical Space\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={sliderSetting.wrapper.spacing}\n              min={0}\n              max={30}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"wrapper\", \"spacing\");\n              }}\n            />\n            {/* --------------heading style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"heading-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"heading-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"heading-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Heading Styles\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSetting.title.fontSize}\n                  min={0}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateGlobalSlide(e, \"title\", \"fontSize\");\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={sliderSetting.title.color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, \"title\", \"color\")\n                  }\n                />\n              </div>\n            </div>\n            {/* --------------heading style---------------- */}\n            {/* --------------description style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"description-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"description-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"description-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Description Setting\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={sliderSetting.text.fontSize}\n                  min={0}\n                  max={100}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"text\", \"fontSize\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={sliderSetting.text.color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, \"text\", \"color\")\n                  }\n                />\n              </div>\n            </div>\n            {/* --------------description style---------------- */}\n            {/* --------------button style---------------- */}\n            <div\n              className={`slide-panel-single ${\n                thisState.commonDropDown == \"button-style\" ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                class=\"slide-nav\"\n                onClick={() => {\n                  if (thisState.commonDropDown == \"button-style\") {\n                    this.setState({ commonDropDown: \"\" });\n                  } else {\n                    this.setState({ commonDropDown: \"button-style\" });\n                  }\n                }}\n              >\n                <span>{__(\"Button Setting\", \"unlimited-blocks\")}</span>\n                <div class=\"caret\">\n                  <i class=\"fas fa-caret-down\"></i>\n                </div>\n              </div>\n              <div className=\"slides-element\">\n                <div className=\"ubl-switcher-button-section\">\n                  <span\n                    className={\n                      activeTwoBtnState == \"buttoneOne\" ? \"selected\" : \"\"\n                    }\n                    onClick={() => {\n                      this.setState({ twoBtn: \"buttoneOne\" });\n                    }}\n                  >\n                    {__(\"Button 1\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    className={\n                      activeTwoBtnState == \"buttoneTwo\" ? \"selected\" : \"\"\n                    }\n                    onClick={() => {\n                      this.setState({ twoBtn: \"buttoneTwo\" });\n                    }}\n                  >\n                    {__(\"Button 2\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].fontSize}\n                  min={0}\n                  max={70}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"fontSize\")\n                  }\n                />\n                <p>{__(\"Color\", \"unlimited-blocks\")}</p>\n                <ColorPalette\n                  value={sliderSetting[activeTwoBtnState].color}\n                  onChange={(color) =>\n                    this.updateGlobalSlide(color, activeTwoBtnState, \"color\")\n                  }\n                />\n                <p>{__(\"Background Color\", \"unlimited-blocks\")}</p>\n                {/* bg color  */}\n                <div class=\"ubl-switcher-button-section sub\">\n                  <span\n                    onClick={() => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"type\"] = \"color\";\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                    className={\n                      sliderSetting[activeTwoBtnState].backgroundColor.type ==\n                      \"color\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Solid\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"type\"] = \"gradient\";\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                    className={\n                      sliderSetting[activeTwoBtnState].backgroundColor.type ==\n                      \"gradient\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Gradient\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                {\"color\" ==\n                sliderSetting[activeTwoBtnState].backgroundColor.type ? (\n                  <ColorPicker\n                    color={\n                      sliderSetting[activeTwoBtnState].backgroundColor.color\n                    }\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"color\"] = color;\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                  />\n                ) : (\n                  <GradientPicker\n                    disableCustomGradients={false}\n                    value={\n                      sliderSetting[activeTwoBtnState].backgroundColor.gradient\n                    }\n                    gradients={UBLGraDientColors}\n                    onChange={(newGradient) => {\n                      let getBgcolor = {\n                        ...sliderSetting[activeTwoBtnState].backgroundColor,\n                      };\n                      getBgcolor[\"gradient\"] = newGradient;\n                      this.updateGlobalSlide(\n                        getBgcolor,\n                        activeTwoBtnState,\n                        \"backgroundColor\"\n                      );\n                    }}\n                  />\n                )}\n                {/* bg color  */}\n                <RangeControl\n                  label={__(\"Height\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].height}\n                  min={0}\n                  max={30}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"height\")\n                  }\n                />\n                <RangeControl\n                  label={__(\"Width\", \"unlimited-blocks\")}\n                  value={sliderSetting[activeTwoBtnState].width}\n                  min={0}\n                  max={30}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"width\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Border\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ToggleControl\n                  label={\n                    sliderSetting[activeTwoBtnState].border\n                      ? __(\"Disable\", \"unlimited-blocks\")\n                      : __(\"Enable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting[activeTwoBtnState].border}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, activeTwoBtnState, \"border\")\n                  }\n                />\n                {sliderSetting[activeTwoBtnState].border && (\n                  <div className=\"icon-border-setting\">\n                    <RangeControl\n                      label={__(\"Border Width\", \"unlimited-blocks\")}\n                      value={sliderSetting[activeTwoBtnState].borderWidth}\n                      min={0}\n                      max={100}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          activeTwoBtnState,\n                          \"borderWidth\"\n                        )\n                      }\n                    />\n                    <RangeControl\n                      label={__(\"Border Radius\", \"unlimited-blocks\")}\n                      value={sliderSetting[activeTwoBtnState].borderRadius}\n                      min={0}\n                      max={50}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          activeTwoBtnState,\n                          \"borderRadius\"\n                        )\n                      }\n                    />\n                    <p>{__(\"Border Color\", \"unlimited-blocks\")}</p>\n                    <ColorPalette\n                      value={sliderSetting[activeTwoBtnState].borderColor}\n                      onChange={(color) =>\n                        this.updateGlobalSlide(\n                          color,\n                          activeTwoBtnState,\n                          \"borderColor\"\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n            {/* --------------button style---------------- */}\n          </div>\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"ubl-block-slide-wrapper\">\n        <div className=\"ubl-slider-bullet\">\n          <ul className=\"ubl-slider-ul-bullet\">\n            {slides.map((val, index_) => {\n              return (\n                <li\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <span\n                    onClick={(e) => {\n                      this.setState({\n                        selectedSlide: index_,\n                        sideContentOpen: false,\n                      });\n                    }}\n                  ></span>\n                </li>\n              );\n            })}\n            {slides.length < 8 && (\n              <li className=\"add-item\">\n                <span\n                  onClick={() => {\n                    this.addSlide();\n                  }}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n              </li>\n            )}\n          </ul>\n        </div>\n        <div className=\"ubl-slider-container\">\n          {/* slider trigger */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"dots\") && (\n            <ul className=\"ubl-slider-bullet-trigger\">\n              {slides.map((val, index_) => {\n                let trigStyle = {\n                  height: sliderSetting.linearTrigger.fontSize + \"px\",\n                  width: sliderSetting.linearTrigger.fontSize + \"px\",\n                };\n                trigStyle =\n                  index_ != stateIndex\n                    ? {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor: sliderSetting.linearTrigger.color,\n                        },\n                      }\n                    : {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor:\n                            sliderSetting.linearTrigger.activeColor,\n                        },\n                      };\n                return (\n                  <li className={`${index_ == stateIndex ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyle}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"arrows\") && (\n            <>\n              <div className=\"ubl-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"ubl-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* next prev btn */}\n          {/* slider trigger */}\n          {slides.length > 1 && (\n            <span\n              className=\"ubl-remove-slide\"\n              onClick={(e) => {\n                this.removeSlide();\n              }}\n            >\n              <i className=\"fas fa-trash-alt\"></i>\n            </span>\n          )}\n          <ul className=\"ubl-slider-ul-slides\" style={SlideulStyle}>\n            {slides.map((val, index_) => {\n              let overLAyColor = {};\n              if (val.container.bgImage) {\n                overLAyColor[\"opacity\"] = val.container.overlayColor.opacity;\n              }\n              if (val.container.overlayColor.type == \"color\") {\n                overLAyColor[\"backgroundColor\"] =\n                  val.container.overlayColor.color;\n              } else if (val.container.overlayColor.type == \"gradient\") {\n                overLAyColor[\"backgroundImage\"] =\n                  val.container.overlayColor.gradient;\n              }\n              return (\n                <li\n                  onClick={(e) => {\n                    this.setState({ selectedSlide: index_ });\n                  }}\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <div className=\"ubl-slider-wrapper\">\n                    <div className=\"ubl-slider-container\">\n                      <div className=\"ubl-slider-content-wrapper\">\n                        {val.container.bgImage && (\n                          <div\n                            className=\"ubl-slider-image-container\"\n                            style={{\n                              backgroundSize: val.container.bgSize,\n                              backgroundImage:\n                                \"url(\" + val.container.bgImage + \")\",\n                            }}\n                          ></div>\n                        )}\n                        <div\n                          className=\"ubl-slider-overlay-color\"\n                          style={overLAyColor}\n                        ></div>\n                        <div className={`ubl-slider-text ${wrapperAlignment}`}>\n                          <div style={wrapperSpacing}>\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h1\"\n                              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n                              value={val.title.text}\n                              allowedFormats={[]}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"title\", \"text\")\n                              }\n                              style={TitleStyle}\n                            />\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h2\"\n                              placeholder={__(\"Service Title\", \"unlimited-blocks\")}\n                              allowedFormats={[]}\n                              value={val.text.text}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"text\", \"text\")\n                              }\n                              style={descriptionStyle}\n                            />\n                            <div className=\"button-container\">\n                              {val.buttoneOne.enable && (\n                                <>\n                                  <RichText\n                                    key=\"editable\"\n                                    tagName=\"span\"\n                                    allowedFormats={[]}\n                                    placeholder={__(\n                                      \"Button One\",\n                                      \"unlimited-blocks\"\n                                    )}\n                                    value={val.buttoneOne.text}\n                                    onChange={(e) =>\n                                      this.updateSlides(e, \"buttoneOne\", \"text\")\n                                    }\n                                    style={buttonOneStyle}\n                                  />\n                                </>\n                              )}\n                              {val.buttoneTwo.enable && (\n                                <RichText\n                                  key=\"editable\"\n                                  tagName=\"span\"\n                                  allowedFormats={[]}\n                                  placeholder={__(\"Button Two\", \"unlimited-blocks\")}\n                                  value={val.buttoneTwo.text}\n                                  onChange={(e) =>\n                                    this.updateSlides(e, \"buttoneTwo\", \"text\")\n                                  }\n                                  style={buttonTwoStyle}\n                                />\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>,\n    ];\n    // }\n    // undefined check\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nimport { __ } from \"@wordpress/i18n\";\nimport { RichText } from \"@wordpress/block-editor\";\nconst attrSave = {\n  sliderSetting: {\n    type: \"array\",\n    default: [\n      {\n        dimension: {\n          width: false,\n          custom_width: 580,\n          height: false,\n          custom_height: 360,\n        },\n        sliderEffect: \"fadeEffect\",\n        triggerActive: \"both\",\n        linearTrigger: {\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          activeColor: \"rgba(68,222,68,1)\",\n        },\n        leftRightTrigger: {\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          // backgroundColor: \"\",\n        },\n        autoTrigger: {\n          enable: true,\n          delay: 4,\n        },\n        wrapper: {\n          alignment: \"center\",\n          spacing: 2,\n          textAlign: \"center\",\n        },\n        title: {\n          fontSize: 17,\n          color: \"red\",\n        },\n        text: {\n          fontSize: 17,\n          color: \"red\",\n        },\n        buttoneOne: {\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: {\n            type: \"color\",\n            color: \"#ffbf00\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          },\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n        buttoneTwo: {\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: {\n            type: \"color\",\n            color: \"#ffbf00\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          },\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n      },\n    ],\n  },\n  slides: {\n    type: \"array\",\n    default: [\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(68 132 173)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        // wrapper: {\n        //   bgcolor: \"\",\n        //   border: \"\",\n        //   alignment: \"center\",\n        //   spacing: 2,\n        // },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(32 189 131)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        // wrapper: {\n        //   bgcolor: \"\",\n        //   border: \"\",\n        //   alignment: \"center\",\n        //   spacing: 2,\n        // },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: \"\",\n          overlayColor: {\n            type: \"color\",\n            color: \"rgb(189 90 32)\",\n            gradient:\n              \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n            opacity: 0.6,\n          },\n          bgSize: \"cover\",\n        },\n        wrapper: {\n          bgcolor: \"\",\n          border: \"\",\n          alignment: \"center\",\n          spacing: 2,\n        },\n        title: {\n          text: __(\"This Is Title text\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"unlimited-blocks\"),\n          // fontSize: 17,\n          // color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"unlimited-blocks\"),\n          link: \"#\",\n          target: false,\n          // fontSize: \"\",\n          // color: \"\",\n          // backgroundColor: {\n          //   type: \"color\",\n          //   color: \"#ffbf00\",\n          //   gradient:\n          //     \"radial-gradient(rgb(6, 147, 227) 38%, rgb(155, 81, 224) 80%)\",\n          // },\n          // height: \"\",\n          // width: \"\",\n          // border: false,\n          // borderColor: \"\",\n          // borderWidth: \"\",\n          // borderRadius: \"\",\n        },\n      },\n    ],\n  },\n};\nlet elementLiSlide = (val, index_, sliderSetting) => {\n  let buttonOneStyle = {};\n  if (sliderSetting.buttoneOne.fontSize)\n    buttonOneStyle.fontSize = sliderSetting.buttoneOne.fontSize;\n  if (sliderSetting.buttoneOne.color)\n    buttonOneStyle.color = sliderSetting.buttoneOne.color;\n\n  if (sliderSetting.buttoneOne.height) {\n    buttonOneStyle.paddingBottom = sliderSetting.buttoneOne.height;\n    buttonOneStyle.paddingTop = sliderSetting.buttoneOne.height;\n  }\n  if (sliderSetting.buttoneOne.width) {\n    buttonOneStyle.paddingLeft = sliderSetting.buttoneOne.width;\n    buttonOneStyle.paddingRight = sliderSetting.buttoneOne.width;\n  }\n\n  buttonOneStyle = sliderSetting.buttoneOne.border\n    ? {\n        ...{\n          borderColor: sliderSetting.buttoneOne.borderColor,\n          borderWidth: sliderSetting.buttoneOne.borderWidth,\n          borderRadius: sliderSetting.buttoneOne.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonOneStyle,\n      }\n    : buttonOneStyle;\n  // background color btn\n  if (sliderSetting.buttoneOne.backgroundColor.type == \"color\") {\n    buttonOneStyle[\"backgroundColor\"] =\n      sliderSetting.buttoneOne.backgroundColor.color;\n  } else if (sliderSetting.buttoneOne.backgroundColor.type == \"gradient\") {\n    buttonOneStyle[\"backgroundImage\"] =\n      sliderSetting.buttoneOne.backgroundColor.gradient;\n  }\n\n  let buttonTwoStyle = {};\n  if (sliderSetting.buttoneTwo.fontSize)\n    buttonTwoStyle.fontSize = sliderSetting.buttoneTwo.fontSize;\n  if (sliderSetting.buttoneTwo.color)\n    buttonTwoStyle.color = sliderSetting.buttoneTwo.color;\n  if (sliderSetting.buttoneTwo.height) {\n    buttonTwoStyle.paddingBottom = sliderSetting.buttoneTwo.height;\n    buttonTwoStyle.paddingTop = sliderSetting.buttoneTwo.height;\n  }\n  if (sliderSetting.buttoneTwo.width) {\n    buttonTwoStyle.paddingLeft = sliderSetting.buttoneTwo.width;\n    buttonTwoStyle.paddingRight = sliderSetting.buttoneTwo.width;\n  }\n\n  buttonTwoStyle = sliderSetting.buttoneTwo.border\n    ? {\n        ...{\n          borderColor: sliderSetting.buttoneTwo.borderColor,\n          borderWidth: sliderSetting.buttoneTwo.borderWidth,\n          borderRadius: sliderSetting.buttoneTwo.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonTwoStyle,\n      }\n    : buttonTwoStyle;\n  // background color btn\n  if (sliderSetting.buttoneTwo.backgroundColor.type == \"color\") {\n    buttonTwoStyle[\"backgroundColor\"] =\n      sliderSetting.buttoneTwo.backgroundColor.color;\n  } else if (sliderSetting.buttoneTwo.backgroundColor.type == \"gradient\") {\n    buttonTwoStyle[\"backgroundImage\"] =\n      sliderSetting.buttoneTwo.backgroundColor.gradient;\n  }\n  // overlay color\n  let overLAyColor = {};\n  if (val.container.bgImage) {\n    overLAyColor[\"opacity\"] = val.container.overlayColor.opacity;\n  }\n  if (val.container.overlayColor.type == \"color\") {\n    overLAyColor[\"backgroundColor\"] = val.container.overlayColor.color;\n  } else if (val.container.overlayColor.type == \"gradient\") {\n    overLAyColor[\"backgroundImage\"] = val.container.overlayColor.gradient;\n  }\n  // wrapper style\n  let wrapperAlignment = sliderSetting.wrapper.alignment;\n  let wrapperSpacing = {\n    marginTop: sliderSetting.wrapper.spacing + \"px\",\n    marginBottom: sliderSetting.wrapper.spacing + \"px\",\n    textAlign: sliderSetting.wrapper.textAlign,\n  };\n  // wrapper style\n  // title style\n  let TitleStyle = {\n    fontSize: sliderSetting.title.fontSize + \"px\",\n    color: sliderSetting.title.color,\n  };\n  // title style\n  // description style\n  let descriptionStyle = {\n    fontSize: sliderSetting.text.fontSize + \"px\",\n    color: sliderSetting.text.color,\n  };\n  // description style\n\n  return (\n    <li key={index_} className={`slides ${index_ == 0 ? \"selected_\" : \"\"}`}>\n      <div className=\"ubl-slider-wrapper\">\n        <div className=\"ubl-slider-container\">\n          <div className=\"ubl-slider-content-wrapper\">\n            {val.container.bgImage && (\n              <div\n                className=\"ubl-slider-image-container\"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(\" + val.container.bgImage + \")\",\n                }}\n              ></div>\n            )}\n            <div\n              className=\"ubl-slider-overlay-color\"\n              style={overLAyColor}\n            ></div>\n            <div className={`ubl-slider-text ${wrapperAlignment}`}>\n              <div style={wrapperSpacing}>\n                <RichText.Content\n                  tagName=\"h1\"\n                  value={__(val.title.text, \"unlimited-blocks\")}\n                  style={TitleStyle}\n                />\n                <RichText.Content\n                  tagName=\"h2\"\n                  value={__(val.text.text, \"unlimited-blocks\")}\n                  style={descriptionStyle}\n                />\n                <div className=\"button-container\">\n                  {val.buttoneOne.enable && (\n                    <>\n                      <a\n                        target={val.buttoneOne.target ? \"_blank\" : null}\n                        rel={\n                          val.buttoneOne.target ? \"noopener noreferrer\" : null\n                        }\n                        href={val.buttoneOne.link}\n                        style={buttonOneStyle}\n                      >\n                        <RichText.Content\n                          tagName=\"span\"\n                          value={val.buttoneOne.text}\n                        />\n                      </a>\n                    </>\n                  )}\n                  {val.buttoneTwo.enable && (\n                    <a\n                      target={val.buttoneTwo.target ? \"_blank\" : null}\n                      rel={val.buttoneTwo.target ? \"noopener noreferrer\" : null}\n                      href={val.buttoneTwo.link}\n                      style={buttonTwoStyle}\n                    >\n                      <RichText.Content\n                        tagName=\"span\"\n                        value={val.buttoneTwo.text}\n                      />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n};\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { ubl_block_slider } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/slide\", {\n  title: ubl_block_slider.title,\n  description: ubl_block_slider.description,\n  icon: ubl_block_slider.icon,\n  keywords: ubl_block_slider.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let { sliderSetting } = attributes;\n    let sliderWidth = sliderSetting[0].dimension;\n    let attr_ = { \"data-align\": \"full\" };\n    if (sliderWidth.width && sliderWidth.custom_width) {\n      attr_ = {\n        ...attr_,\n        ...{\n          style: { maxWidth: sliderWidth.custom_width + \"px\" },\n        },\n      };\n    }\n    return attr_;\n  },\n  attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: (props) => {\n    // console.log(\"props\", props);\n    let { slides, sliderSetting } = props.attributes;\n    sliderSetting = sliderSetting[0];\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      // backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let trigStyle = `height: ${sliderSetting.linearTrigger.fontSize}px;width:${sliderSetting.linearTrigger.fontSize}px;background-color: ${sliderSetting.linearTrigger.color};`;\n    let trigStyleObj = {\n      height: sliderSetting.linearTrigger.fontSize + \"px\",\n      width: sliderSetting.linearTrigger.fontSize + \"px\",\n      backgroundColor: sliderSetting.linearTrigger.color,\n    };\n\n    let sliderSettingJson = {};\n    if (sliderSetting.dimension.width)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ width: sliderSetting.dimension.custom_width },\n      };\n    if (sliderSetting.dimension.height)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ height: sliderSetting.dimension.custom_height },\n      };\n    sliderSettingJson = JSON.stringify(sliderSettingJson);\n    return (\n      <div className=\"ubl-block-slide-wrapper\">\n        <div\n          className=\"ubl-slider-container\"\n          sliderDelay={\n            sliderSetting.autoTrigger.delay > 0 &&\n            sliderSetting.autoTrigger.enable\n              ? sliderSetting.autoTrigger.delay\n              : 0\n          }\n        >\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"dots\") && (\n            <ul\n              className=\"ubl-slider-bullet-trigger\"\n              active-color={sliderSetting.linearTrigger.activeColor}\n              childStyle={trigStyle}\n            >\n              {slides.map((val, index_) => {\n                return (\n                  <li className={`${index_ == 0 ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyleObj}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {(sliderSetting.triggerActive == \"both\" ||\n            sliderSetting.triggerActive == \"arrows\") && (\n            <>\n              <div className=\"ubl-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"ubl-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* slider main slides */}\n          <ul\n            className={`ubl-slider-ul-slides ${sliderSetting.sliderEffect}`}\n            sliderSetting={sliderSettingJson}\n          >\n            {slides.map((val, index_) => {\n              return elementLiSlide(val, index_, sliderSetting);\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n});\n","import {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n  SelectControl,\n  __experimentalGradientPicker as GradientPicker,\n} from \"@wordpress/components\";\nimport { Component } from \"@wordpress/element\";\nimport {\n  showCateFn,\n  showTagsFn,\n  excerptWords,\n  filterPostInit,\n  firstTimeInit,\n  categoryList,\n  PostNotfound,\n  PostLoader,\n  UBLGraDientColors,\n} from \"../block-assets/post-functions\";\nimport { __ } from \"@wordpress/i18n\";\n// let bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slideIndex: 0,\n      trigger: \"linear\",\n      posts: [],\n      category: [],\n      totalPost: null,\n    };\n  }\n  // rest api call\n  componentDidMount() {\n    let sendData = { featured_image: 1 };\n    firstTimeInit(this, sendData);\n  }\n  updateObj = (parent_key, child_key, initialValue, value_) => {\n    let newNewValue = [...initialValue];\n    newNewValue[0][child_key] = value_;\n    let setAttr_ = {};\n    setAttr_[parent_key] = newNewValue;\n    this.props.setAttributes(setAttr_);\n  };\n  updateGlobalSlide = (value, for_, type) => {\n    let sliderSetting = this.props.attributes.sliderSetting;\n    let newSetting = [...sliderSetting];\n    if (type) {\n      newSetting[0][for_][type] = value;\n    } else {\n      newSetting[0][for_] = value;\n    }\n    this.props.setAttributes({ sliderSetting: newSetting });\n  };\n  render() {\n    const { attributes, setAttributes } = this.props;\n    const { posts, category, totalPost, slideIndex } = this.state;\n    let {\n      heading,\n      author,\n      numberOfPosts,\n      date,\n      showTag,\n      showCate,\n      excerpt,\n      postCategories,\n      meta_style,\n      title,\n      sliderSetting,\n    } = attributes;\n    let heading_ = heading[0];\n    let excerpt_ = excerpt[0];\n    let date_ = date[0];\n    let author_ = author[0];\n    let meta_style_ = meta_style[0];\n    let title_ = title[0];\n    let showTag_ = showTag[0];\n    let showCate_ = showCate[0];\n    // category init\n    let cateGory = [];\n    if (!category) {\n      cateGory = false;\n    } else {\n      cateGory = categoryList(category);\n    }\n    sliderSetting = sliderSetting[0];\n    let SlideulStyle = null;\n    if (sliderSetting.dimension.height) {\n      SlideulStyle = { minHeight: sliderSetting.dimension.custom_height };\n    }\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let triggerActive = this.state.trigger;\n    let trigStyle = {\n      height: sliderSetting.linearTrigger.fontSize + \"px\",\n      width: sliderSetting.linearTrigger.fontSize + \"px\",\n    };\n    // slider overlay color\n    let sliderOverLayColor = {\n      opacity: sliderSetting.overlayColor.opacity / 10,\n    };\n    if (sliderSetting.overlayColor.type == \"color\") {\n      sliderOverLayColor[\"backgroundColor\"] = sliderSetting.overlayColor.color;\n    } else if (sliderSetting.overlayColor.type == \"gradient\") {\n      sliderOverLayColor[\"backgroundImage\"] =\n        sliderSetting.overlayColor.gradient;\n    }\n    return (\n      <>\n        <InspectorControls>\n          <PanelBody\n            title={__(\"Block Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                title_.enable\n                  ? __(\"Hide\", \"unlimited-blocks\")\n                  : __(\"Show\", \"unlimited-blocks\")\n              }\n              checked={title_.enable}\n              onChange={(e) => this.updateObj(\"title\", \"enable\", title, e)}\n            />\n            {title_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Title Alignment\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div className=\"ubl-alignment\">\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"left\");\n                      }}\n                      className={`dashicons dashicons-editor-alignleft ${\n                        title_.align == \"left\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"center\");\n                      }}\n                      className={`dashicons dashicons-editor-aligncenter ${\n                        title_.align == \"center\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                  <div>\n                    <span\n                      onClick={() => {\n                        this.updateObj(\"title\", \"align\", title, \"flex-end\");\n                      }}\n                      className={`dashicons dashicons-editor-alignright ${\n                        title_.align == \"flex-end\" && \"active\"\n                      }`}\n                    ></span>\n                  </div>\n                </div>\n\n                <RangeControl\n                  label={__(\"Font Size\", \"unlimited-blocks\")}\n                  value={title_.fontSize}\n                  min={5}\n                  max={50}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"fontSize\", title, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={title_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"title\", \"color\", title, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={title_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\"title\", \"backgroundColor\", title, color);\n                  }}\n                />\n                {/* font weight */}\n                <div className=\"flex-section\">\n                  <p>{__(\"Font Weight\", \"unlimited-blocks\")}</p>\n                  <select\n                    value={title_.fontWeight}\n                    onChange={(e) => {\n                      this.updateObj(\n                        \"title\",\n                        \"fontWeight\",\n                        title,\n                        e.target.value\n                      );\n                    }}\n                  >\n                    <option value=\"400\">400</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                  </select>\n                </div>\n                {/* font weight */}\n                <p>\n                  <strong>{__(\"Max Width %\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={title_.width}\n                  min={1}\n                  max={100}\n                  onChange={(e) => {\n                    this.updateObj(\"title\", \"width\", title, e);\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Slider Setting\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>\n                {__(\"Number Of Post Display\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={numberOfPosts}\n              min={2}\n              max={20}\n              onChange={(e) => {\n                setAttributes({ numberOfPosts: e });\n                // console.log(\"ee\", e);\n                filterPostInit(this, { numberOfPosts: e, featured_image: 1 });\n              }}\n            />\n            <p>\n              <strong>{__(\"Image Overlay Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            {/* <ColorPicker\n              color={sliderSetting.overlayColor}\n              onChangeComplete={(colorBg) => {\n                let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                this.updateGlobalSlide(color, \"overlayColor\");\n              }}\n            /> */}\n            {/* bg color  */}\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"type\"] = \"color\";\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n                className={\n                  sliderSetting.overlayColor.type == \"color\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Solid\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"type\"] = \"gradient\";\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n                className={\n                  sliderSetting.overlayColor.type == \"gradient\"\n                    ? \"selected\"\n                    : \"\"\n                }\n              >\n                {__(\"Gradient\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {\"color\" == sliderSetting.overlayColor.type ? (\n              <ColorPicker\n                color={sliderSetting.overlayColor.color}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"color\"] = color;\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n              />\n            ) : (\n              <GradientPicker\n                disableCustomGradients={false}\n                value={sliderSetting.overlayColor.gradient}\n                gradients={UBLGraDientColors}\n                onChange={(newGradient) => {\n                  let getBgcolor = { ...sliderSetting.overlayColor };\n                  getBgcolor[\"gradient\"] = newGradient;\n                  this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n                }}\n              />\n            )}\n            <RangeControl\n              label={__(\"Opacity\", \"unlimited-blocks\")}\n              value={sliderSetting.overlayColor.opacity}\n              min={0}\n              max={10}\n              step={1}\n              onChange={(e) => {\n                let getBgcolor = { ...sliderSetting.overlayColor };\n                getBgcolor[\"opacity\"] = e;\n                this.updateGlobalSlide(getBgcolor, \"overlayColor\");\n              }}\n            />\n            {/* bg color  */}\n            <p>\n              <strong>{__(\"Content Alignment\", \"unlimited-blocks\")}</strong>\n            </p>\n            <div className=\"ubl-alignment\">\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"left\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignleft ${\n                    sliderSetting.contentAlign == \"left\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"center\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-aligncenter ${\n                    sliderSetting.contentAlign == \"center\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n              <div>\n                <span\n                  onClick={() => {\n                    this.updateGlobalSlide(\"right\", \"contentAlign\");\n                  }}\n                  className={`dashicons dashicons-editor-alignright ${\n                    sliderSetting.contentAlign == \"right\" && \"active\"\n                  }`}\n                ></span>\n              </div>\n            </div>\n            <p>\n              <strong>\n                {__(\"Slider Dimension \", \"unlimited-blocks\")}\n                <small className=\"dull_grey\">\n                  ({__(\"custom Height\", \"unlimited-blocks\")}/\n                  {__(\"Width\", \"unlimited-blocks\")})\n                </small>\n              </strong>\n            </p>\n            <ToggleControl\n              label={\n                sliderSetting.dimension.width\n                  ? __(\"Custom Width\", \"unlimited-blocks\")\n                  : __(\"Auto Width\", \"unlimited-blocks\")\n              }\n              checked={sliderSetting.dimension.width}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"dimension\", \"width\");\n              }}\n            />\n            {sliderSetting.dimension.width && (\n              <RangeControl\n                value={sliderSetting.dimension.custom_width}\n                min={200}\n                max={1400}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"dimension\", \"custom_width\")\n                }\n              />\n            )}\n            <ToggleControl\n              label={\n                sliderSetting.dimension.height\n                  ? __(\"Custom Height\", \"unlimited-blocks\")\n                  : __(\"Auto Height\", \"unlimited-blocks\")\n              }\n              checked={sliderSetting.dimension.height}\n              onChange={(e) => {\n                this.updateGlobalSlide(e, \"dimension\", \"height\");\n              }}\n            />\n            {sliderSetting.dimension.height && (\n              <RangeControl\n                value={sliderSetting.dimension.custom_height}\n                min={360}\n                max={1000}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"dimension\", \"custom_height\")\n                }\n              />\n            )}\n            <p className=\"block-inside\">\n              {__(\"Slider Effect\", \"unlimited-blocks\")}\n            </p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() =>\n                  this.updateGlobalSlide(\"slideEffect\", \"sliderEffect\")\n                }\n                className={\n                  sliderSetting.sliderEffect == \"slideEffect\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Slide\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() =>\n                  this.updateGlobalSlide(\"fadeEffect\", \"sliderEffect\")\n                }\n                className={\n                  sliderSetting.sliderEffect == \"fadeEffect\" ? \"selected\" : \"\"\n                }\n              >\n                {__(\"Fade\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            <p className=\"block-inside\">{__(\"Trigger\", \"unlimited-blocks\")}</p>\n            <div class=\"ubl-switcher-button-section\">\n              <span\n                onClick={() => this.setState({ trigger: \"linear\" })}\n                className={triggerActive == \"linear\" ? \"selected\" : \"\"}\n              >\n                {__(\"Linear\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ trigger: \"left\" })}\n                className={triggerActive == \"left\" ? \"selected\" : \"\"}\n              >\n                {__(\"Left Right\", \"unlimited-blocks\")}\n              </span>\n              <span\n                onClick={() => this.setState({ trigger: \"auto\" })}\n                className={triggerActive == \"auto\" ? \"selected\" : \"\"}\n              >\n                {__(\"Auto\", \"unlimited-blocks\")}\n              </span>\n            </div>\n            {triggerActive == \"linear\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.linearTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.linearTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"linearTrigger\", \"enable\")\n                  }\n                />\n                <p>\n                  <strong>{__(\"Position\", \"unlimited-blocks\")}</strong>\n                </p>\n                <div class=\"ubl-switcher-button-section\">\n                  <span\n                    onClick={() => {\n                      this.updateGlobalSlide(\"in\", \"linearTrigger\", \"place\");\n                    }}\n                    className={\n                      sliderSetting.linearTrigger.place == \"in\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"In\", \"unlimited-blocks\")}\n                  </span>\n                  <span\n                    onClick={() => {\n                      this.updateGlobalSlide(\"out\", \"linearTrigger\", \"place\");\n                    }}\n                    className={\n                      sliderSetting.linearTrigger.place == \"out\"\n                        ? \"selected\"\n                        : \"\"\n                    }\n                  >\n                    {__(\"Out\", \"unlimited-blocks\")}\n                  </span>\n                </div>\n                <p>\n                  <strong>{__(\"Trigger Type\", \"unlimited-blocks\")}</strong>\n                </p>\n                {sliderSetting.linearTrigger.enable && (\n                  <>\n                    {/* dk */}\n                    <div class=\"ubl-switcher-button-section\">\n                      <span\n                        onClick={() => {\n                          this.updateGlobalSlide(\n                            \"bullet\",\n                            \"linearTrigger\",\n                            \"trigger\"\n                          );\n                        }}\n                        className={\n                          sliderSetting.linearTrigger.trigger == \"bullet\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Bullets\", \"unlimited-blocks\")}\n                      </span>\n                      <span\n                        onClick={() => {\n                          this.updateGlobalSlide(\n                            \"thumbnail\",\n                            \"linearTrigger\",\n                            \"trigger\"\n                          );\n                        }}\n                        className={\n                          sliderSetting.linearTrigger.trigger == \"thumbnail\"\n                            ? \"selected\"\n                            : \"\"\n                        }\n                      >\n                        {__(\"Thumbnail\", \"unlimited-blocks\")}\n                      </span>\n                    </div>\n                    {/* dk */}\n                    {sliderSetting.linearTrigger.trigger == \"bullet\" ? (\n                      <>\n                        <RangeControl\n                          label=\"Size\"\n                          value={sliderSetting.linearTrigger.fontSize}\n                          min={0}\n                          max={70}\n                          onChange={(e) =>\n                            this.updateGlobalSlide(\n                              e,\n                              \"linearTrigger\",\n                              \"fontSize\"\n                            )\n                          }\n                        />\n                        <p>\n                          <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                        </p>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.color}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"color\"\n                            );\n                          }}\n                        />\n                        <p>\n                          <strong>\n                            {__(\"Active Color\", \"unlimited-blocks\")}\n                          </strong>\n                        </p>\n                        <ColorPicker\n                          color={sliderSetting.linearTrigger.activeColor}\n                          onChangeComplete={(colorBg) => {\n                            let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                            this.updateGlobalSlide(\n                              color,\n                              \"linearTrigger\",\n                              \"activeColor\"\n                            );\n                          }}\n                        />\n                      </>\n                    ) : (\n                      <h1>{__(\"thumbnail design\", \"unlimited-blocks\")}</h1>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n            {triggerActive == \"left\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.leftRightTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.leftRightTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"leftRightTrigger\", \"enable\")\n                  }\n                />\n                {sliderSetting.leftRightTrigger.enable && (\n                  <>\n                    <RangeControl\n                      label={__(\"Font Size\", \"unlimited-blocks\")}\n                      value={sliderSetting.leftRightTrigger.fontSize}\n                      min={0}\n                      max={70}\n                      onChange={(e) =>\n                        this.updateGlobalSlide(\n                          e,\n                          \"leftRightTrigger\",\n                          \"fontSize\"\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={sliderSetting.leftRightTrigger.color}\n                      onChange={(color) =>\n                        this.updateGlobalSlide(\n                          color,\n                          \"leftRightTrigger\",\n                          \"color\"\n                        )\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={sliderSetting.leftRightTrigger.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateGlobalSlide(\n                          color,\n                          \"leftRightTrigger\",\n                          \"backgroundColor\"\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {triggerActive == \"auto\" && (\n              <>\n                <ToggleControl\n                  label={\n                    sliderSetting.autoTrigger.enable\n                      ? __(\"Enable\", \"unlimited-blocks\")\n                      : __(\"Disable\", \"unlimited-blocks\")\n                  }\n                  checked={sliderSetting.autoTrigger.enable}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"autoTrigger\", \"enable\")\n                  }\n                />\n                {sliderSetting.autoTrigger.enable && (\n                  <RangeControl\n                    label={__(\"Slide Delay\", \"unlimited-blocks\")}\n                    value={sliderSetting.autoTrigger.delay}\n                    min={0}\n                    max={12}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"autoTrigger\", \"delay\")\n                    }\n                  />\n                )}\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Title\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Post Title Tag\", \"unlimited-blocks\")}</strong>\n            </p>\n            <select\n              value={heading_.tag}\n              className=\"ubl-block-select\"\n              onChange={(e) => {\n                let value_ = e.target.value;\n                let font_ =\n                  value_ == \"h1\"\n                    ? 30\n                    : value_ == \"h2\"\n                    ? 25\n                    : value_ == \"h3\"\n                    ? 20\n                    : 17;\n                let newHeading = [...heading];\n                newHeading[0][\"tag\"] = value_;\n                newHeading[0][\"fontSize\"] = font_;\n                setAttributes({ heading: newHeading });\n              }}\n            >\n              <option value=\"h1\">{__(\"H1\", \"unlimited-blocks\")}</option>\n              <option value=\"h2\">{__(\"H2\", \"unlimited-blocks\")}</option>\n              <option value=\"h3\">{__(\"H3\", \"unlimited-blocks\")}</option>\n              <option value=\"p\">{__(\"P\", \"unlimited-blocks\")}</option>\n            </select>\n            <p>\n              <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n            </p>\n            <RangeControl\n              value={heading_.fontSize}\n              min={1}\n              max={50}\n              onChange={(e) =>\n                this.updateObj(\"heading\", \"fontSize\", heading, e)\n              }\n            />\n            <p>\n              <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={heading_.color}\n              onChange={(color) =>\n                this.updateObj(\"heading\", \"color\", heading, color)\n              }\n            />\n          </PanelBody>\n          <PanelBody\n            title={__(\"Excerpt\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <ToggleControl\n              label={\n                excerpt_.enable\n                  ? __(\"Show\", \"unlimited-blocks\")\n                  : __(\"Hide\", \"unlimited-blocks\")\n              }\n              checked={excerpt_.enable}\n              onChange={(e) => this.updateObj(\"excerpt\", \"enable\", excerpt, e)}\n            />\n            {excerpt_.enable && (\n              <>\n                <p>\n                  <strong>{__(\"Number of words\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.words}\n                  min={1}\n                  max={200}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"words\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={excerpt_.fontSize}\n                  min={1}\n                  max={25}\n                  onChange={(e) =>\n                    this.updateObj(\"excerpt\", \"fontSize\", excerpt, e)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={excerpt_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"excerpt\", \"color\", excerpt, color)\n                  }\n                />\n              </>\n            )}\n          </PanelBody>\n          <PanelBody\n            title={__(\"Post Meta\", \"unlimited-blocks\")}\n            initialOpen={false}\n          >\n            <p>\n              <strong>{__(\"Choose Category\", \"unlimited-blocks\")}</strong>\n            </p>\n            {cateGory && cateGory.length > 0 ? (\n              <div className=\"ubl-multiple-select\">\n                <SelectControl\n                  multiple\n                  value={postCategories.length ? postCategories : [\"all\"]}\n                  onChange={(choosen) => {\n                    let chooseAll = choosen.filter((choose) => {\n                      if (choose == \"all\") return true;\n                    });\n                    if (chooseAll.length) choosen = [];\n                    setAttributes({ postCategories: choosen });\n                    filterPostInit(this, {\n                      postCategories: choosen,\n                      featured_image: 1,\n                    });\n                  }}\n                  options={cateGory}\n                />\n              </div>\n            ) : (\n              <p className=\"category-blank\">\n                {__(\"No Categories Found\", \"unlimited-blocks\")}\n              </p>\n            )}\n\n            {/* show author */}\n            <ToggleControl\n              label={__(\"Author\", \"unlimited-blocks\")}\n              checked={author_.enable}\n              onChange={(e) => this.updateObj(\"author\", \"enable\", author, e)}\n            />\n            {/* show date */}\n            <ToggleControl\n              label={__(\"Date\", \"unlimited-blocks\")}\n              checked={date_.enable}\n              onChange={(e) => this.updateObj(\"date\", \"enable\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Categories\", \"unlimited-blocks\")}\n              checked={showCate_.enable}\n              onChange={(e) =>\n                this.updateObj(\"showCate\", \"enable\", showCate, e)\n              }\n            />\n            {/* show last date */}\n            <ToggleControl\n              label={__(\"Last Modified Date\", \"unlimited-blocks\")}\n              checked={date_.last_modified}\n              onChange={(e) => this.updateObj(\"date\", \"last_modified\", date, e)}\n            />\n            <ToggleControl\n              label={__(\"Tag\", \"unlimited-blocks\")}\n              checked={showTag_.enable}\n              onChange={(e) => this.updateObj(\"showTag\", \"enable\", showTag, e)}\n            />\n            <p class=\"block-inside\">\n              {__(\"Meta Custom Style\", \"unlimited-blocks\")}\n            </p>\n            <p>\n              <strong>\n                {__(\"Author/Dates Font Size\", \"unlimited-blocks\")}\n              </strong>\n            </p>\n            <RangeControl\n              value={meta_style_.fontSize}\n              min={1}\n              max={25}\n              onChange={(e) => {\n                this.updateObj(\"meta_style\", \"fontSize\", meta_style, e);\n              }}\n            />\n            <p>\n              <strong>{__(\"Author/Dates Color\", \"unlimited-blocks\")}</strong>\n            </p>\n            <ColorPalette\n              value={\"color\" in meta_style_ ? meta_style_.color : \"\"}\n              onChange={(color) =>\n                this.updateObj(\"meta_style\", \"color\", meta_style, color)\n              }\n            />\n            {showCate_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Category Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Category Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showCate_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"count\", showCate, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showCate_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showCate\", \"fontSize\", showCate, e);\n                  }}\n                />\n                <ToggleControl\n                  label={\n                    showCate_.customColor\n                      ? __(\"Custom Style\", \"unlimited-blocks\")\n                      : __(\"Default Style\", \"unlimited-blocks\")\n                  }\n                  checked={showCate_.customColor}\n                  onChange={(e) =>\n                    this.updateObj(\"showCate\", \"customColor\", showCate, e)\n                  }\n                />\n                {showCate_.customColor && (\n                  <>\n                    <p>\n                      <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                    </p>\n                    <ColorPalette\n                      value={showCate_.color}\n                      onChange={(color) =>\n                        this.updateObj(\"showCate\", \"color\", showCate, color)\n                      }\n                    />\n                    <p>\n                      <strong>\n                        {__(\"Background Color\", \"unlimited-blocks\")}\n                      </strong>\n                    </p>\n                    <ColorPicker\n                      color={showCate_.backgroundColor}\n                      onChangeComplete={(colorBg) => {\n                        let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                        this.updateObj(\n                          \"showCate\",\n                          \"backgroundColor\",\n                          showCate,\n                          color\n                        );\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n            {showTag_.enable && (\n              <>\n                <p class=\"block-inside\">\n                  {__(\"Tags Custom Style\", \"unlimited-blocks\")}\n                </p>\n                <p>\n                  <strong>\n                    {__(\"Number Tags Per Post\", \"unlimited-blocks\")}\n                  </strong>\n                </p>\n                <RangeControl\n                  value={showTag_.count}\n                  min={1}\n                  max={10}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"count\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Font Size\", \"unlimited-blocks\")}</strong>\n                </p>\n                <RangeControl\n                  value={showTag_.fontSize}\n                  min={1}\n                  max={30}\n                  onChange={(e) => {\n                    this.updateObj(\"showTag\", \"fontSize\", showTag, e);\n                  }}\n                />\n                <p>\n                  <strong>{__(\"Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPalette\n                  value={showTag_.color}\n                  onChange={(color) =>\n                    this.updateObj(\"showTag\", \"color\", showTag, color)\n                  }\n                />\n                <p>\n                  <strong>{__(\"Background Color\", \"unlimited-blocks\")}</strong>\n                </p>\n                <ColorPicker\n                  color={showTag_.backgroundColor}\n                  onChangeComplete={(colorBg) => {\n                    let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                    this.updateObj(\n                      \"showTag\",\n                      \"backgroundColor\",\n                      showTag,\n                      color\n                    );\n                  }}\n                />\n              </>\n            )}\n          </PanelBody>\n        </InspectorControls>\n        {posts && posts.length > 0 ? (\n          <>\n            <div className=\"ubl-block-slide-wrapper\">\n              {title_.enable && (\n                <div\n                  className=\"ubl-block-post-title\"\n                  style={{\n                    justifyContent: title_.align,\n                    borderColor: title_.backgroundColor,\n                  }}\n                >\n                  <RichText\n                    allowedFormats={[]}\n                    key=\"editable\"\n                    tagName=\"h4\"\n                    placeholder={__(\"My block title\", \"unlimited-blocks\")}\n                    value={title_.value}\n                    style={{\n                      fontSize: title_.fontSize + \"px\",\n                      color: title_.color,\n                      backgroundColor: title_.backgroundColor,\n                      fontWeight: title_.fontWeight,\n                      width: title_.width + \"%\",\n                    }}\n                    onChange={(e) => this.updateObj(\"title\", \"value\", title, e)}\n                  />\n                </div>\n              )}\n              <div className=\"ubl-slider-bullet\">\n                <ul className=\"ubl-slider-ul-bullet\">\n                  {posts.map((val, index_) => {\n                    return (\n                      <li\n                        key={index_}\n                        className={slideIndex == index_ ? \"selected_\" : null}\n                      >\n                        <span\n                          onClick={(e) => {\n                            this.setState({ slideIndex: index_ });\n                          }}\n                        ></span>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n              <div className=\"ubl-slider-container\">\n                {/* next prev btn */}\n                {sliderSetting.leftRightTrigger.enable && (\n                  <>\n                    <div className=\"ubl-slider-bullet-next-prev next\">\n                      <span style={leftRightStyle}>\n                        <i class=\"fas fa-arrow-right\"></i>\n                      </span>\n                    </div>\n                    <div className=\"ubl-slider-bullet-next-prev prev\">\n                      <span style={leftRightStyle}>\n                        <i class=\"fas fa-arrow-left\"></i>\n                      </span>\n                    </div>\n                  </>\n                )}\n                {/* next prev btn */}\n                <ul className=\"ubl-slider-ul-slides\" style={SlideulStyle}>\n                  {posts.map((post, slideIndexCu) => {\n                    let postAuthor =\n                      author_ && author_.enable ? post.author : false;\n                    return (\n                      <li className={slideIndex == slideIndexCu && \"selected_\"}>\n                        <div class=\"ubl-slider-wrapper\">\n                          <div class=\"ubl-slider-container\">\n                            <div class=\"ubl-slider-content-wrapper\">\n                              <div\n                                class=\"ubl-slider-image-container\"\n                                style={{\n                                  backgroundImage:\n                                    \"url(\" + post.feature_image + \")\",\n                                }}\n                              ></div>\n                              <div\n                                class=\"ubl-slider-text\"\n                                style={sliderOverLayColor}\n                              >\n                                <div className=\"slider-post-content\">\n                                  <div\n                                    className={`post-wrapper content-align-${sliderSetting.contentAlign}`}\n                                  >\n                                    <div className=\"post-content\">\n                                      <RichText.Content\n                                        className=\"post-heading\"\n                                        tagName={heading_.tag}\n                                        value={post.postTitle}\n                                        style={{\n                                          fontSize: heading_.fontSize,\n                                          color: heading_.color,\n                                        }}\n                                      />\n                                      {showCate_.enable && (\n                                        <p className=\"post-category\">\n                                          {showCateFn(\n                                            this.props,\n                                            post.post_categories,\n                                            showCate_\n                                          )}\n                                        </p>\n                                      )}\n                                      <div className=\"post-meta-all\">\n                                        {postAuthor && (\n                                          <p\n                                            style={{\n                                              color: meta_style_.color,\n                                              fontSize:\n                                                meta_style_.fontSize + \"px\",\n                                            }}\n                                            className=\"post-author\"\n                                          >\n                                            {postAuthor}\n                                          </p>\n                                        )}\n                                        {date_.enable && (\n                                          <>\n                                            {postAuthor && (\n                                              <span\n                                                style={{\n                                                  color: meta_style_.color,\n                                                  fontSize:\n                                                    meta_style_.fontSize + \"px\",\n                                                }}\n                                                className=\"slash\"\n                                              >\n                                                /\n                                              </span>\n                                            )}\n                                            <p\n                                              style={{\n                                                color: meta_style_.color,\n                                                fontSize:\n                                                  meta_style_.fontSize + \"px\",\n                                              }}\n                                              className=\"post-date\"\n                                            >\n                                              <span>{post.post_date}</span>\n                                            </p>\n                                          </>\n                                        )}\n                                        {date_.last_modified && (\n                                          <>\n                                            {(postAuthor || date_.enable) && (\n                                              <span\n                                                style={{\n                                                  color: meta_style_.color,\n                                                  fontSize:\n                                                    meta_style_.fontSize + \"px\",\n                                                }}\n                                                className=\"slash\"\n                                              >\n                                                /\n                                              </span>\n                                            )}\n                                            <p\n                                              style={{\n                                                color: meta_style_.color,\n                                                fontSize:\n                                                  meta_style_.fontSize + \"px\",\n                                              }}\n                                              className=\"post-date-last-modified\"\n                                            >\n                                              <span>Modified: </span>\n                                              <span>\n                                                {post.post_modified_date}\n                                              </span>\n                                            </p>\n                                          </>\n                                        )}\n                                      </div>\n                                      {excerpt_.enable && (\n                                        <p\n                                          style={{\n                                            color: excerpt_.color,\n                                            fontSize: excerpt_.fontSize + \"px\",\n                                          }}\n                                          className=\"post-excerpt\"\n                                        >\n                                          {excerptWords(\n                                            excerpt_.words,\n                                            post.post_excerpt\n                                          )}\n                                        </p>\n                                      )}\n                                      {showTag_.enable && (\n                                        <p\n                                          style={{ color: meta_style_.color }}\n                                          className=\"post-tags\"\n                                        >\n                                          {showTagsFn(post.post_tag, showTag_)}\n                                        </p>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n                {/* slider trigger */}\n                {sliderSetting.linearTrigger.enable && (\n                  <ul\n                    className={`ubl-slider-bullet-trigger thumbnail-image trigger_${sliderSetting.linearTrigger.place}`}\n                  >\n                    {posts.map((post, index_) => {\n                      trigStyle =\n                        index_ != slideIndex\n                          ? {\n                              ...trigStyle,\n                              ...{\n                                backgroundColor:\n                                  sliderSetting.linearTrigger.color,\n                              },\n                            }\n                          : {\n                              ...trigStyle,\n                              ...{\n                                backgroundColor:\n                                  sliderSetting.linearTrigger.activeColor,\n                              },\n                            };\n                      return sliderSetting.linearTrigger.trigger ==\n                        \"thumbnail\" ? (\n                        <li>\n                          <div>\n                            <img src={post.getMedia_.guid.rendered} />\n                          </div>\n                        </li>\n                      ) : (\n                        <li\n                          className={`${\n                            index_ == slideIndex ? \"selected_\" : \"\"\n                          }`}\n                        >\n                          <span style={trigStyle}></span>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                )}\n              </div>\n            </div>\n          </>\n        ) : (\n          <div>{!posts ? <PostNotfound /> : <PostLoader />}</div>\n        )}\n      </>\n    );\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nimport { blocksDetail } from \"../block-assets/blocks-detail\";\nconst { ubl_post_slider } = blocksDetail;\nregisterBlockType(\"unlimited-blocks/ubl-post-slider\", {\n  title: ubl_post_slider.title,\n  description: ubl_post_slider.description,\n  icon: ubl_post_slider.icon,\n  keywords: ubl_post_slider.keywords,\n  category: \"unlimited-blocks-category\",\n  getEditWrapperProps(attributes) {\n    let { sliderSetting } = attributes;\n    let sliderWidth = sliderSetting[0].dimension;\n    let attr_ = { \"data-align\": \"full\" };\n    if (sliderWidth.width && sliderWidth.custom_width) {\n      attr_ = {\n        ...attr_,\n        ...{\n          style: { maxWidth: sliderWidth.custom_width + \"px\" },\n        },\n      };\n    }\n    return attr_;\n  },\n  example: () => {},\n  edit: Edit,\n  save: () => {\n    return null;\n  },\n});\n","import \"./blocks/column-wrapper\";\n// for core styling need add\nimport \"./blocks/block-assets\";\n// for core styling need add\nimport \"./blocks/icon-block\";\n// import './blocks/test-block';\nimport \"./blocks/service-section\";\nimport \"./blocks/pricing-table\";\nimport \"./blocks/progress-bar\";\nimport \"./blocks/progress-bar-pie\";\nimport \"./blocks/ubl-block-slider\";\nimport \"./blocks/post-grid-layout\";\nimport \"./blocks/post-list-layout\";\nimport \"./blocks/ubl-post-slider\";\nimport \"./blocks/post-category-layout\";\nimport \"./blocks/post-image-layout\";\nimport \"./blocks/post-image-layout-two-post\";\nimport \"./blocks/post-image-layout-three-post\";\nimport \"./blocks/post-image-layout-four-post\";\nimport \"./blocks/post-image-layout-five-post\";\nimport \"./blocks/post-image-layout-six-post\";\n// layout block\nimport \"./blocks/block-layout-pre\";\nimport \"./blocks/column-blocks-column\";\n//woocommerce blocks\nimport \"./blocks/simple-product\";\n","/* (ignored) */","module.exports = wp[\"blockEditor\"];","module.exports = wp[\"blocks\"];","module.exports = wp[\"components\"];","module.exports = wp[\"data\"];","module.exports = wp[\"element\"];","module.exports = wp[\"htmlEntities\"];","module.exports = wp[\"i18n\"];"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClvvtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACttBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACndA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACfxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxjlz8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvEA;AACA;AACA,agv3DA;AACA;AACA,atpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvSA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAjBA;AAqBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAdA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AArBA;AAyBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAdA;AAkBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AArBA;AAyBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAXA;AA7SA;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AAAA;AAyNA;;;;;;;;;;;;ACzNA;AAAA;AA08CA;;;;;;;;;;;;AC18CA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAAA;AAEA;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlBA;AAAA;AACA;AADA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAdA;AAAA;AACA;AADA;AAcA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+CA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAEA;;;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AAIA;AALA;AASA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAOA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;ACnVA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AAMA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAkBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAtBA;AAyBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAWA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AAmBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAeA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAvBA;AA2BA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkCA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AACA;AAbA;AAAA;AACA;AADA;AAaA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AAvDA;AAoEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAUA;AACA;AAxFA;AAyFA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAUA;AACA;AA7GA;AA8GA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAHA;AAQA;AAGA;AAAA;AAKA;AAGA;AAAA;AAMA;AACA;AAjKA;AAkKA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAUA;AACA;AA3LA;AA4LA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAAA;AACA;AADA;AAmBA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA7NA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAFA;AAQA;AACA;AAVA;AAAA;AAAA;AAUA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhCA;AAAA;AAAA;AA0DA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAlEA;AAAA;AAAA;AAgOA;AACA;AADA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAmBA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AArQA;AACA;AADA;AAAA;AACA;AAwQA;AAAA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrUA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAUA;;;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAEA;AAAA;AAVA;AAPA;AAsBA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;;;AACA;AAAA;AACA;AAAA;AAYA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AACA;AAFA;AAaA;AADA;AAGA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;;;AACA;AACA;AASA;;;;AAhQA;AACA;AAiQA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5QA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAUA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAfA;AAsBA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AApBA;AAsBA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AApBA;AAwBA;;;;AA3OA;AACA;AA6OA;AACA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjQA;AACA;AACA;AACA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAaA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAWA;AAAA;AAMA;AACA;AAnCA;AACA;AADA;AAFA;AAKA;AACA;;;AAAA;AACA;AACA;AACA;AACA;;;AA4BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AATA;AAaA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAeA;;;;AArJA;AACA;AAuJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AACA;;;AACA;AACA;AAIA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAYA;;;;AA5JA;AACA;AA6JA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxLA;AACA;AACA;AAAA;AACA;;;;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AACA;AADA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1BA;AA2BA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEA;AAqEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1FA;AA2FA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AASA;AACA;AAtGA;AACA;AADA;AAFA;AAKA;AACA;;;AAAA;AAEA;;;AAiGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAJA;AAHA;AAiBA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;;;;AA5KA;AACA;AA8KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLA;;;;AAIA;;;AAGA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AARA;AAUA;AAAA;AAIA;;;;AAvBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4FA;AACA;AAEA;AAAA;AACA;AAAA;AASA;AACA;AA1GA;AA2GA;AACA;AACA;AAAA;AAIA;AACA;AAhHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAFA;AAeA;AACA;AACA;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;AAIA;AACA;;;;AAAA;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;;AAMA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;AAKA;AACA;;;AAuBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAAA;AAGA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAXA;AAgBA;AAGA;AAAA;AAEA;AAAA;AAMA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAMA;AAGA;AAAA;AAEA;AAAA;AAMA;;;;AA7PA;AACA;AACA;AA8PA;AACA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAHA;AAHA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA;;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAKA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAAA;AAMA;AACA;AAAA;;;;;;;;;;;ACrDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;;;;AAGA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAGA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;;;AAGA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;AAUA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAOA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAuBA;AACA;AAFA;AAQA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAdA;AAkBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAyBA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAuBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAWA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAZA;AAeA;AAAA;AAAA;AAGA;AADA;AAOA;AAAA;AAEA;AAKA;AAAA;AACA;AAAA;AADA;AANA;AAaA;AAKA;AAAA;AACA;AAAA;AADA;AANA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAbA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAtDA;AA0DA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AADA;AAMA;AACA;AACA;AAHA;AAWA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAMA;;;;AAzZA;AACA;AA2ZA;AAEA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AANA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACliBA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAFA;AAyCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AA1DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAMA;AA/HA;;;;;;;;;;;ACtFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;;;;AAGA;AACA;AACA;AACA;AAQA;AACA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA1IA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAWA;AACA;AAAA;AAAA;AAGA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AANA;AAAA;AAAA;AAQA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;;;;;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAeA;AACA;AAAA;AADA;AAKA;AAAA;AAKA;AAIA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAsBA;AACA;AAFA;AAQA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAkBA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAeA;AAAA;AAEA;AAAA;AAEA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAZA;AAiBA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAZA;AAmBA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAnBA;AAyBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AA0BA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AA0BA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAbA;AAkBA;AACA;AAFA;AAKA;AADA;AAOA;AAAA;AAEA;AAKA;AAAA;AACA;AAAA;AADA;AANA;AAaA;AAKA;AAAA;AACA;AAAA;AADA;AANA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAbA;AAsBA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAWA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAWA;;;;AAnmBA;AACA;AAomBA;AACA;AACA;AADA;AAAA;AACA;AAEA;AAGA;AACA;AAPA;AAAA;AACA;AAOA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7rBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAFA;AA0CA;AACA;AACA;AAFA;AApEA;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAIA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAGA;AAJA;AAMA;AAAA;AAEA;AACA;AAFA;AASA;AA/JA;;;;;;;;;;;ACjFA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;AACA;AACA;AAalGA;AA6GA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA9BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAAA;AAAA;AAAA;AACA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAIA;AACA;AAFA;AASA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAOA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAUA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AACA;AAAA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAaA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAsBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAOA;AACA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAjBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAgBA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AANA;AAcA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAPA;AAwBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAkBA;AAlyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzBA;AAqCA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAxJA;AAyJA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAdA;AAwBA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAYA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAaA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AASA;AAAA;AAIA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAaA;AAQA;AACA;AACA;AArRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAaA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAsaA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AACA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AACA;AAMA;AAZA;AAkBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAuBA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAYA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAQA;AATA;AAsBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAmBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAFA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAWA;AAAA;AAAA;AAGA;AADA;AAGA;AAAA;AAaA;AAAA;AAGA;AAcA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAUA;;;;AA92CA;AACA;AA+2CA;;;;;;;;;;;AC54CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAVA;AAaA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AATA;AAWA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAFA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAfA;AAmBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAiBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAeA;AAKA;AACA;AAAA;AAAA;AAPA;AAoBA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAMA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAiBA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AAAA;AAQA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAiBA;AAAA;AAAA;AACA;AAFA;AAQA;AAAA;AAUA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAYA;;;;AA1iCA;AACA;AA2iCA;;;;;;;;;;;ACvkCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AA+uCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAl2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAiBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAeA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAMA;AAAA;AAEA;AAcA;AAIA;AAAA;AAkBA;AAWA;AAIA;AAAA;AAeA;AAAA;AAEA;AAcA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AApuCA;AACA;AAq2CA;;;;;;;;;;;ACj4CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AA6wCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA/3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAwBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AASA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAKA;AAWA;AAGA;AAAA;AAeA;AAeA;AAGA;AAAA;AAiBA;AAAA;AAaA;AAAA;AAgBA;AAcA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AAlwCA;AACA;AAk4CA;;;;;;;;;;;AC/5CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAKA;AAOA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAikBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA3qBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AA4BA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAmBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AAEA;AAWA;AASA;;;;AAtjBA;AACA;AA8qBA;;;;;;;;;;;ACzsBA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAivCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAn2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAiBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAmBA;AADA;AAKA;AAWA;AAMA;AAAA;AAEA;AAcA;AAIA;AAAA;AAkBA;AAAA;AAeA;AAAA;AAEA;AAcA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAWA;;;;AAtuCA;AACA;AAs2CA;;;;;;;;;;;ACl4CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAKA;AAQA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AApBA;AAuqBA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAjyBA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAOA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAEA;AAAA;AAAA;AAQA;AATA;AAgBA;AAAA;AAAA;AAGA;AAJA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAeA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AAEA;AAYA;AASA;;;;AA3pBA;AACA;AAoyBA;;;;;;;;;;;ACh0BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AAOA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvBA;AAsgCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAhnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAYA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAoBA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAiBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAqBA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAsBA;AADA;AAUA;AAUA;AAKA;AADA;AAMA;AAAA;AAeA;AADA;AAMA;AAaA;AAYA;;;;AA5/BA;AACA;AAmnCA;;;;;;;;;;;AC7oCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAKA;AAQA;AACA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AAAA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AAAA;AAGA;AACA;AAMA;AACA;AATA;AAgBA;AACA;AAMA;AACA;AATA;AAgBA;AACA;AAMA;AACA;AATA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAVA;AAuBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAZA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AAbA;AAmBA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAWA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAfA;AAmBA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAiBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAoBA;AACA;AACA;AACA;AACA;AAMA;AAXA;AAiBA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAkBA;AADA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AAAA;AAQA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAQA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAcA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AACA;AACA;AAFA;AAIA;AALA;AAWA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AAAA;AAAA;AACA;AAFA;AAQA;AAAA;AAUA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAYA;;;;AA3lCA;AACA;AA4lCA;;;;;;;;;;;ACxnCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAZA;AAoBA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AA7CA;AAFA;AAuDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAnBA;AAFA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AA3NA;AA+NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAYA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAmBA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AAJA;AASA;AAKA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AAJA;AASA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAaA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAYA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAyBA;AACA;AAAA;AADA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAYA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAYA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AAiBA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAjBA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AALA;AASA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAMA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAcA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AAFA;AAYA;AAAA;AAEA;AAEA;AADA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAZA;AAqBA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAcA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAoBA;AACA;AACA;AACA;AAJA;AAOA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAYA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAaA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAbA;AAuBA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAbA;AAyBA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAMA;AAdA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAfA;AAuBA;AAAA;AAGA;AACA;AAMA;AACA;AATA;AAkBA;AACA;AAMA;AACA;AATA;AAmBA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AADA;AADA;AAUA;AAAA;AAEA;AAEA;AACA;AAMA;AACA;AAAA;AAAA;AATA;AAcA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAcA;AACA;AACA;AACA;AAJA;AAUA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAcA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AAFA;AAUA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAdA;AAiBA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAaA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAkBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAgBA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AADA;AAQA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AANA;AAWA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAmBA;AACA;AAFA;AAQA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAXA;AAeA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAVA;AAaA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AAGA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAaA;AAAA;AAEA;AACA;AAGA;AADA;AAJA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AAEA;AAGA;AAEA;AANA;AAUA;AADA;AAZA;AAuBA;AAGA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAZA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAWA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAUA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAEA;AACA;AAGA;AADA;AAJA;AAWA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAEA;AAGA;AAEA;AANA;AAUA;AADA;AAZA;AAuBA;AAGA;AAAA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAcA;AA52EA;;;;;;;;;;;ACxPA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAFA;AAIA;AAAA;AAEA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AACA;AAAA;AADA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AARA;AAeA;AACA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAWA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AApRA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAKA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAeA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAoBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAlSA;;;;;;;;;;;AC9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AATA;AAFA;AAkBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAFA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAhGA;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnFA;AAAA;AAAA;AAAA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAWA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAGA;AAAA;AAXA;AARA;AA8BA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAjBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAeA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAeA;AAAA;AAOA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAeA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAiBA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AANA;AAWA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAlaA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAcA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AAIA;AAAA;AACA;AAAA;AADA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAcA;AAvhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AAEA;AAOA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AApBA;AA4BA;AAAA;AAAA;AACA;AAIA;AAOA;AAMA;AACA;AAMA;AAMA;AAMA;AAMA;AAOA;AACA;AA/EA;AAiFA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA7FA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAaA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AADA;AAIA;AACA;AAAA;AADA;AALA;AACA;AASA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAOA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAuBA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AANA;AAUA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAaA;AACA;AAFA;AAQA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAgBA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAOA;AAMA;AAMA;AAMA;AAtCA;AA4CA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAiBA;AADA;AAMA;AAAA;AAIA;AAAA;AAMA;;;;AAhYA;AACA;AAiYA;;;;;;;;;;;AC/ZA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAOA;AASA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAlCA;AAyCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA3DA;AA0EA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA/EA;AAiFA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AA+CA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;;;AAmBA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAIA;AAGA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAUA;AAAA;AAGA;AAAA;AAEA;AACA;AAEA;AADA;AASA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAjBA;AAuBA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AACA;AANA;AAeA;AACA;AACA;AADA;AAGA;AACA;AANA;AAyBA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAGA;AAAA;AAXA;AAVA;AA8BA;AAAA;AAEA;AACA;AAKA;AAPA;AAYA;AAAA;AAKA;AACA;AACA;AAKA;AARA;AAUA;AAAA;AAGA;AAAA;AAGA;AAAA;AAeA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAsBA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAyBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAZA;AAgBA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AA4BA;AAKA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAKA;AACA;AArBA;AA6BA;AAKA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAKA;AACA;AArBA;AA+BA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAYA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAKA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AADA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AADA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AAoBA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAesBA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAZA;AAyBA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAKA;AAfA;AAmBA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAhBA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAKA;AACA;AAAA;AAAA;AAPA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAeA;AACA;AAAA;AAAA;AAFA;AAkBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAUA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAMA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAKA;AADA;AAOA;AADA;AAKA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAGA;AAZA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AATA;AAoBA;AAMA;AACA;;;;AAz5CA;AACA;AA05CA;;;;;;;;;;;AC/6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAdA;AApDA;AAHA;AA0EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AAsEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AAsEA;AACA;AACA;AACA;AACA;AACA;AAEA;AALA;AAOA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AAEA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAhDA;AA7IA;AA3EA;AACA;AA+RA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AACA;AAGA;AACA;AANA;AASA;AACA;AAFA;AASA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAcA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAYA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AAFA;AAKA;AACA;AAKA;AA1GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACldA;AAKA;AAQA;AACA;AAWA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtBA;AAuBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9BA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAkBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AACA;AALA;AAQA;AAAA;AAGA;AACA;AACA;AAMA;AATA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAqBA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAUA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAaA;AACA;AACA;AACA;AAJA;AAmBA;AAAA;AAEA;AACA;AAKA;AACA;AARA;AAiBA;AACA;AAKA;AACA;AARA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAiBA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAiBA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAsBA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAiBA;AACA;AAAA;AAAA;AAFA;AAgBA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AAKA;AACA;AAAA;AAAA;AAPA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAjBA;AAmBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAFA;AAKA;AAKA;AACA;AAAA;AAAA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AAkBA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AACA;AAAA;AAAA;AAPA;AAiBA;AACA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAMA;AAVA;AAkBA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAbA;AAiBA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAQA;AACA;AAFA;AAIA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAUA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AAFA;AAKA;AANA;AAeA;AACA;AACA;AAFA;AAKA;AANA;AAYA;AACA;AACA;AAFA;AAKA;AANA;AAgBA;AACA;AACA;AAFA;AAKA;AANA;AAYA;AACA;AACA;AAFA;AAKA;AANA;AAkBA;AACA;AACA;AAFA;AAIA;AALA;AAeA;AAAA;AAAA;AACA;AAFA;AAgBA;AAKA;AADA;AAIA;AAKA;AADA;AAQA;AADA;AAKA;AAIA;AAAA;AAKA;AADA;AAKA;AAAA;AAGA;AAWA;;;;AA5sCA;AACA;AA6sCA;;;;;;;;;;;ACzuCA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}